00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/11/2014 3:46:06 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  
00001000  6100 000C                 13  PROGRAMLOOP BSR     CLEAR_ALL   * ---- clear registers
00001004                            14  
00001004                            15              * -- read string of starting address
00001004  6100 001A                 16              BSR     CONVERT_START_LOCATION
00001008                            17              * -- post-condition: the address as specified by the user input is stored in D4
00001008                            18  
00001008  594B                      19              SUBA.W  #4, A3
0000100A  6000 01A2                 20              BRA     MAINLOOP_PRIME
0000100E                            21  
0000100E  4240                      22  CLEAR_ALL   CLR     D0
00001010  4241                      23              CLR     D1
00001012  4242                      24              CLR     D2
00001014  4243                      25              CLR     D3
00001016  4244                      26              CLR     D4
00001018  4245                      27              CLR     D5
0000101A  4246                      28              CLR     D6
0000101C  4247                      29              CLR     D7
0000101E  4E75                      30              RTS
00001020                            31  
00001020  4241                      32  CONVERT_START_LOCATION  CLR     D1
00001022  227C 00007000             33                          MOVEA.L #$7000,A1
00001028  103C 0002                 34                          MOVE.B  #2,D0   * --- read NULL-terminated string
0000102C  4E4F                      35                          TRAP    #15     * --- read string into (A1)
0000102E  2649                      36                          MOVEA.L A1,A3   * --- make a copy to preserve original input
00001030  6100 0004                 37  END_CONVERT_START_LOCATION  BSR     CONVERT_LOOP
00001034  4E75                      38                          RTS
00001036                            39  
00001036                            40  * ---------------- convert string into hex
00001036                            41  * -- pre-condition:     (A3) points to the top of the STR stack
00001036                            42  
00001036  B27C 0000                 43  CONVERT_LOOP            CMP.W   #0,D1
0000103A  6700 000A                 44                          BEQ     END_CONVERT_LOOP        * -- done converting whole string
0000103E  6100 0008                 45                          BSR     CONVERT_STR_TO_HEX
00001042  5301                      46                          SUB.B   #1,D1
00001044  60F0                      47                          BRA     CONVERT_LOOP
00001046  4E75                      48  END_CONVERT_LOOP        RTS     * -- return to main flow
00001048                            49  
00001048                            50  * -------------------------------------------------------------------------
00001048                            51  * ------- SUBROUTINE Convert ONE Character into ONE HEX value -------------
00001048                            52  
00001048  161B                      53  CONVERT_STR_TO_HEX      MOVE.B  (A3)+,D3    * -- pop one character
0000104A  B63C 0030                 54                          CMP.B   #$30,D3     * -- #$30 is the character '0'
0000104E  6700 00B2                 55                          BEQ     STR_TO_HEX_ZERO
00001052                            56  
00001052  B63C 0031                 57                          CMP.B   #$31,D3
00001056  6700 00B4                 58                          BEQ     STR_TO_HEX_ONE
0000105A                            59                          
0000105A  B63C 0032                 60                          CMP.B   #$32,D3
0000105E  6700 00B6                 61                          BEQ     STR_TO_HEX_TWO
00001062                            62                          
00001062  B63C 0033                 63                          CMP.B   #$33,D3
00001066  6700 00B8                 64                          BEQ     STR_TO_HEX_THREE
0000106A                            65                          
0000106A  B63C 0034                 66                          CMP.B   #$34,D3
0000106E  6700 00BA                 67                          BEQ     STR_TO_HEX_FOUR
00001072                            68                          
00001072  B63C 0035                 69                          CMP.B   #$35,D3
00001076  6700 00BC                 70                          BEQ     STR_TO_HEX_FIVE
0000107A                            71                          
0000107A  B63C 0036                 72                          CMP.B   #$36,D3
0000107E  6700 00BE                 73                          BEQ     STR_TO_HEX_SIX
00001082                            74                          
00001082  B63C 0037                 75                          CMP.B   #$37,D3
00001086  6700 00C0                 76                          BEQ     STR_TO_HEX_SEVEN
0000108A                            77                          
0000108A  B63C 0038                 78                          CMP.B   #$38,D3
0000108E  6700 00C2                 79                          BEQ     STR_TO_HEX_EIGHT
00001092                            80                          
00001092  B63C 0039                 81                          CMP.B   #$39,D3             * -- #$39 is the character '9'
00001096  6700 00C4                 82                          BEQ     STR_TO_HEX_NINE
0000109A                            83                          
0000109A  B63C 0041                 84                          CMP.B   #$41,D3             * -- #$41 is the character 'A'
0000109E  6700 00C6                 85                          BEQ     STR_TO_HEX_A
000010A2  B63C 0061                 86                          CMP.B   #$61,D3             * -- #$61 is the character 'a'
000010A6  6700 00BE                 87                          BEQ     STR_TO_HEX_A
000010AA                            88  
000010AA  B63C 0042                 89                          CMP.B   #$42,D3
000010AE  6700 00C0                 90                          BEQ     STR_TO_HEX_B
000010B2  B63C 0062                 91                          CMP.B   #$62,D3
000010B6  6700 00B8                 92                          BEQ     STR_TO_HEX_B
000010BA                            93                          
000010BA  B63C 0043                 94                          CMP.B   #$43,D3
000010BE  6700 00BA                 95                          BEQ     STR_TO_HEX_C
000010C2  B63C 0063                 96                          CMP.B   #$63,D3
000010C6  6700 00B2                 97                          BEQ     STR_TO_HEX_C
000010CA                            98  
000010CA  B63C 0044                 99                          CMP.B   #$44,D3
000010CE  6700 00B4                100                          BEQ     STR_TO_HEX_D
000010D2  B63C 0064                101                          CMP.B   #$64,D3
000010D6  6700 00AC                102                          BEQ     STR_TO_HEX_D
000010DA                           103                          
000010DA  B63C 0045                104                          CMP.B   #$45,D3
000010DE  6700 00AE                105                          BEQ     STR_TO_HEX_E
000010E2  B63C 0065                106                          CMP.B   #$65,D3
000010E6  6700 00A6                107                          BEQ     STR_TO_HEX_E
000010EA                           108                          
000010EA  B63C 0046                109                          CMP.B   #$46,D3
000010EE  6700 00A8                110                          BEQ     STR_TO_HEX_F
000010F2  B63C 0066                111                          CMP.B   #$66,D3
000010F6  6700 00A0                112                          BEQ     STR_TO_HEX_F
000010FA                           113  
000010FA  6000 0002                114                          BRA     INVALID_CHARACTER
000010FE                           115  
000010FE                           116  * --------------- Conversion definitions ------------
000010FE                           117  
000010FE  4E71                     118  INVALID_CHARACTER       NOP              * -- skip invalid character
00001100  4E75                     119                          RTS
00001102  7600                     120  STR_TO_HEX_ZERO         MOVE.L  #$0,D3   * -- push HEX 0 into HEX stack
00001104  6100 009C                121                          BSR     SHIFT_START_ADDR
00001108  D883                     122                          ADD.L   D3,D4
0000110A  4E75                     123                          RTS
0000110C  7601                     124  STR_TO_HEX_ONE          MOVE.L  #$1,D3   * -- push HEX 1 into HEX stack
0000110E  6100 0092                125                          BSR     SHIFT_START_ADDR
00001112  D883                     126                          ADD.L   D3,D4
00001114  4E75                     127                          RTS
00001116  7602                     128  STR_TO_HEX_TWO          MOVE.L  #$2,D3   * -- push HEX 2 into HEX stack
00001118  6100 0088                129                          BSR     SHIFT_START_ADDR
0000111C  D883                     130                          ADD.L   D3,D4
0000111E  4E75                     131                          RTS
00001120  7603                     132  STR_TO_HEX_THREE        MOVE.L  #$3,D3   * -- push HEX 3 into HEX stack
00001122  6100 007E                133                          BSR     SHIFT_START_ADDR
00001126  D883                     134                          ADD.L   D3,D4
00001128  4E75                     135                          RTS
0000112A  7604                     136  STR_TO_HEX_FOUR         MOVE.L  #$4,D3   * -- push HEX 4 into HEX stack
0000112C  6100 0074                137                          BSR     SHIFT_START_ADDR
00001130  D883                     138                          ADD.L   D3,D4
00001132  4E75                     139                          RTS
00001134  7605                     140  STR_TO_HEX_FIVE         MOVE.L  #$5,D3   * -- push HEX 5 into HEX stack
00001136  6100 006A                141                          BSR     SHIFT_START_ADDR
0000113A  D883                     142                          ADD.L   D3,D4
0000113C  4E75                     143                          RTS
0000113E  7606                     144  STR_TO_HEX_SIX          MOVE.L  #$6,D3   * -- push HEX 6 into HEX stack
00001140  6100 0060                145                          BSR     SHIFT_START_ADDR
00001144  D883                     146                          ADD.L   D3,D4
00001146  4E75                     147                          RTS
00001148  7607                     148  STR_TO_HEX_SEVEN        MOVE.L  #$7,D3   * -- push HEX 7 into HEX stack
0000114A  6100 0056                149                          BSR     SHIFT_START_ADDR
0000114E  D883                     150                          ADD.L   D3,D4
00001150  4E75                     151                          RTS
00001152  7608                     152  STR_TO_HEX_EIGHT        MOVE.L  #$8,D3   * -- push HEX 8 into HEX stack
00001154  6100 004C                153                          BSR     SHIFT_START_ADDR
00001158  D883                     154                          ADD.L   D3,D4
0000115A  4E75                     155                          RTS
0000115C  7609                     156  STR_TO_HEX_NINE         MOVE.L  #$9,D3   * -- push HEX 9 into HEX stack
0000115E  6100 0042                157                          BSR     SHIFT_START_ADDR
00001162  D883                     158                          ADD.L   D3,D4
00001164  4E75                     159                          RTS
00001166  760A                     160  STR_TO_HEX_A            MOVE.L  #$A,D3   * -- push HEX A into HEX stack
00001168  6100 0038                161                          BSR     SHIFT_START_ADDR
0000116C  D883                     162                          ADD.L   D3,D4
0000116E  4E75                     163                          RTS
00001170  760B                     164  STR_TO_HEX_B            MOVE.L  #$B,D3   * -- push HEX B into HEX stack
00001172  6100 002E                165                          BSR     SHIFT_START_ADDR
00001176  D883                     166                          ADD.L   D3,D4
00001178  4E75                     167                          RTS
0000117A  760C                     168  STR_TO_HEX_C            MOVE.L  #$C,D3   * -- push HEX C into HEX stack
0000117C  6100 0024                169                          BSR     SHIFT_START_ADDR
00001180  D883                     170                          ADD.L   D3,D4
00001182  4E75                     171                          RTS
00001184  760D                     172  STR_TO_HEX_D            MOVE.L  #$D,D3   * -- push HEX D into HEX stack
00001186  6100 001A                173                          BSR     SHIFT_START_ADDR
0000118A  D883                     174                          ADD.L   D3,D4
0000118C  4E75                     175                          RTS
0000118E  760E                     176  STR_TO_HEX_E            MOVE.L  #$E,D3   * -- push HEX E into HEX stack
00001190  6100 0010                177                          BSR     SHIFT_START_ADDR
00001194  D883                     178                          ADD.L   D3,D4
00001196  4E75                     179                          RTS
00001198  760F                     180  STR_TO_HEX_F            MOVE.L  #$F,D3   * -- push HEX F into HEX stack
0000119A  6100 0006                181                          BSR     SHIFT_START_ADDR
0000119E  D883                     182                          ADD.L   D3,D4
000011A0  4E75                     183                          RTS
000011A2                           184  
000011A2  4247                     185  SHIFT_START_ADDR        CLR     D7
000011A4  3E01                     186                          MOVE.W  D1,D7
000011A6  5347                     187                          SUB.W   #1,D7
000011A8  E547                     188                          ASL     #2,D7   * -- D7 = (D1 - 1) * 4
000011AA  EFA3                     189                          ASL.L   D7,D3
000011AC  4E75                     190  END_SHIFT_START_ADDR    RTS
000011AE                           191  
000011AE                           192  * ---------------- load starting hex into A6
000011AE  2C44                     193  MAINLOOP_PRIME          MOVEA.L D4,A6     * -- address cannot be longer than LONG-size
000011B0  6000 0002                194                          BRA     MAIN_LOOP
000011B4                           195  
000011B4                           196  * ---------------- read one word and decode
000011B4  BC7C FFFF                197  MAIN_LOOP    CMP.W      #$FFFF, D6
000011B8  6700 1362                198               BEQ        AFTER_MAIN_LOOP
000011BC  4EB9 0000242E            199               JSR        FLUSH_OUTPUT_BUFFER
000011C2                           200  
000011C2                           201      * ----- read data from (A6)+ into D6
000011C2  4246                     202      CLR         D6
000011C4  324B                     203      MOVEA.W     A3, A1
000011C6  3C1E                     204      MOVE.W      (A6)+, D6
000011C8                           205      
000011C8                           206      * ----- process data in D6
000011C8  6000 000E                207      BRA     DECODE_OPCODE
000011CC                           208  
000011CC  16FC 0000                209  MAIN_LOOP_END   MOVE.B  #0, (A3)+
000011D0  103C 000D                210                  MOVE.B  #13, D0
000011D4  4E4F                     211                  TRAP    #15    
000011D6                           212         
000011D6  60DC                     213                  BRA MAIN_LOOP
000011D8                           214  
000011D8                           215  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           216  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           217  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           218  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           219  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           220  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           221  * ------------------------------------------------------- OP CODE ------------------------------------------------------------------
000011D8                           222  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           223  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           224  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           225  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           226  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           227  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           228  
000011D8                           229  
000011D8                           230  * -- Preconditions: The instruction as read from memory is stored in D6
000011D8                           231  
000011D8                           232  
000011D8                           233  * -- Preconditions: The instruction as read from memory is stored in D6
000011D8                           234  
000011D8  3A06                     235  DECODE_OPCODE       MOVE.W      D6, D5                  * -- make copy
000011DA  CA7C F000                236                      AND.W       #$F000, D5              * -- mask opcode
000011DE  123C 000C                237                      MOVE.B      #12, D1
000011E2  E2AD                     238                      LSR.L       D1, D5 
000011E4                           239  
000011E4  BA3C 0006                240  IDENT_OPCODE        CMP.B       #%0110, D5
000011E8  6700 0118                241                      BEQ         DECODE_GROUP_6
000011EC  BA3C 0004                242                      CMP.B       #%0100, D5
000011F0  6700 00C0                243                      BEQ         DECODE_GROUP_4
000011F4  BA3C 000C                244                      CMP.B       #%1100, D5
000011F8  6700 00A4                245                      BEQ         DECODE_GROUP_C
000011FC  BA3C 000D                246                      CMP.B       #%1101, D5
00001200  6700 0088                247                      BEQ         DECODE_GROUP_D
00001204  BA3C 0009                248                      CMP.B       #%1001, D5
00001208  6700 006C                249                      BEQ         DECODE_GROUP_9
0000120C  BA3C 0005                250                      CMP.B       #%0101, D5
00001210  6700 0052                251                      BEQ         DECODE_GROUP_5
00001214  BA3C 0008                252                      CMP.B       #%1000, D5
00001218  6700 0038                253                      BEQ         DECODE_GROUP_8
0000121C  BA3C 0001                254                      CMP.B       #%0001, D5
00001220  6700 001C                255                      BEQ         DECODE_GROUP_MOVE
00001224  BA3C 0002                256                      CMP.B       #%0010, D5
00001228  6700 0014                257                      BEQ         DECODE_GROUP_MOVE
0000122C  BA3C 0003                258                      CMP.B       #%0011, D5
00001230  6700 000C                259                      BEQ         DECODE_GROUP_MOVE
00001234  6000 0002                260                      BRA         INVALID_OPCODE
00001238                           261  
00001238  6000 0002                262  INVALID_OPCODE      BRA         DECODE_OPCODE_DONE
0000123C                           263  
0000123C  608E                     264  DECODE_OPCODE_DONE  BRA         MAIN_LOOP_END
0000123E                           265  
0000123E  3A06                     266  DECODE_GROUP_MOVE   MOVE.W      D6, D5
00001240  CA7C 01C0                267                      AND.W       #$01C0, D5
00001244  EC4D                     268                      LSR.W       #6, D5
00001246  BA3C 0001                269                      CMP.B       #%001, D5
0000124A  6700 00CA                270                      BEQ         DECODE_MOVEA
0000124E  6000 00CA                271                      BRA         DECODE_MOVE
00001252                           272  
00001252  3A06                     273  DECODE_GROUP_8      MOVE.W      D6, D5
00001254  CA7C 01C0                274                      AND.W       #$01C0, D5
00001258  EC4D                     275                      LSR.W       #6, D5
0000125A  BA3C 0007                276                      CMP.B       #%111, D5
0000125E  6700 017A                277                      BEQ         DECODE_DIVS
00001262  60D4                     278                      BRA         INVALID_OPCODE 
00001264                           279  
00001264  3A06                     280  DECODE_GROUP_5      MOVE.W      D6, D5
00001266  CA7C 0100                281                      AND.W       #$0100, D5
0000126A  E04D                     282                      LSR.W       #8, D5
0000126C  BA3C 0000                283                      CMP.B       #0, D5
00001270  6700 01EA                284                      BEQ         DECODE_ADDQ
00001274  60C2                     285                      BRA         INVALID_OPCODE  
00001276                           286  
00001276  3A06                     287  DECODE_GROUP_9      MOVE.W      D6, D5
00001278  CA7C 00C0                288                      AND.W       #$00C0, D5
0000127C  EC4D                     289                      LSR.W       #6, D5
0000127E  BA3C 0003                290                      CMP.B       #%11, D5
00001282  6700 0382                291                      BEQ         DECODE_SUBA
00001286  6000 0284                292                      BRA         DECODE_SUB                                                         
0000128A                           293  
0000128A  3A06                     294  DECODE_GROUP_D      MOVE.W      D6, D5
0000128C  CA7C 00C0                295                      AND.W       #$00C0, D5
00001290  EC4D                     296                      LSR.W       #6, D5
00001292  BA3C 0003                297                      CMP.B       #%11, D5
00001296  6700 051E                298                      BEQ         DECODE_ADDA
0000129A  6000 0420                299                      BRA         DECODE_ADD
0000129E                           300  
0000129E  3A06                     301  DECODE_GROUP_C      MOVE.W      D6, D5
000012A0  CA7C 00C0                302                      AND.W       #$00C0, D5
000012A4  EC4D                     303                      LSR.W       #6, D5
000012A6  BA3C 0003                304                      CMP.B       #%11, D5
000012AA  6700 06BA                305                      BEQ         DECODE_MULS
000012AE  6000 05BC                306                      BRA         DECODE_AND
000012B2                           307  
000012B2  3A06                     308  DECODE_GROUP_4      MOVE.W      D6, D5                  * -- recover the data
000012B4  BA7C 4E75                309                      CMP.W       #$4E75, D5
000012B8  6700 0826                310                      BEQ         DECODE_RTS
000012BC                           311  
000012BC  CA7C 0FC0                312                      AND.W       #$0FC0, D5              * -- mask #1
000012C0  EC4D                     313                      LSR.W       #6, D5
000012C2                           314  
000012C2  BA7C 003A                315                      CMP.W       #%111010, D5
000012C6  6700 0828                316                      BEQ         DECODE_JSR
000012CA                           317  
000012CA  CA7C 0007                318                      AND.W       #$07, D5                * -- mask #2
000012CE                           319  
000012CE  BA7C 0007                320                      CMP.W       #%111, D5
000012D2                           321                      *BEQ         DECODE_LEA
000012D2                           322  
000012D2  3A06                     323                      MOVE.W      D6, D5                  * -- recover data
000012D4  CA7C 0800                324                      AND.W       #$0800, D5              * -- mask #3
000012D8  123C 000B                325                      MOVE.B      #11, D1
000012DC  E26D                     326                      LSR.W       D1, D5
000012DE  BA3C 0001                327                      CMP.B       #1, D5
000012E2                           328                      *BEQ         DECODE_MOVEM
000012E2                           329  
000012E2  3A06                     330                      MOVE.W      D6, D5                  * -- recover data
000012E4  CA7C 0E00                331                      AND.W       #$0E00, D5              * -- mask #4
000012E8  123C 0009                332                      MOVE.B      #9, D1
000012EC  E26D                     333                      LSR.W       D1, D5
000012EE  BA3C 0002                334                      CMP.B       #%010, D5
000012F2  6700 0776                335                      BEQ         DECODE_NEG
000012F6  BA3C 0003                336                      CMP.B       #%011, D5
000012FA  6700 06F8                337                      BEQ         DECODE_NOT
000012FE  6000 FF38                338                      BRA         INVALID_OPCODE
00001302                           339  
00001302  3A06                     340  DECODE_GROUP_6      MOVE.W      D6, D5
00001304  CA7C 0F00                341                      AND.W       #$0F00, D5
00001308  E04D                     342                      LSR.W       #8, D5
0000130A  BA3C 0000                343                      CMP.B       #0, D5
0000130E  6600 0890                344                      BNE         DECODE_Bcc
00001312  6000 0826                345                      BRA         DECODE_BRA
00001316                           346  
00001316                           347  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           348  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           349  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           350  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           351  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           352  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           353  * --------------------------------------------------- END OP CODE ------------------------------------------------------------------
00001316                           354  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           355  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           356  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           357  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           358  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           359  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           360  
00001316                           361  
00001316                           362  
00001316                           363  
00001316                           364  
00001316                           365  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           366  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           367  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           368  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           369  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           370  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           371  * --------------------------------------------------- EFFECTIVE ADDRESS ------------------------------------------------------------
00001316                           372  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           373  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           374  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           375  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           376  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           377  * ----------------------------------------------------------------------------------------------------------------------------------
00001316                           378  
00001316  6000 FF20                379  DECODE_MOVEA    BRA INVALID_OPCODE
0000131A                           380  
0000131A  6000 0002                381  DECODE_MOVE  BRA     MOVE_SIZE
0000131E                           382              
0000131E                           383              * -- chop the bits
0000131E                           384              * -- 1/ bits 6 and 7
0000131E  2A06                     385  MOVE_SIZE   MOVE.L  D6, D5
00001320  CABC 00003000            386              AND.L   #%0011000000000000, D5   
00001326  123C 000C                387              MOVE.B  #12, D1
0000132A  E2AD                     388              LSR.L   D1, D5                  * -- D5 contains the ss info
0000132C  13C5 00002525            389              MOVE.B  D5, WEIRD_SIZE
00001332  6000 0002                390              BRA     MOVE_DEST_REG
00001336                           391  
00001336  2A06                     392  MOVE_DEST_REG   MOVE.L  D6, D5
00001338  CABC 00000E00            393              AND.L   #%0000111000000000, D5   
0000133E  123C 0009                394              MOVE.B  #9, D1
00001342  E2AD                     395              LSR.L   D1, D5                  * -- D5 contains the ss info
00001344  13C5 0000252C            396              MOVE.B  D5, DEST_REG
0000134A  6000 0002                397              BRA     MOVE_DEST_MODE    
0000134E                           398  
0000134E  2A06                     399  MOVE_DEST_MODE  MOVE.L  D6, D5
00001350  CABC 000001C0            400              AND.L   #%0000000111000000, D5   
00001356  EC8D                     401              LSR.L   #6, D5                  * -- D5 contains the ss info
00001358  13C5 0000252B            402              MOVE.B  D5, DEST_MODE
0000135E  6000 0002                403              BRA     MOVE_MODE                      
00001362                           404  
00001362  2A06                     405  MOVE_MODE    MOVE.L  D6, D5
00001364  CABC 00000038            406              AND.L   #%0000000000111000, D5   * -- bits 3, 4, 5
0000136A  E68D                     407              LSR.L   #3, D5
0000136C  13C5 00002527            408              MOVE.B  D5, EA_MODE
00001372  6000 0002                409              BRA     MOVE_REG
00001376                           410  
00001376  2A06                     411  MOVE_REG     MOVE.L  D6, D5
00001378  CABC 00000007            412              AND.L   #%0000000000000111, D5
0000137E  13C5 00002528            413              MOVE.B  D5, EA_REG
00001384  6000 0002                414              BRA     MOVE_PROCESS
00001388                           415  
00001388  4EB9 00001C96            416  MOVE_PROCESS JSR     DECODE_WEIRD_SIZE
0000138E  4EB9 00001E80            417              JSR     DECODE_EA_MODE
00001394  4EB9 00001D02            418              JSR     DECODE_DEST_MODE
0000139A  6000 0002                419              BRA     MOVE_ARRANGE_OUTPUT
0000139E                           420  
0000139E  16FC 004D                421  MOVE_ARRANGE_OUTPUT     MOVE.B            #'M', (A3)+
000013A2  16FC 004F                422                          MOVE.B            #'O', (A3)+
000013A6  16FC 0056                423                          MOVE.B            #'V', (A3)+
000013AA  16FC 0045                424                          MOVE.B            #'E', (A3)+
000013AE  23F9 0000253A 0000257C   425                          MOVE.L            WEIRD_SIZE_OUT, PRINT_BUFFER
000013B8  13FC 0002 00002590       426                          MOVE.B            #2, PRINT_SIZE
000013C0  4EB9 000024F8            427                          JSR               PRINT_STUFF
000013C6                           428  
000013C6  4EB9 00002354            429                          JSR               PRINT_EA_MODE
000013CC  16FC 002C                430                          MOVE.B            #',', (A3)+
000013D0  4EB9 0000237E            431                          JSR               PRINT_DEST_MODE
000013D6                           432  
000013D6  6000 FDF4                433                          BRA               MAIN_LOOP_END
000013DA                           434  
000013DA                           435  
000013DA                           436  ********************************** DIVS
000013DA                           437  
000013DA  6000 0002                438  DECODE_DIVS  BRA     DIVS_DEST_REG
000013DE                           439              
000013DE                           440              * -- chop the bits
000013DE                           441              * -- 1/ bits 6 and 7
000013DE  2A06                     442  DIVS_DEST_REG   MOVE.L  D6, D5
000013E0  CABC 00000E00            443              AND.L   #%0000111000000000, D5   
000013E6  123C 0009                444              MOVE.B  #9, D1
000013EA  E2AD                     445              LSR.L   D1, D5                   * -- D5 contains the ss info
000013EC  13C5 0000252C            446              MOVE.B  D5, DEST_REG
000013F2  6000 0002                447              BRA     DIVS_MODE
000013F6                           448  
000013F6  2A06                     449  DIVS_MODE    MOVE.L  D6, D5
000013F8  CABC 00000038            450              AND.L   #%0000000000111000, D5   * -- bits 3, 4, 5
000013FE  E68D                     451              LSR.L   #3, D5
00001400  13C5 00002527            452              MOVE.B  D5, EA_MODE
00001406  6000 0002                453              BRA     DIVS_REG
0000140A                           454  
0000140A  2A06                     455  DIVS_REG     MOVE.L  D6, D5
0000140C  CABC 00000007            456              AND.L   #%0000000000000111, D5
00001412                           457  
00001412  13C5 00002528            458              MOVE.B  D5, EA_REG
00001418  6000 0002                459              BRA     DIVS_PROCESS
0000141C                           460  
0000141C  4EB9 00002034            461  DIVS_PROCESS      JSR         DECODE_DEST_REG
00001422  4EB9 00001E80            462                    JSR         DECODE_EA_MODE
00001428  6000 0002                463                    BRA         DIVS_ARRANGE_OUTPUT
0000142C                           464  
0000142C  16FC 0044                465  DIVS_ARRANGE_OUTPUT            MOVE.B  #'D',(A3)+
00001430  16FC 0049                466              MOVE.B  #'I',(A3)+
00001434  16FC 0056                467              MOVE.B  #'V',(A3)+
00001438  16FC 0053                468              MOVE.B  #'S',(A3)+
0000143C  16FC 002E                469              MOVE.B  #'.',(A3)+
00001440  16FC 0057                470              MOVE.B  #'W',(A3)+
00001444  4EB9 00002354            471              JSR     PRINT_EA_MODE
0000144A  16FC 002C                472              MOVE.B  #',',(A3)+
0000144E  16FC 0044                473              MOVE.B  #'D',(A3)+
00001452                           474  *            MOVE.L  DEST_REG_OUT, PRINT_BUFFER
00001452                           475  *            MOVE.L  #1, PRINT_SIZE
00001452                           476  *            JSR     PRINT_STUFF
00001452  16F9 00002568            477              MOVE.B  DEST_REG_OUT, (A3)+
00001458  6000 FD72                478              BRA     MAIN_LOOP_END
0000145C                           479  
0000145C                           480  ***************************** END DIVS                      
0000145C                           481  
0000145C                           482  ******************************START ADDQ
0000145C                           483  
0000145C  6000 0002                484  DECODE_ADDQ  BRA     ADDQ_DATA
00001460                           485              
00001460                           486   
00001460  2A06                     487  ADDQ_DATA   MOVE.L  D6, D5
00001462  CABC 00000E00            488              AND.L   #%0000111000000000, D5   
00001468  123C 0009                489              MOVE.B  #9, D1
0000146C  E2AD                     490              LSR.L   D1, D5                   * -- D5 contains the ss info
0000146E  13C5 00002533            491              MOVE.B  D5, DATA
00001474  6000 0002                492              BRA     ADDQ_SIZE
00001478                           493  
00001478                           494  
00001478  2A06                     495  ADDQ_SIZE   MOVE.L  D6, D5
0000147A  CABC 000000C0            496              AND.L   #%0000000011000000, D5   
00001480  EC8D                     497              LSR.L   #6, D5                  * -- D5 contains the ss info
00001482  13C5 00002524            498              MOVE.B  D5, SIZE
00001488  6000 0002                499              BRA     ADDQ_MODE
0000148C                           500  
0000148C  2A06                     501  ADDQ_MODE    MOVE.L  D6, D5
0000148E  CABC 00000038            502              AND.L   #%0000000000111000, D5   * -- bits 3, 4, 5
00001494  E68D                     503              LSR.L   #3, D5
00001496  13C5 00002527            504              MOVE.B  D5, EA_MODE
0000149C  6000 0002                505              BRA     ADDQ_REG
000014A0                           506  
000014A0  2A06                     507  ADDQ_REG     MOVE.L  D6, D5
000014A2  CABC 00000007            508              AND.L   #%0000000000000111, D5
000014A8                           509  
000014A8  13C5 00002528            510              MOVE.B  D5, EA_REG
000014AE  6000 0002                511              BRA     ADDQ_PROCESS
000014B2                           512  
000014B2  4EB9 000022C2            513  ADDQ_PROCESS JSR     DECODE_TWO_BIT_SIZE     * -- ADDQ supports byte, word, and long so it needs
000014B8                           514                                              * -- 2 bits for SIZE
000014B8  4EB9 0000231C            515               JSR    DECODE_DATA
000014BE  4EB9 00001E80            516              JSR     DECODE_EA_MODE
000014C4  6000 0002                517              BRA     ADDQ_ARRANGE_OUTPUT            
000014C8                           518              
000014C8                           519                          
000014C8  16FC 0041                520  ADDQ_ARRANGE_OUTPUT            MOVE.B  #'A',(A3)+
000014CC  16FC 0044                521              MOVE.B  #'D',(A3)+
000014D0  16FC 0044                522              MOVE.B  #'D',(A3)+
000014D4  16FC 0051                523              MOVE.B  #'Q',(A3)+
000014D8  23F9 00002536 0000257C   524              MOVE.L  SIZE_OUT, PRINT_BUFFER
000014E2  13FC 0002 00002590       525              MOVE.B  #2, PRINT_SIZE
000014EA  4EB9 000024F8            526              JSR     PRINT_STUFF
000014F0                           527  
000014F0  16FC 0023                528              MOVE.B  #'#',(A3)+
000014F4  16FC 0024                529              MOVE.B  #'$',(A3)+
000014F8  16F9 00002576            530              MOVE.B  DATA_OUT, (A3)+
000014FE  16FC 002C                531              MOVE.B  #',',(A3)+
00001502  4EB9 00002354            532              JSR     PRINT_EA_MODE
00001508  6000 FCC2                533              BRA     MAIN_LOOP_END
0000150C                           534  
0000150C                           535  ************************* END ADDQ **************
0000150C                           536  
0000150C                           537  ************************** START SUB**************
0000150C  6000 0002                538  DECODE_SUB  BRA     SUB_SRC_REG
00001510                           539              
00001510                           540              * -- chop the bits
00001510                           541              * -- 1/ bits 6 SUB 7
00001510                           542  
00001510  2A06                     543  SUB_SRC_REG   MOVE.L  D6, D5
00001512  CA7C 0E00                544              AND.W   #%0000111000000000, D5   
00001516  123C 0009                545              MOVE.B  #9, D1
0000151A  E2AD                     546              LSR.L   D1, D5                 * -- D5 contains the ss info
0000151C  13C5 0000252A            547              MOVE.B  D5, SRC_REG
00001522  6000 0002                548              BRA     SUB_DIR
00001526                           549  
00001526  2A06                     550  SUB_DIR     MOVE.L  D6, D5
00001528  CA7C 0100                551              AND.W   #%0000000100000000, D5   
0000152C  E08D                     552              LSR.L   #8, D5                  * -- D5 contains the ss info
0000152E  13C5 00002526            553              MOVE.B  D5, DIRECTION
00001534  6000 0002                554              BRA     SUB_SIZE
00001538                           555  
00001538  2A06                     556  SUB_SIZE    MOVE.L  D6, D5
0000153A  CA7C 00C0                557              AND.W   #%0000000011000000, D5   
0000153E  EC8D                     558              LSR.L   #6, D5                  * -- D5 contains the ss info
00001540  13C5 00002524            559              MOVE.B  D5, SIZE
00001546  6000 0002                560              BRA     SUB_MODE
0000154A                           561  
0000154A  2A06                     562  SUB_MODE    MOVE.L  D6, D5
0000154C  CA7C 0038                563              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
00001550  E68D                     564              LSR.L   #3, D5
00001552  13C5 00002527            565              MOVE.B  D5, EA_MODE
00001558  6000 0002                566              BRA     SUB_REG
0000155C                           567  
0000155C  2A06                     568  SUB_REG     MOVE.L  D6, D5
0000155E  CA7C 0007                569              AND.W   #%0000000000000111, D5
00001562                           570  
00001562  13C5 00002528            571              MOVE.B  D5, EA_REG
00001568  6000 0002                572              BRA     SUB_PROCESS
0000156C                           573  
0000156C  4EB9 000021EE            574  SUB_PROCESS JSR         DECODE_SRC_REG
00001572  4EB9 000022C2            575           JSR         DECODE_TWO_BIT_SIZE
00001578  4EB9 00001E80            576              JSR         DECODE_EA_MODE
0000157E  6000 0002                577               BRA         SUB_ARRANGE_OUTPUT                       * -- 2 bits for SIZ
00001582                           578              
00001582                           579              
00001582  16FC 0053                580  SUB_ARRANGE_OUTPUT            MOVE.B  #'S',(A3)+
00001586  16FC 0055                581              MOVE.B  #'U',(A3)+
0000158A  16FC 0042                582              MOVE.B  #'B',(A3)+
0000158E  23F9 00002536 0000257C   583              MOVE.L  SIZE_OUT, PRINT_BUFFER
00001598  13FC 0002 00002590       584              MOVE.B  #2, PRINT_SIZE
000015A0  4EB9 000024F8            585              JSR     PRINT_STUFF
000015A6                           586              
000015A6  0C39 0001 00002526       587              CMP.B   #1,DIRECTION
000015AE  6700 002C                588              BEQ     SUB_REG_FIRST
000015B2  4EB9 00002354            589              JSR     PRINT_EA_MODE
000015B8  16FC 002C                590              MOVE.B  #',',(A3)+
000015BC  16FC 0044                591              MOVE.B  #'D',(A3)+
000015C0  23F9 0000255A 0000257C   592              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
000015CA  13FC 0001 00002590       593              MOVE.B  #1, PRINT_SIZE
000015D2  4EB9 000024F8            594              JSR     PRINT_STUFF
000015D8  6000 FBF2                595              BRA     MAIN_LOOP_END
000015DC                           596            
000015DC                           597              
000015DC  16FC 0044                598  SUB_REG_FIRST   MOVE.B  #'D',(A3)+
000015E0  23F9 0000255A 0000257C   599              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
000015EA  13FC 0001 00002590       600              MOVE.B  #1, PRINT_SIZE
000015F2  4EB9 000024F8            601              JSR     PRINT_STUFF
000015F8  16FC 002C                602              MOVE.B  #',',(A3)+
000015FC  4EB9 00002354            603              JSR     PRINT_EA_MODE
00001602  6000 FBC8                604              BRA     MAIN_LOOP_END
00001606                           605              
00001606                           606  ***************************END SUB*******************       
00001606                           607   
00001606                           608  
00001606                           609  
00001606                           610  ************************************ START SUBA
00001606                           611  
00001606  6000 0002                612  DECODE_SUBA  BRA     SUBA_SRC_REG
0000160A                           613              
0000160A                           614              * -- chop the bits
0000160A                           615              * -- 1/ bits 6 SUBA 7
0000160A                           616  
0000160A  2A06                     617  SUBA_SRC_REG   MOVE.L  D6, D5
0000160C  CA7C 0E00                618              AND.W   #%0000111000000000, D5   
00001610  123C 0009                619             MOVE.B  #9, D1
00001614  E2AD                     620              LSR.L   D1, D5                
00001616  13C5 0000252A            621              MOVE.B  D5, SRC_REG
0000161C  6000 0002                622              BRA     SUBA_SIZE
00001620                           623  
00001620  2A06                     624  SUBA_SIZE   MOVE.L  D6, D5
00001622  CA7C 0100                625              AND.W   #%0000000100000000, D5   
00001626  E08D                     626              LSR.L   #8, D5                  * -- D5 contains the ss info
00001628  13C5 00002524            627              MOVE.B  D5, SIZE
0000162E  6000 0002                628              BRA     SUBA_MODE
00001632                           629  
00001632  2A06                     630  SUBA_MODE    MOVE.L  D6, D5
00001634  CA7C 0038                631              AND.W   #%0000000000111000, D5   * -- THis is the source!
00001638  E68D                     632              LSR.L   #3, D5
0000163A  13C5 00002527            633              MOVE.B  D5, EA_MODE
00001640  6000 0002                634              BRA     SUBA_REG
00001644                           635  
00001644  2A06                     636  SUBA_REG     MOVE.L  D6, D5
00001646  CA7C 0007                637              AND.W   #%0000000000000111, D5      * -- Source!
0000164A                           638  
0000164A  13C5 00002528            639              MOVE.B  D5, EA_REG
00001650  6000 0002                640              BRA     SUBA_PROCESS
00001654                           641  
00001654  4EB9 000021EE            642  SUBA_PROCESS JSR        DECODE_SRC_REG 
0000165A  4EB9 0000226C            643              JSR     DECODE_ONE_BIT_SIZE     * -- SUBA supports byte, word, SUBA long so it needs
00001660                           644                                              * -- 3 bits for SIZE
00001660  4EB9 00001E80            645              JSR     DECODE_EA_MODE
00001666  6000 0002                646              BRA     SUBA_ARRANGE_OUTPUT
0000166A                           647              
0000166A                           648              
0000166A  16FC 0053                649  SUBA_ARRANGE_OUTPUT            MOVE.B  #'S',(A3)+
0000166E  16FC 0055                650              MOVE.B  #'U',(A3)+
00001672  16FC 0042                651              MOVE.B  #'B',(A3)+
00001676  16FC 0041                652              MOVE.B  #'A',(A3)+
0000167A  23F9 00002536 0000257C   653              MOVE.L  SIZE_OUT, PRINT_BUFFER
00001684  13FC 0002 00002590       654              MOVE.B  #2, PRINT_SIZE
0000168C  4EB9 000024F8            655              JSR     PRINT_STUFF
00001692                           656  
00001692  4EB9 00002354            657              JSR     PRINT_EA_MODE
00001698  16FC 002C                658              MOVE.B  #',',(A3)+
0000169C  16FC 0041                659              MOVE.B  #'A',(A3)+
000016A0  23F9 0000255A 0000257C   660              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
000016AA  13FC 0001 00002590       661              MOVE.B  #1, PRINT_SIZE
000016B2  4EB9 000024F8            662              JSR     PRINT_STUFF
000016B8  6000 FB12                663              BRA     MAIN_LOOP_END
000016BC                           664  
000016BC                           665  
000016BC                           666  
000016BC                           667  ************************************* END SUBA
000016BC                           668  
000016BC                           669  
000016BC                           670  ***************************** START ADD 
000016BC                           671  
000016BC                           672  
000016BC  6000 0002                673  DECODE_ADD  BRA     ADD_SRC_REG
000016C0                           674              
000016C0                           675        
000016C0  2A06                     676  ADD_SRC_REG   MOVE.L  D6, D5
000016C2  CA7C 0E00                677              AND.W   #%0000111000000000, D5   
000016C6  123C 0009                678              MOVE.B  #9, D1
000016CA  E2AD                     679              LSR.L   D1, D5                 * -- D5 contains the ss info
000016CC  13C5 0000252A            680              MOVE.B  D5, SRC_REG               *THIS IS USED FOR THE Dn 
000016D2  6000 0002                681              BRA     ADD_DIR              *Dn CAN BE DESTINATION OR SOURCE
000016D6                           682  
000016D6  2A06                     683  ADD_DIR     MOVE.L  D6, D5
000016D8  CA7C 0100                684              AND.W   #%0000000100000000, D5   
000016DC  E08D                     685              LSR.L   #8, D5                  * -- D5 contains the ss info
000016DE  13C5 00002526            686              MOVE.B  D5, DIRECTION
000016E4  6000 0002                687              BRA     ADD_SIZE
000016E8                           688  
000016E8  2A06                     689  ADD_SIZE    MOVE.L  D6, D5
000016EA  CA7C 01C0                690              AND.W   #%0000000111000000, D5   
000016EE  EC8D                     691              LSR.L   #6, D5                  * -- D5 contains the ss info
000016F0  13C5 00002524            692              MOVE.B  D5, SIZE
000016F6  6000 0002                693              BRA     ADD_MODE
000016FA                           694  
000016FA  2A06                     695  ADD_MODE    MOVE.L  D6, D5
000016FC  CA7C 0038                696              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
00001700  E68D                     697              LSR.L   #3, D5
00001702  13C5 00002527            698              MOVE.B  D5, EA_MODE
00001708  6000 0002                699              BRA     ADD_REG
0000170C                           700  
0000170C  2A06                     701  ADD_REG     MOVE.L  D6, D5
0000170E  CA7C 0007                702              AND.W   #%0000000000000111, D5
00001712                           703     
00001712  13C5 00002528            704              MOVE.B  D5, EA_REG
00001718  6000 0002                705              BRA     ADD_PROCESS
0000171C                           706  
0000171C  4EB9 000021EE            707  ADD_PROCESS JSR     DECODE_SRC_REG
00001722  4EB9 000022C2            708              JSR     DECODE_TWO_BIT_SIZE     * -- ADD supports byte, word, and long so it needs
00001728                           709                                              * -- 2 bits for SIZE
00001728  4EB9 00001E80            710              JSR     DECODE_EA_MODE
0000172E  6000 0002                711              BRA     ADD_ARRANGE_OUTPUT
00001732                           712              
00001732                           713              
00001732                           714                          
00001732  16FC 0041                715  ADD_ARRANGE_OUTPUT  MOVE.B  #'A',(A3)+
00001736  16FC 0044                716              MOVE.B  #'D',(A3)+
0000173A  16FC 0044                717              MOVE.B  #'D',(A3)+
0000173E  23F9 00002536 0000257C   718              MOVE.L  SIZE_OUT, PRINT_BUFFER
00001748  13FC 0002 00002590       719              MOVE.B  #2, PRINT_SIZE
00001750  4EB9 000024F8            720              JSR     PRINT_STUFF
00001756                           721              
00001756  0C39 0000 00002526       722              CMP.B   #0,DIRECTION
0000175E  6600 002C                723              BNE     ADD_REG_FIRST
00001762  4EB9 00002354            724              JSR     PRINT_EA_MODE
00001768  16FC 002C                725              MOVE.B  #',',(A3)+
0000176C  16FC 0044                726              MOVE.B  #'D',(A3)+
00001770  23F9 0000255A 0000257C   727              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
0000177A  13FC 0001 00002590       728              MOVE.B  #1, PRINT_SIZE
00001782  4EB9 000024F8            729              JSR     PRINT_STUFF
00001788  6000 FA42                730              BRA     MAIN_LOOP_END
0000178C                           731              
0000178C  16FC 0044                732  ADD_REG_FIRST   MOVE.B  #'D',(A3)+
00001790  23F9 0000255A 0000257C   733              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
0000179A  13FC 0001 00002590       734              MOVE.B  #1, PRINT_SIZE
000017A2  4EB9 000024F8            735              JSR     PRINT_STUFF
000017A8  16FC 002C                736              MOVE.B  #',',(A3)+
000017AC  4EB9 00002354            737              JSR     PRINT_EA_MODE
000017B2  6000 FA18                738              BRA     MAIN_LOOP_END
000017B6                           739  
000017B6                           740  
000017B6                           741  
000017B6                           742  ****************************** END ADD
000017B6                           743  
000017B6                           744  ********************************* START ADDA
000017B6                           745  
000017B6  6000 0002                746  DECODE_ADDA  BRA     ADDA_SRC_REG
000017BA                           747              
000017BA                           748              * -- chop the bits
000017BA                           749              * -- 1/ bits 6 and 7
000017BA  2A06                     750  ADDA_SRC_REG   MOVE.L  D6, D5
000017BC  CA7C 0E00                751              AND.W   #%0000111000000000, D5   
000017C0  123C 0009                752              MOVE.B  #9, D1
000017C4  E2AD                     753              LSR.L   D1, D5                  * -- D5 contains the ss info
000017C6  13C5 0000252A            754              MOVE.B  D5, SRC_REG               *THIS IS USED FOR THE Dn 
000017CC  6000 0002                755              BRA     ADDA_SIZE              *Dn CAN BE DESTINATION OR SOURCE
000017D0                           756  
000017D0  2A06                     757  ADDA_SIZE   MOVE.L  D6, D5
000017D2  CA7C 0100                758              AND.W   #%0000000100000000, D5   
000017D6  E08D                     759              LSR.L   #8, D5                  * -- D5 contains the ss info
000017D8  13C5 00002524            760              MOVE.B  D5, SIZE
000017DE  6000 0002                761              BRA     ADDA_MODE            
000017E2                           762  
000017E2  2A06                     763  ADDA_MODE    MOVE.L  D6, D5
000017E4  CA7C 0038                764              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
000017E8  E68D                     765              LSR.L   #3, D5
000017EA  13C5 00002527            766              MOVE.B  D5, EA_MODE
000017F0  6000 0002                767              BRA     ADDA_REG
000017F4                           768  
000017F4  2A06                     769  ADDA_REG     MOVE.L  D6, D5
000017F6  CA7C 0007                770              AND.W   #%0000000000000111, D5
000017FA                           771   
000017FA  13C5 00002528            772              MOVE.B  D5, EA_REG
00001800  6000 0002                773              BRA     ADDA_PROCESS
00001804                           774  
00001804  4EB9 000021EE            775  ADDA_PROCESS JSR    DECODE_SRC_REG 
0000180A  4EB9 0000226C            776              JSR     DECODE_ONE_BIT_SIZE     * -- ADDA supports byte, word, and long so it needs
00001810                           777                                              * -- 2 bits for SIZE
00001810  4EB9 00001E80            778              JSR     DECODE_EA_MODE
00001816  6000 0002                779              BRA     ADDA_ARRANGE_OUTPUT
0000181A                           780              
0000181A                           781              
0000181A  16FC 0041                782  ADDA_ARRANGE_OUTPUT            MOVE.B  #'A',(A3)+
0000181E  16FC 0044                783              MOVE.B  #'D',(A3)+
00001822  16FC 0044                784              MOVE.B  #'D',(A3)+
00001826  16FC 0041                785              MOVE.B  #'A',(A3)+
0000182A  23F9 00002536 0000257C   786              MOVE.L  SIZE_OUT, PRINT_BUFFER
00001834  13FC 0002 00002590       787              MOVE.B  #2, PRINT_SIZE
0000183C  4EB9 000024F8            788              JSR     PRINT_STUFF
00001842  4EB9 00002354            789              JSR     PRINT_EA_MODE
00001848  16FC 002C                790              MOVE.B  #',',(A3)+
0000184C  16FC 0041                791              MOVE.B  #'A',(A3)+
00001850  23F9 0000255A 0000257C   792              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
0000185A  13FC 0001 00002590       793              MOVE.B  #1, PRINT_SIZE
00001862  4EB9 000024F8            794              JSR     PRINT_STUFF
00001868  6000 F962                795              BRA     MAIN_LOOP_END
0000186C                           796              
0000186C                           797              
0000186C                           798  ************************** END ADDA
0000186C                           799  
0000186C                           800  
0000186C                           801  ************************** START AND
0000186C                           802  
0000186C  6000 0002                803  DECODE_AND  BRA     AND_SRC_REG
00001870                           804              
00001870                           805              * -- chop the bits
00001870                           806              * -- 1/ bits 6 and 7
00001870                           807  
00001870  2A06                     808  AND_SRC_REG   MOVE.L  D6, D5
00001872  CA7C 0E00                809              AND.W   #%0000111000000000, D5   
00001876  123C 0009                810               MOVE.B  #9, D1
0000187A  E2AD                     811              LSR.L   D1, D5                * -- D5 contains the ss info
0000187C  13C5 0000252A            812              MOVE.B  D5, SRC_REG
00001882  6000 0014                813              BRA     AND_SIZE
00001886                           814  
00001886  2A06                     815  AND_DIR     MOVE.L  D6, D5
00001888  CA7C 0100                816              AND.W   #%0000000100000000, D5   
0000188C  E08D                     817              LSR.L   #8, D5                  * -- D5 contains the ss info
0000188E  13C5 00002526            818              MOVE.B  D5, DIRECTION
00001894  6000 0014                819              BRA     AND_MODE
00001898                           820  
00001898  2A06                     821  AND_SIZE   MOVE.L  D6, D5
0000189A  CA7C 00C0                822              AND.W   #%0000000011000000, D5   
0000189E  EC8D                     823              LSR.L   #6, D5                  * -- D5 contains the ss info
000018A0  13C5 00002524            824              MOVE.B  D5, SIZE
000018A6  6000 0002                825              BRA     AND_MODE
000018AA                           826  
000018AA  2A06                     827  AND_MODE    MOVE.L  D6, D5
000018AC  CA7C 0038                828              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
000018B0  E68D                     829              LSR.L   #3, D5
000018B2  13C5 00002527            830              MOVE.B  D5, EA_MODE
000018B8  6000 0002                831              BRA     AND_REG
000018BC                           832  
000018BC  2A06                     833  AND_REG     MOVE.L  D6, D5
000018BE  CA7C 0007                834              AND.W   #%0000000000000111, D5
000018C2                           835    
000018C2  13C5 00002528            836              MOVE.B  D5, EA_REG
000018C8  6000 0002                837              BRA     AND_PROCESS
000018CC                           838  
000018CC  4EB9 000021EE            839  AND_PROCESS JSR         DECODE_SRC_REG
000018D2  4EB9 000022C2            840           JSR         DECODE_TWO_BIT_SIZE
000018D8  4EB9 00001E80            841              JSR         DECODE_EA_MODE
000018DE  6000 0002                842               BRA         AND_ARRANGE_OUTPUT
000018E2                           843              
000018E2                           844              
000018E2  16FC 0041                845  AND_ARRANGE_OUTPUT            MOVE.B  #'A',(A3)+
000018E6  16FC 004E                846              MOVE.B  #'N',(A3)+
000018EA  16FC 0044                847              MOVE.B  #'D',(A3)+
000018EE  23F9 00002536 0000257C   848              MOVE.L  SIZE_OUT, PRINT_BUFFER
000018F8  13FC 0002 00002590       849              MOVE.B  #2, PRINT_SIZE
00001900  4EB9 000024F8            850              JSR     PRINT_STUFF
00001906                           851              
00001906  0C39 0000 00002526       852              CMP.B   #0,DIRECTION
0000190E  6600 002C                853              BNE     AND_REG_FIRST
00001912  4EB9 00002354            854              JSR     PRINT_EA_MODE
00001918  16FC 002C                855              MOVE.B  #',',(A3)+
0000191C  16FC 0044                856              MOVE.B  #'D',(A3)+
00001920  23F9 0000255A 0000257C   857              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
0000192A  13FC 0001 00002590       858              MOVE.B  #1, PRINT_SIZE
00001932  4EB9 000024F8            859              JSR     PRINT_STUFF
00001938  6000 F892                860              BRA     MAIN_LOOP_END
0000193C                           861                     
0000193C  16FC 0044                862  AND_REG_FIRST   MOVE.B  #'D',(A3)+
00001940  23F9 0000255A 0000257C   863              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
0000194A  13FC 0001 00002590       864              MOVE.B  #1, PRINT_SIZE
00001952  4EB9 000024F8            865              JSR     PRINT_STUFF
00001958  16FC 002C                866              MOVE.B  #',',(A3)+
0000195C  4EB9 00002354            867              JSR     PRINT_EA_MODE
00001962  6000 F868                868              BRA     MAIN_LOOP_END
00001966                           869              
00001966                           870  *************************************** END AND
00001966                           871  
00001966                           872  *********************************** START MULS
00001966                           873  
00001966                           874  
00001966                           875  * ------------- SUPPORT ONLY WORD-SIZED DATA
00001966  6000 0002                876  DECODE_MULS  BRA     MULS_SRC_REG
0000196A                           877              
0000196A                           878              
0000196A  2A06                     879  MULS_SRC_REG   MOVE.L  D6, D5
0000196C  CA7C 0E00                880              AND.W   #%0000111000000000, D5   
00001970  123C 0009                881              MOVE.B  #9, D1
00001974  E2AD                     882              LSR.L   D1, D5                 * -- D5 contains the ss info
00001976  13C5 0000252A            883              MOVE.B  D5, SRC_REG
0000197C  6000 0002                884              BRA     MULS_MODE
00001980                           885  
00001980  2A06                     886  MULS_MODE    MOVE.L  D6, D5
00001982  CA7C 0038                887              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
00001986  E68D                     888              LSR.L   #3, D5
00001988  13C5 00002527            889              MOVE.B  D5, EA_MODE
0000198E  6000 0002                890              BRA     MULS_REG
00001992                           891  
00001992  2A06                     892  MULS_REG     MOVE.L  D6, D5
00001994  CA7C 0007                893              AND.W   #%0000000000000111, D5
00001998                           894         
00001998  13C5 00002528            895              MOVE.B  D5, EA_REG
0000199E  6000 0002                896              BRA     MULS_PROCESS
000019A2                           897  
000019A2  4EB9 000021EE            898  MULS_PROCESS JSR        DECODE_SRC_REG
000019A8  4EB9 00001E80            899              JSR         DECODE_EA_MODE
000019AE                           900  
000019AE  6000 0002                901              BRA   MULS_ARRANGE_OUTPUT
000019B2                           902  
000019B2                           903  
000019B2  16FC 004D                904  MULS_ARRANGE_OUTPUT            MOVE.B  #'M',(A3)+
000019B6  16FC 0055                905              MOVE.B  #'U',(A3)+
000019BA  16FC 004C                906              MOVE.B  #'L',(A3)+
000019BE  16FC 0053                907              MOVE.B  #'S',(A3)+
000019C2  16FC 002E                908              MOVE.B  #'.',(A3)+
000019C6  16FC 0057                909              MOVE.B  #'W',(A3)+
000019CA  4EB9 00002354            910              JSR     PRINT_EA_MODE
000019D0  16FC 002C                911              MOVE.B  #',',(A3)+
000019D4  16FC 0044                912              MOVE.B  #'D',(A3)+
000019D8  23F9 0000255A 0000257C   913              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
000019E2  13FC 0001 00002590       914              MOVE.B  #1, PRINT_SIZE
000019EA  4EB9 000024F8            915              JSR     PRINT_STUFF
000019F0  6000 F7DA                916              BRA     MAIN_LOOP_END
000019F4                           917  
000019F4                           918  ******************************************* END MULS
000019F4                           919  
000019F4                           920  *************************************** START NOT
000019F4                           921  
000019F4  6000 0002                922  DECODE_NOT  BRA     NOT_SIZE
000019F8                           923              
000019F8                           924              * -- chop the bits
000019F8                           925              * -- 1/ bits 6 and 7
000019F8  2A06                     926  NOT_SIZE    MOVE.L  D6, D5
000019FA  CA7C 00C0                927              AND.W   #%0000000011000000, D5   
000019FE  EC8D                     928              LSR.L   #6, D5                  * -- D5 contains the ss info
00001A00  13C5 00002524            929              MOVE.B  D5, SIZE
00001A06  6000 0002                930              BRA     NOT_MODE
00001A0A                           931  
00001A0A  2A06                     932  NOT_MODE    MOVE.L  D6, D5
00001A0C  CA7C 0038                933              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
00001A10  E68D                     934              LSR.L   #3, D5
00001A12  13C5 00002527            935              MOVE.B  D5, EA_MODE
00001A18  6000 0002                936              BRA     NOT_REG
00001A1C                           937  
00001A1C  2A06                     938  NOT_REG     MOVE.L  D6, D5
00001A1E  CA7C 0007                939              AND.W   #%0000000000000111, D5
00001A22                           940  
00001A22  13C5 00002528            941              MOVE.B  D5, EA_REG
00001A28  6000 0002                942              BRA     NOT_PROCESS
00001A2C                           943  
00001A2C  4EB9 000022C2            944  NOT_PROCESS JSR     DECODE_TWO_BIT_SIZE     * -- NOT supports byte, word, and long so it needs
00001A32                           945                                              * -- 2 bits for SIZE
00001A32  4EB9 00001E80            946              JSR     DECODE_EA_MODE
00001A38  6000 0002                947              BRA     NOT_ARRANGE_OUTPUT 
00001A3C                           948              
00001A3C                           949              
00001A3C                           950  NOT_ARRANGE_OUTPUT                        
00001A3C  16FC 004E                951              MOVE.B  #'N',(A3)+
00001A40  16FC 004F                952              MOVE.B  #'O',(A3)+
00001A44  16FC 0054                953              MOVE.B  #'T',(A3)+
00001A48  23F9 00002536 0000257C   954              MOVE.L  SIZE_OUT, PRINT_BUFFER
00001A52  13FC 0002 00002590       955              MOVE.B  #2, PRINT_SIZE
00001A5A  4EB9 000024F8            956              JSR     PRINT_STUFF
00001A60  4EB9 00002354            957              JSR     PRINT_EA_MODE
00001A66  6000 F764                958              BRA     MAIN_LOOP_END
00001A6A                           959  
00001A6A                           960  **************************************** END NOT
00001A6A                           961  
00001A6A                           962  **************************************** START NEG
00001A6A                           963  
00001A6A  6000 0002                964  DECODE_NEG  BRA     NEG_SIZE
00001A6E                           965              
00001A6E                           966              * -- chop the bits
00001A6E                           967              * -- 1/ bits 6 and 7
00001A6E  2A06                     968  NEG_SIZE   MOVE.L  D6, D5
00001A70  CA7C 00C0                969              AND.W   #%0000000011000000, D5   
00001A74  EC8D                     970              LSR.L   #6, D5                  * -- D5 contains the ss info
00001A76  13C5 00002524            971              MOVE.B  D5, SIZE
00001A7C  6000 0002                972              BRA     NEG_MODE
00001A80                           973  
00001A80  2A06                     974  NEG_MODE    MOVE.L  D6, D5
00001A82  CA7C 0038                975              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
00001A86  E68D                     976              LSR.L   #3, D5
00001A88  13C5 00002527            977              MOVE.B  D5, EA_MODE
00001A8E  6000 0002                978              BRA     NEG_REG
00001A92                           979  
00001A92  2A06                     980  NEG_REG     MOVE.L  D6, D5
00001A94  CA7C 0007                981              AND.W   #%0000000000000111, D5
00001A98                           982  
00001A98  13C5 00002528            983              MOVE.B  D5, EA_REG
00001A9E  6000 0002                984              BRA     NEG_PROCESS
00001AA2                           985  
00001AA2  4EB9 000022C2            986  NEG_PROCESS JSR     DECODE_TWO_BIT_SIZE     * -- NEG supports byte, word, and long so it needs
00001AA8                           987                                              * -- 2 bits for SIZE
00001AA8  4EB9 00001E80            988              JSR     DECODE_EA_MODE
00001AAE  6000 0002                989              BRA     NEG_ARRANGE_OUTPUT
00001AB2                           990              
00001AB2                           991              
00001AB2                           992                          
00001AB2  16FC 004E                993  NEG_ARRANGE_OUTPUT  MOVE.B  #'N',(A3)+
00001AB6  16FC 0045                994              MOVE.B  #'E',(A3)+
00001ABA  16FC 0047                995              MOVE.B  #'G',(A3)+
00001ABE  23F9 00002536 0000257C   996              MOVE.L  SIZE_OUT, PRINT_BUFFER
00001AC8  13FC 0002 00002590       997              MOVE.B  #2, PRINT_SIZE
00001AD0  4EB9 000024F8            998              JSR     PRINT_STUFF
00001AD6  4EB9 00002354            999              JSR     PRINT_EA_MODE
00001ADC  6000 F6EE               1000              BRA     MAIN_LOOP_END
00001AE0                          1001  
00001AE0                          1002  **************************************** END NEG
00001AE0                          1003  
00001AE0                          1004  *************************************** START RTS
00001AE0                          1005  
00001AE0  16FC 0052               1006  DECODE_RTS  MOVE.B  #'R', (A3)+
00001AE4  16FC 0054               1007              MOVE.B  #'T', (A3)+
00001AE8  16FC 0053               1008              MOVE.B  #'S', (A3)+
00001AEC  6000 F6DE               1009              BRA     MAIN_LOOP_END
00001AF0                          1010  
00001AF0                          1011  *************************************** END RTS
00001AF0                          1012  
00001AF0                          1013  ************************************** START JSR
00001AF0                          1014  
00001AF0  6000 0002               1015  DECODE_JSR  BRA     JSR_MODE
00001AF4                          1016              
00001AF4                          1017              * -- chop the bits
00001AF4                          1018              * -- 1/ bits 6 and 7
00001AF4                          1019  
00001AF4  2A06                    1020  JSR_MODE    MOVE.L  D6, D5
00001AF6  CA7C 0038               1021              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
00001AFA  E68D                    1022              LSR.L   #3, D5
00001AFC  13C5 00002527           1023              MOVE.B  D5, EA_MODE     *DESTINATION
00001B02  6000 0002               1024              BRA     JSR_REG
00001B06                          1025  
00001B06  2A06                    1026  JSR_REG     MOVE.L  D6, D5
00001B08  CA7C 0007               1027              AND.W   #%0000000000000111, D5
00001B0C                          1028                 
00001B0C  13C5 00002528           1029              MOVE.B  D5, EA_REG       *DESTINATION
00001B12  6000 0002               1030              BRA     JSR_PROCESS
00001B16                          1031  
00001B16  4EB9 00001E80           1032  JSR_PROCESS JSR      DECODE_EA_MODE
00001B1C  6000 0002               1033              BRA      JSR_ARRANGE_OUTPUT
00001B20                          1034  
00001B20                          1035  
00001B20  16FC 004A               1036  JSR_ARRANGE_OUTPUT            MOVE.B  #'J',(A3)+
00001B24  16FC 0053               1037              MOVE.B  #'S',(A3)+
00001B28  16FC 0052               1038              MOVE.B  #'R',(A3)+
00001B2C  16FC 0020               1039              MOVE.B  #' ',(A3)+
00001B30  4EB9 00002354           1040              JSR     PRINT_EA_MODE
00001B36  6000 F694               1041              BRA     MAIN_LOOP_END
00001B3A                          1042  
00001B3A                          1043  ************************************** END JSR
00001B3A                          1044  
00001B3A                          1045  ************************************* START BRA
00001B3A                          1046  
00001B3A  6000 0002               1047  DECODE_BRA  BRA     BRA_DISPLACEMENT
00001B3E                          1048              
00001B3E                          1049             
00001B3E  2A06                    1050  BRA_DISPLACEMENT    MOVE.L  D6, D5
00001B40  CA7C 00FF               1051              AND.W   #%0000000011111111, D5   
00001B44                          1052  
00001B44  33C5 00002530           1053              MOVE.W  D5, DISPLACEMENT
00001B4A  6000 0002               1054              BRA     BRA_PROCESS
00001B4E                          1055  
00001B4E  4EB9 0000222A           1056  BRA_PROCESS JSR     DECODE_DISPLACEMENT 
00001B54  6000 0002               1057              BRA     BRA_ARRANGE_OUTPUT
00001B58                          1058              
00001B58  16FC 0042               1059  BRA_ARRANGE_OUTPUT            MOVE.B  #'B',(A3)+
00001B5C  16FC 0052               1060              MOVE.B  #'R',(A3)+
00001B60  16FC 0041               1061              MOVE.B  #'A',(A3)+
00001B64  16FC 0020               1062              MOVE.B  #' ',(A3)+
00001B68  16FC 0024               1063              MOVE.B  #'$',(A3)+
00001B6C                          1064  
00001B6C  23F9 00002578 0000257C  1065              MOVE.L  DISPLACEMENT_OUT, PRINT_BUFFER
00001B76  0C39 0000 00002534      1066              CMP.B   #%00, PERSONAL_SIZE_CONVENTION
00001B7E  6700 000E               1067              BEQ     BRA_8_BITS
00001B82  13FC 0010 00002590      1068              MOVE.B  #16, PRINT_SIZE
00001B8A  6000 000A               1069              BRA     PRINT_BRA
00001B8E  13FC 0008 00002590      1070  BRA_8_BITS  MOVE.B  #8, PRINT_SIZE
00001B96  4EB9 000024F8           1071  PRINT_BRA   JSR     PRINT_STUFF
00001B9C  6000 F62E               1072              BRA     MAIN_LOOP_END
00001BA0                          1073              
00001BA0                          1074  
00001BA0                          1075  **************************************** END BRA
00001BA0                          1076  
00001BA0                          1077  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; START Bcc
00001BA0                          1078  
00001BA0  6000 0002               1079  DECODE_Bcc  BRA     Bcc_CONDITION
00001BA4                          1080              
00001BA4                          1081              
00001BA4  2A06                    1082  Bcc_CONDITION   MOVE.L  D6, D5
00001BA6  CABC 00000F00           1083              AND.L   #%0000111100000000, D5   
00001BAC  E08D                    1084              LSR.L   #8, D5
00001BAE  13C5 00002532           1085              MOVE.B  D5, CONDITION
00001BB4  6000 0002               1086              BRA     Bcc_DISPLACEMENT
00001BB8                          1087  
00001BB8  2A06                    1088  Bcc_DISPLACEMENT    MOVE.L  D6, D5
00001BBA  CABC 000000FF           1089              AND.L   #%0000000011111111, D5   
00001BC0  33C5 00002530           1090              MOVE.W  D5, DISPLACEMENT
00001BC6  6000 0002               1091              BRA     Bcc_PROCESS
00001BCA                          1092  
00001BCA  4EB9 0000222A           1093  Bcc_PROCESS JSR     DECODE_DISPLACEMENT
00001BD0  6000 0002               1094              BRA     Bcc_ARRANGE_OUTPUT
00001BD4                          1095              
00001BD4                          1096                          
00001BD4  16FC 0042               1097  Bcc_ARRANGE_OUTPUT  MOVE.B  #'B',(A3)+
00001BD8  4EB9 00001C1A           1098              JSR     DECODE_CONDITION
00001BDE  16FC 0020               1099              MOVE.B  #' ', (A3)+
00001BE2  16FC 0024               1100              MOVE.B  #'$', (A3)+
00001BE6                          1101  
00001BE6  23F9 00002578 0000257C  1102              MOVE.L  DISPLACEMENT_OUT, PRINT_BUFFER
00001BF0  0C39 0000 00002534      1103              CMP.B   #%00, PERSONAL_SIZE_CONVENTION
00001BF8  6700 000E               1104              BEQ     Bcc_8_BITS
00001BFC  13FC 0010 00002590      1105              MOVE.B  #16, PRINT_SIZE
00001C04  6000 000A               1106              BRA     PRINT_Bcc
00001C08  13FC 0008 00002590      1107  Bcc_8_BITS  MOVE.B  #8, PRINT_SIZE
00001C10  4EB9 000024F8           1108  PRINT_Bcc   JSR     PRINT_STUFF
00001C16  6000 F5B4               1109              BRA     MAIN_LOOP_END
00001C1A                          1110  
00001C1A                          1111  * -- mini subroutine
00001C1A  48E7 0400               1112  DECODE_CONDITION  MOVEM.L     D5, -(sp)
00001C1E  1A39 00002532           1113                    MOVE.B      CONDITION, D5  
00001C24  0C39 0007 00002532      1114                    CMP.B       #%0111, CONDITION
00001C2C  6700 0032               1115                    BEQ         Bcc_EQ
00001C30  0C39 0006 00002532      1116                    CMP.B       #%0110, CONDITION
00001C38  6700 0032               1117                    BEQ         Bcc_NE
00001C3C  0C39 000D 00002532      1118                    CMP.B       #%1101, CONDITION
00001C44  6700 0032               1119                    BEQ         Bcc_LT
00001C48  0C39 0002 00002532      1120                    CMP.B       #%0010, CONDITION
00001C50  6700 0032               1121                    BEQ         Bcc_HI
00001C54  6000 0002               1122                    BRA         Bcc_INVALID
00001C58                          1123  
00001C58  16FC 003F               1124  Bcc_INVALID       MOVE.B      #'?', (A3)+
00001C5C  16FC 003F               1125                    MOVE.B      #'?', (A3)+
00001C60  16FC 0045               1126  Bcc_EQ            MOVE.B      #'E', (A3)+
00001C64  16FC 0051               1127                    MOVE.B      #'Q', (A3)+
00001C68  6000 0026               1128                    BRA         Bcc_DONE
00001C6C  16FC 004E               1129  Bcc_NE            MOVE.B      #'N', (A3)+
00001C70  16FC 0045               1130                    MOVE.B      #'E', (A3)+
00001C74  6000 001A               1131                    BRA         Bcc_DONE
00001C78  16FC 004C               1132  Bcc_LT            MOVE.B      #'L', (A3)+
00001C7C  16FC 0054               1133                    MOVE.B      #'T', (A3)+
00001C80  6000 000E               1134                    BRA         Bcc_DONE
00001C84  16FC 0048               1135  Bcc_HI            MOVE.B      #'H', (A3)+
00001C88  16FC 0049               1136                    MOVE.B      #'I', (A3)+
00001C8C  6000 0002               1137                    BRA         Bcc_DONE
00001C90  4CDF 0020               1138  Bcc_DONE          MOVEM.L     (sp)+, D5
00001C94  4E75                    1139                    RTS
00001C96                          1140  
00001C96                          1141  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END Bcc
00001C96                          1142  
00001C96                          1143  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1144  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1145  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1146  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1147  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1148  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1149  * ----------------------------------------------- END EFFECTIVE ADDRESS ------------------------------------------------------------
00001C96                          1150  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1151  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1152  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1153  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1154  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1155  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1156  
00001C96                          1157  
00001C96                          1158  
00001C96                          1159  
00001C96                          1160  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1161  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1162  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1163  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1164  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1165  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1166  * --------------------------------------------------- OUTPUT PROCESSING ------------------------------------------------------------
00001C96                          1167  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1168  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1169  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1170  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1171  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1172  * ----------------------------------------------------------------------------------------------------------------------------------
00001C96                          1173  
00001C96                          1174  
00001C96                          1175  * -- pre-conditions: Address SIZE loaded with correct input
00001C96                          1176  
00001C96                          1177  * -- Purpose: Decode a typical 2-bit SIZE field (byte, word, long)
00001C96                          1178  
00001C96                          1179  * -- 1. process data
00001C96  48E7 0C04               1180  DECODE_WEIRD_SIZE  MOVEM.L     D4-D5/A5, -(sp)
00001C9A  2A7C 0000253A           1181                  MOVEA.L     #WEIRD_SIZE_OUT, A5
00001CA0  1A39 00002525           1182                  MOVE.B      WEIRD_SIZE, D5
00001CA6                          1183                  
00001CA6  BA3C 0001               1184                  CMP.B       #%01, D5
00001CAA  6700 0020               1185                  BEQ         WEIRD_SIZE_BYTE
00001CAE  BA3C 0003               1186                  CMP.B       #%11, D5
00001CB2  6700 002A               1187                  BEQ         WEIRD_SIZE_WORD
00001CB6  BA3C 0002               1188                  CMP.B       #%10, D5
00001CBA  6700 0034               1189                  BEQ         WEIRD_SIZE_LONG
00001CBE  6000 0002               1190                  BRA         WEIRD_SIZE_INVALID
00001CC2                          1191                  
00001CC2                          1192  * -- 2. Respond to data
00001CC2                          1193  
00001CC2  6000 0002               1194  WEIRD_SIZE_INVALID     BRA     DECODE_WEIRD_SIZE_DONE
00001CC6                          1195  
00001CC6  4CDF 2030               1196  DECODE_WEIRD_SIZE_DONE    MOVEM.L (sp)+, D4-D5/A5
00001CCA  4E75                    1197                      RTS
00001CCC                          1198  
00001CCC  1AFC 002E               1199  WEIRD_SIZE_BYTE        MOVE.B      #'.', (A5)+
00001CD0  1AFC 0042               1200                      MOVE.B      #'B', (A5)+
00001CD4  13FC 0000 00002534      1201                      MOVE.B      #0, PERSONAL_SIZE_CONVENTION
00001CDC  60E8                    1202                      BRA         DECODE_WEIRD_SIZE_DONE
00001CDE                          1203  
00001CDE  1AFC 002E               1204  WEIRD_SIZE_WORD        MOVE.B      #'.', (A5)+
00001CE2  1AFC 0057               1205                      MOVE.B      #'W', (A5)+
00001CE6  13FC 0001 00002534      1206                      MOVE.B      #1, PERSONAL_SIZE_CONVENTION
00001CEE  60D6                    1207                      BRA         DECODE_WEIRD_SIZE_DONE
00001CF0                          1208  
00001CF0  1AFC 002E               1209  WEIRD_SIZE_LONG        MOVE.B      #'.', (A5)+
00001CF4  1AFC 004C               1210                      MOVE.B      #'L', (A5)+
00001CF8  13FC 0002 00002534      1211                      MOVE.B      #2, PERSONAL_SIZE_CONVENTION
00001D00  60C4                    1212                      BRA         DECODE_WEIRD_SIZE_DONE
00001D02                          1213  
00001D02                          1214  * -------------------------------------------------------
00001D02                          1215  
00001D02                          1216  
00001D02                          1217  * -- pre-conditions: Address DEST_MODE loaded with correct input
00001D02                          1218  * --                 Address DEST_REG  loaded with correct input
00001D02                          1219  * --                 If mode is Immediate Data, need data size
00001D02                          1220  * --                 stored in PERSONAL_SIZE_CONVENTION (0 = byte, 1 = word, anything else = long)
00001D02                          1221  
00001D02                          1222  * -- Purpose: Decode a typical deSt_mode (Data register, Address register, etc.)
00001D02                          1223  
00001D02                          1224  * -- 1. process data
00001D02  48E7 0C04               1225  DECODE_DEST_MODE  MOVEM.L     D4-D5/A5, -(sp)
00001D06  2A7C 0000255C           1226                  MOVEA.L     #DEST_MODE_OUT, A5
00001D0C  1A39 0000252B           1227                  MOVE.B      DEST_MODE, D5
00001D12                          1228                  
00001D12  BA3C 0000               1229                  CMP.B       #%000, D5
00001D16  6700 0038               1230                  BEQ         DEST_MODE_DREG
00001D1A  BA3C 0001               1231                  CMP.B       #%001, D5
00001D1E  6700 003C               1232                  BEQ         DEST_MODE_AREG_DIR
00001D22  BA3C 0002               1233                  CMP.B       #%010, D5
00001D26  6700 0040               1234                  BEQ         DEST_MODE_AREG_INDIR
00001D2A  BA3C 0003               1235                  CMP.B       #%011, D5
00001D2E  6700 004C               1236                  BEQ         DEST_MODE_AREG_INDIR_INC
00001D32  BA3C 0004               1237                  CMP.B       #%100, D5
00001D36  6700 005C               1238                  BEQ         DEST_MODE_AREG_INDIR_DEC
00001D3A  BA3C 0007               1239                  CMP.B       #%111, D5
00001D3E  6700 006C               1240                  BEQ         DEST_MODE_SPECIAL
00001D42  6000 0002               1241                  BRA         DEST_MODE_INVALID
00001D46                          1242                  
00001D46                          1243  * -- 2. Respond to data
00001D46                          1244  
00001D46  6000 0002               1245  DEST_MODE_INVALID     BRA     DECODE_DEST_DONE
00001D4A                          1246  
00001D4A  4CDF 2030               1247  DECODE_DEST_DONE      MOVEM.L (sp)+, D4-D5/A5
00001D4E  4E75                    1248                      RTS
00001D50                          1249  
00001D50  1AFC 0044               1250  DEST_MODE_DREG        MOVE.B      #'D', (A5)+
00001D54  4EB9 00002034           1251                      JSR         DECODE_DEST_REG
00001D5A  60EE                    1252                      BRA         DECODE_DEST_DONE
00001D5C                          1253  
00001D5C  1AFC 0041               1254  DEST_MODE_AREG_DIR    MOVE.B      #'A', (A5)+
00001D60  4EB9 00002034           1255                      JSR         DECODE_DEST_REG
00001D66  60E2                    1256                      BRA         DECODE_DEST_DONE
00001D68                          1257  
00001D68  1AFC 0028               1258  DEST_MODE_AREG_INDIR  MOVE.B      #'(', (A5)+
00001D6C  1AFC 0041               1259                      MOVE.B      #'A', (A5)+
00001D70  4EB9 00002034           1260                      JSR         DECODE_DEST_REG
00001D76  1AFC 0029               1261                      MOVE.B      #')', (A5)+
00001D7A  60CE                    1262                      BRA         DECODE_DEST_DONE
00001D7C                          1263  
00001D7C  1AFC 0028               1264  DEST_MODE_AREG_INDIR_INC  MOVE.B      #'(', (A5)+
00001D80  1AFC 0041               1265                          MOVE.B      #'A', (A5)+
00001D84  4EB9 00002034           1266                          JSR         DECODE_DEST_REG
00001D8A  1AFC 0029               1267                          MOVE.B      #')', (A5)+
00001D8E  1AFC 002B               1268                          MOVE.B      #'+', (A5)+
00001D92  60B6                    1269                          BRA         DECODE_DEST_DONE
00001D94                          1270  
00001D94  1AFC 002D               1271  DEST_MODE_AREG_INDIR_DEC  MOVE.B      #'-', (A5)+
00001D98  1AFC 0028               1272                          MOVE.B      #'(', (A5)+
00001D9C  1AFC 0041               1273                          MOVE.B      #'A', (A5)+
00001DA0  4EB9 00002034           1274                          JSR         DECODE_DEST_REG
00001DA6  1AFC 0029               1275                          MOVE.B      #')', (A5)+
00001DAA  609E                    1276                          BRA         DECODE_DEST_DONE
00001DAC                          1277  
00001DAC                          1278  * -- relies on the address DEST_REG to be loaded with good data
00001DAC                          1279  
00001DAC  1A39 0000252C           1280  DEST_MODE_SPECIAL     MOVE.B      DEST_REG, D5
00001DB2  BA3C 0000               1281                      CMP.B       #%000, D5
00001DB6  6700 0016               1282                      BEQ         DEST_MODE_DIR_W
00001DBA  BA3C 0001               1283                      CMP.B       #%001, D5
00001DBE  6700 002E               1284                      BEQ         DEST_MODE_DIR_L
00001DC2  BA3C 0004               1285                      CMP.B       #%100, D5
00001DC6  6700 0052               1286                      BEQ         DEST_MODE_IMME_DATA
00001DCA  6000 FF7A               1287                      BRA         DEST_MODE_INVALID
00001DCE                          1288  
00001DCE                          1289  * -- direct addressing mode, word-sized address
00001DCE  1AFC 0020               1290  DEST_MODE_DIR_W     MOVE.B    #' ', (A5)+
00001DD2  1AFC 0020               1291                      MOVE.B    #' ', (A5)+
00001DD6  1AFC 0020               1292                      MOVE.B    #' ', (A5)+
00001DDA  1AFC 0024               1293                      MOVE.B    #'$', (A5)+
00001DDE  4EB9 0000233C           1294                      JSR       READ_AND_PRINT_WORD
00001DE4  2AF9 00002572           1295                      MOVE.L    EXTRA_STUFF, (A5)+
00001DEA  6000 FF5E               1296                      BRA       DECODE_DEST_DONE
00001DEE                          1297  
00001DEE  1AFC 0020               1298  DEST_MODE_DIR_L     MOVE.B    #' ', (A5)+
00001DF2  1AFC 0020               1299                      MOVE.B    #' ', (A5)+
00001DF6  1AFC 0020               1300                      MOVE.B    #' ', (A5)+
00001DFA  1AFC 0024               1301                      MOVE.B    #'$', (A5)+
00001DFE  4EB9 0000233C           1302                      JSR       READ_AND_PRINT_WORD
00001E04  2AF9 00002572           1303                      MOVE.L    EXTRA_STUFF, (A5)+
00001E0A  4EB9 0000233C           1304                      JSR       READ_AND_PRINT_WORD
00001E10  2AF9 00002572           1305                      MOVE.L    EXTRA_STUFF, (A5)+
00001E16  6000 FF32               1306                      BRA       DECODE_DEST_DONE
00001E1A                          1307  
00001E1A  1039 00002534           1308  DEST_MODE_IMME_DATA MOVE.B      PERSONAL_SIZE_CONVENTION, D0
00001E20  1AFC 0020               1309                      MOVE.B    #' ', (A5)+
00001E24  1AFC 0020               1310                      MOVE.B    #' ', (A5)+
00001E28  1AFC 0023               1311                      MOVE.B      #'#', (A5)+
00001E2C  1AFC 0024               1312                      MOVE.B      #'$', (A5)+
00001E30  B03C 0000               1313                      CMP.B       #%00, D0
00001E34  6700 000E               1314                      BEQ         DEST_IMME_DATA_BYTE
00001E38  B03C 0001               1315                      CMP.B       #%01, D0
00001E3C  6700 0016               1316                      BEQ         DEST_IMME_DATA_WORD
00001E40  6000 0022               1317                      BRA         DEST_IMME_DATA_LONG
00001E44                          1318  
00001E44  4EB9 0000233C           1319  DEST_IMME_DATA_BYTE      JSR         READ_AND_PRINT_WORD
00001E4A  2AF9 00002572           1320                      MOVE.L    EXTRA_STUFF, (A5)+
00001E50  6000 FEF8               1321                      BRA         DECODE_DEST_DONE
00001E54                          1322  
00001E54  4EB9 0000233C           1323  DEST_IMME_DATA_WORD      JSR         READ_AND_PRINT_WORD
00001E5A  2AF9 00002572           1324                      MOVE.L    EXTRA_STUFF, (A5)+
00001E60  6000 FEE8               1325                      BRA         DECODE_DEST_DONE
00001E64                          1326  
00001E64  4EB9 0000233C           1327  DEST_IMME_DATA_LONG      JSR         READ_AND_PRINT_WORD
00001E6A  2AF9 00002572           1328                      MOVE.L    EXTRA_STUFF, (A5)+
00001E70  4EB9 0000233C           1329                      JSR         READ_AND_PRINT_WORD
00001E76  2AF9 00002572           1330                      MOVE.L    EXTRA_STUFF, (A5)+
00001E7C  6000 FECC               1331                      BRA         DECODE_DEST_DONE
00001E80                          1332  
00001E80                          1333  * ---------------------------------------------------------
00001E80                          1334  
00001E80                          1335  * -- pre-conditions: Address EA_MODE loaded with correct input
00001E80                          1336  * --                 Address EA_REG  loaded with correct input
00001E80                          1337  * --                 If mode is Immediate Data, need data size
00001E80                          1338  * --                 stored in PERSONAL_SIZE_CONVENTION (0 = byte, 1 = word, anything else = long)
00001E80                          1339  
00001E80                          1340  * -- Purpose: Decode a typical ea_mode (Data register, Address register, etc.)
00001E80                          1341  
00001E80                          1342  * -- 1. process data
00001E80  48E7 0C04               1343  DECODE_EA_MODE  MOVEM.L     D4-D5/A5, -(sp)
00001E84  2A7C 00002540           1344                  MOVEA.L     #EA_MODE_OUT, A5
00001E8A  1A39 00002527           1345                  MOVE.B      EA_MODE, D5
00001E90                          1346                  
00001E90  BA3C 0000               1347                  CMP.B       #%000, D5
00001E94  6700 0038               1348                  BEQ         EA_MODE_DREG
00001E98  BA3C 0001               1349                  CMP.B       #%001, D5
00001E9C  6700 003C               1350                  BEQ         EA_MODE_AREG_DIR
00001EA0  BA3C 0002               1351                  CMP.B       #%010, D5
00001EA4  6700 0040               1352                  BEQ         EA_MODE_AREG_INDIR
00001EA8  BA3C 0003               1353                  CMP.B       #%011, D5
00001EAC  6700 004C               1354                  BEQ         EA_MODE_AREG_INDIR_INC
00001EB0  BA3C 0004               1355                  CMP.B       #%100, D5
00001EB4  6700 005C               1356                  BEQ         EA_MODE_AREG_INDIR_DEC
00001EB8  BA3C 0007               1357                  CMP.B       #%111, D5
00001EBC  6700 006C               1358                  BEQ         EA_MODE_SPECIAL
00001EC0  6000 0002               1359                  BRA         EA_MODE_INVALID
00001EC4                          1360                  
00001EC4                          1361  * -- 2. Respond to data
00001EC4                          1362  
00001EC4  6000 0002               1363  EA_MODE_INVALID     BRA     DECODE_EA_DONE
00001EC8                          1364  
00001EC8  4CDF 2030               1365  DECODE_EA_DONE      MOVEM.L (sp)+, D4-D5/A5
00001ECC  4E75                    1366                      RTS
00001ECE                          1367  
00001ECE  1AFC 0044               1368  EA_MODE_DREG        MOVE.B      #'D', (A5)+
00001ED2  4EB9 00001FFE           1369                      JSR         DECODE_EA_REG
00001ED8  60EE                    1370                      BRA         DECODE_EA_DONE
00001EDA                          1371  
00001EDA  1AFC 0041               1372  EA_MODE_AREG_DIR    MOVE.B      #'A', (A5)+
00001EDE  4EB9 00001FFE           1373                      JSR         DECODE_EA_REG
00001EE4  60E2                    1374                      BRA         DECODE_EA_DONE
00001EE6                          1375  
00001EE6  1AFC 0028               1376  EA_MODE_AREG_INDIR  MOVE.B      #'(', (A5)+
00001EEA  1AFC 0041               1377                      MOVE.B      #'A', (A5)+
00001EEE  4EB9 00001FFE           1378                      JSR         DECODE_EA_REG
00001EF4  1AFC 0029               1379                      MOVE.B      #')', (A5)+
00001EF8  60CE                    1380                      BRA         DECODE_EA_DONE
00001EFA                          1381  
00001EFA  1AFC 0028               1382  EA_MODE_AREG_INDIR_INC  MOVE.B      #'(', (A5)+
00001EFE  1AFC 0041               1383                          MOVE.B      #'A', (A5)+
00001F02  4EB9 00001FFE           1384                          JSR         DECODE_EA_REG
00001F08  1AFC 0029               1385                          MOVE.B      #')', (A5)+
00001F0C  1AFC 002B               1386                          MOVE.B      #'+', (A5)+
00001F10  60B6                    1387                          BRA         DECODE_EA_DONE
00001F12                          1388  
00001F12  1AFC 002D               1389  EA_MODE_AREG_INDIR_DEC  MOVE.B      #'-', (A5)+
00001F16  1AFC 0028               1390                          MOVE.B      #'(', (A5)+
00001F1A  1AFC 0041               1391                          MOVE.B      #'A', (A5)+
00001F1E  4EB9 00001FFE           1392                          JSR         DECODE_EA_REG
00001F24  1AFC 0029               1393                          MOVE.B      #')', (A5)+
00001F28  609E                    1394                          BRA         DECODE_EA_DONE
00001F2A                          1395  
00001F2A                          1396  * -- relies on the address EA_REG to be loaded with good data
00001F2A                          1397  
00001F2A  1A39 00002528           1398  EA_MODE_SPECIAL     MOVE.B      EA_REG, D5
00001F30  BA3C 0000               1399                      CMP.B       #%000, D5
00001F34  6700 0016               1400                      BEQ         EA_MODE_DIR_W
00001F38  BA3C 0001               1401                      CMP.B       #%001, D5
00001F3C  6700 002E               1402                      BEQ         EA_MODE_DIR_L
00001F40  BA3C 0004               1403                      CMP.B       #%100, D5
00001F44  6700 0052               1404                      BEQ         EA_MODE_IMME_DATA
00001F48  6000 FF7A               1405                      BRA         EA_MODE_INVALID
00001F4C                          1406  
00001F4C                          1407  * -- direct addressing mode, word-sized address
00001F4C  1AFC 0020               1408  EA_MODE_DIR_W     MOVE.B    #' ', (A5)+
00001F50  1AFC 0020               1409                      MOVE.B    #' ', (A5)+
00001F54  1AFC 0020               1410                      MOVE.B    #' ', (A5)+
00001F58  1AFC 0024               1411                      MOVE.B    #'$', (A5)+
00001F5C  4EB9 0000233C           1412                      JSR       READ_AND_PRINT_WORD
00001F62  2AF9 00002572           1413                      MOVE.L    EXTRA_STUFF, (A5)+
00001F68  6000 FF5E               1414                      BRA       DECODE_EA_DONE
00001F6C                          1415  
00001F6C  1AFC 0020               1416  EA_MODE_DIR_L     MOVE.B    #' ', (A5)+
00001F70  1AFC 0020               1417                      MOVE.B    #' ', (A5)+
00001F74  1AFC 0020               1418                      MOVE.B    #' ', (A5)+
00001F78  1AFC 0024               1419                      MOVE.B    #'$', (A5)+
00001F7C  4EB9 0000233C           1420                      JSR       READ_AND_PRINT_WORD
00001F82  2AF9 00002572           1421                      MOVE.L    EXTRA_STUFF, (A5)+
00001F88  4EB9 0000233C           1422                      JSR       READ_AND_PRINT_WORD
00001F8E  2AF9 00002572           1423                      MOVE.L    EXTRA_STUFF, (A5)+
00001F94  6000 FF32               1424                      BRA       DECODE_EA_DONE
00001F98                          1425  
00001F98  1039 00002534           1426  EA_MODE_IMME_DATA MOVE.B      PERSONAL_SIZE_CONVENTION, D0
00001F9E  1AFC 0020               1427                      MOVE.B      #' ', (A5)+
00001FA2  1AFC 0020               1428                      MOVE.B      #' ', (A5)+
00001FA6  1AFC 0023               1429                      MOVE.B      #'#', (A5)+
00001FAA  1AFC 0024               1430                      MOVE.B      #'$', (A5)+
00001FAE  B03C 0000               1431                      CMP.B       #%00, D0
00001FB2  6700 000E               1432                      BEQ         EA_IMME_DATA_BYTE
00001FB6  B03C 0001               1433                      CMP.B       #%01, D0
00001FBA  6700 0016               1434                      BEQ         EA_IMME_DATA_WORD
00001FBE  6000 0022               1435                      BRA         EA_IMME_DATA_LONG
00001FC2                          1436  
00001FC2  4EB9 0000233C           1437  EA_IMME_DATA_BYTE      JSR         READ_AND_PRINT_WORD
00001FC8  2AF9 00002572           1438                      MOVE.L    EXTRA_STUFF, (A5)+
00001FCE  6000 FEF8               1439                      BRA         DECODE_EA_DONE
00001FD2                          1440  
00001FD2  4EB9 0000233C           1441  EA_IMME_DATA_WORD      JSR         READ_AND_PRINT_WORD
00001FD8  2AF9 00002572           1442                      MOVE.L    EXTRA_STUFF, (A5)+
00001FDE  6000 FEE8               1443                      BRA         DECODE_EA_DONE
00001FE2                          1444  
00001FE2  4EB9 0000233C           1445  EA_IMME_DATA_LONG      JSR         READ_AND_PRINT_WORD
00001FE8  2AF9 00002572           1446                      MOVE.L    EXTRA_STUFF, (A5)+
00001FEE  4EB9 0000233C           1447                      JSR         READ_AND_PRINT_WORD
00001FF4  2AF9 00002572           1448                      MOVE.L    EXTRA_STUFF, (A5)+
00001FFA  6000 FECC               1449                      BRA         DECODE_EA_DONE
00001FFE                          1450  * ----------------------
00001FFE                          1451  * EA_REG AND DEST_REG
00001FFE                          1452  
00001FFE                          1453  
00001FFE                          1454  * -- process EA field: 3-bit REGISTER
00001FFE                          1455  * -- convention: Binary --> alphanumerical string
00001FFE                          1456  * -- Supported opcodes: All opcodes
00001FFE                          1457  
00001FFE                          1458  * -- preconditions: Assume that the address EA_REG is loaded with correct data
00001FFE                          1459  * -- postcondition: The address EA_REG_OUT is loaded with the appropriate string
00001FFE                          1460  
00001FFE  48E7 0600               1461  DECODE_EA_REG   MOVEM.L     D5-D6, -(sp)
00002002  7A00                    1462                  MOVE.L      #0, D5
00002004  1A39 00002528           1463                  MOVE.B      EA_REG, D5
0000200A                          1464                  
0000200A  BA3C 0000               1465                  CMP.B       #%000, D5
0000200E  6D00 000E               1466                  BLT         INVALID_EA_REG
00002012  BA3C 0007               1467                  CMP.B       #%111, D5
00002016  6E00 0006               1468                  BGT         INVALID_EA_REG
0000201A  6000 0010               1469                  BRA         VALID_EA_REG
0000201E                          1470  
0000201E  1AFC 003F               1471  INVALID_EA_REG  MOVE.B      #'?', (A5)+
00002022  6000 0002               1472                  BRA         EA_REG_DONE
00002026                          1473  
00002026  4CDF 0060               1474  EA_REG_DONE     MOVEM.L     (sp)+, D5-D6
0000202A  4E75                    1475                  RTS
0000202C                          1476  
0000202C                          1477  * --- WARNING: make sure that EA_REG_OUT holds enough space for at least one LONG data piece
0000202C  0605 0030               1478  VALID_EA_REG    ADD.B       #$30, D5    * -- convert hex into string
00002030  1AC5                    1479                  MOVE.B      D5, (A5)+    * -- ensured to be one char (1byte)
00002032  60F2                    1480                  BRA         EA_REG_DONE
00002034                          1481  
00002034                          1482  * ====================
00002034                          1483  
00002034                          1484  * -- process DEST field: 3-bit REGISTER
00002034                          1485  * -- convention: Binary --> alphanumerical string
00002034                          1486  * -- Supported opcodes: All opcodes
00002034                          1487  
00002034                          1488  * -- preconditions: Assume that the address DEST_REG is loaded with correct data
00002034                          1489  * -- postcondition: The address DEST_REG_OUT is loaded with the appropriate string
00002034                          1490  
00002034  48E7 0600               1491  DECODE_DEST_REG MOVEM.L     D5-D6, -(sp)
00002038  7A00                    1492                  MOVE.L      #0, D5
0000203A  1A39 0000252C           1493                  MOVE.B      DEST_REG, D5
00002040  2A7C 00002568           1494                  MOVE.L      #DEST_REG_OUT, A5
00002046                          1495                  
00002046  BA3C 0000               1496                  CMP.B       #%000, D5
0000204A  6D00 000E               1497                  BLT         INVALID_DEST_REG
0000204E  BA3C 0007               1498                  CMP.B       #%111, D5
00002052  6E00 0006               1499                  BGT         INVALID_DEST_REG
00002056  6000 0010               1500                  BRA         VALID_DEST_REG
0000205A                          1501  
0000205A  1AFC 003F               1502  INVALID_DEST_REG  MOVE.B      #'?', (A5)+
0000205E  6000 0002               1503                  BRA         DEST_REG_DONE
00002062                          1504  
00002062  4CDF 0060               1505  DEST_REG_DONE     MOVEM.L     (sp)+, D5-D6
00002066  4E75                    1506                  RTS
00002068                          1507  
00002068                          1508  * --- WARNING: make sure that DEST_REG_OUT holds enough space for at ldestst one LONG data piece
00002068  0605 0030               1509  VALID_DEST_REG    ADD.B       #$30, D5    * -- convert hex into string
0000206C  1AC5                    1510                  MOVE.B      D5, (A5)+    * -- ensured to be one char (1byte)
0000206E  60F2                    1511                  BRA         DEST_REG_DONE
00002070                          1512  
00002070                          1513  
00002070                          1514  
00002070                          1515  * ==================== SRC
00002070                          1516  
00002070                          1517  
00002070                          1518  * -- pre-conditions: Address SRC_MODE loaded with correct input
00002070                          1519  * --                 Address SRC_REG  loaded with correct input
00002070                          1520  * --                 If mode is Immediate Data, need data size
00002070                          1521  * --                 stored in PERSONAL_SIZE_CONVENTION (0 = byte, 1 = word, anything else = long)
00002070                          1522  
00002070                          1523  * -- Purpose: Decode a typical SRC_mode (Data register, Address register, etc.)
00002070                          1524  
00002070                          1525  * -- 1. process data
00002070  48E7 0C04               1526  DECODE_SRC_MODE  MOVEM.L     D4-D5/A5, -(sp)
00002074  2A7C 0000254E           1527                  MOVEA.L     #SRC_MODE_OUT, A5
0000207A  1A39 00002529           1528                  MOVE.B      SRC_MODE, D5
00002080                          1529                  
00002080  BA3C 0000               1530                  CMP.B       #%000, D5
00002084  6700 0038               1531                  BEQ         SRC_MODE_DREG
00002088  BA3C 0001               1532                  CMP.B       #%001, D5
0000208C  6700 003C               1533                  BEQ         SRC_MODE_AREG_DIR
00002090  BA3C 0002               1534                  CMP.B       #%010, D5
00002094  6700 0040               1535                  BEQ         SRC_MODE_AREG_INDIR
00002098  BA3C 0003               1536                  CMP.B       #%011, D5
0000209C  6700 004C               1537                  BEQ         SRC_MODE_AREG_INDIR_INC
000020A0  BA3C 0004               1538                  CMP.B       #%100, D5
000020A4  6700 005C               1539                  BEQ         SRC_MODE_AREG_INDIR_DEC
000020A8  BA3C 0007               1540                  CMP.B       #%111, D5
000020AC  6700 006C               1541                  BEQ         SRC_MODE_SPECIAL
000020B0  6000 0002               1542                  BRA         SRC_MODE_INVALID
000020B4                          1543                  
000020B4                          1544  * -- 2. Respond to data
000020B4                          1545  
000020B4  6000 0002               1546  SRC_MODE_INVALID     BRA     DECODE_SRC_DONE
000020B8                          1547  
000020B8  4CDF 2030               1548  DECODE_SRC_DONE      MOVEM.L (sp)+, D4-D5/A5
000020BC  4E75                    1549                      RTS
000020BE                          1550  
000020BE  1AFC 0044               1551  SRC_MODE_DREG        MOVE.B      #'D', (A5)+
000020C2  4EB9 000021EE           1552                      JSR         DECODE_SRC_REG
000020C8  60EE                    1553                      BRA         DECODE_SRC_DONE
000020CA                          1554  
000020CA  1AFC 0041               1555  SRC_MODE_AREG_DIR    MOVE.B      #'A', (A5)+
000020CE  4EB9 000021EE           1556                      JSR         DECODE_SRC_REG
000020D4  60E2                    1557                      BRA         DECODE_SRC_DONE
000020D6                          1558  
000020D6  1AFC 0028               1559  SRC_MODE_AREG_INDIR  MOVE.B      #'(', (A5)+
000020DA  1AFC 0041               1560                      MOVE.B      #'A', (A5)+
000020DE  4EB9 000021EE           1561                      JSR         DECODE_SRC_REG
000020E4  1AFC 0029               1562                      MOVE.B      #')', (A5)+
000020E8  60CE                    1563                      BRA         DECODE_SRC_DONE
000020EA                          1564  
000020EA  1AFC 0028               1565  SRC_MODE_AREG_INDIR_INC  MOVE.B      #'(', (A5)+
000020EE  1AFC 0041               1566                          MOVE.B      #'A', (A5)+
000020F2  4EB9 000021EE           1567                          JSR         DECODE_SRC_REG
000020F8  1AFC 0029               1568                          MOVE.B      #')', (A5)+
000020FC  1AFC 002B               1569                          MOVE.B      #'+', (A5)+
00002100  60B6                    1570                          BRA         DECODE_SRC_DONE
00002102                          1571  
00002102  1AFC 002D               1572  SRC_MODE_AREG_INDIR_DEC  MOVE.B      #'-', (A5)+
00002106  1AFC 0028               1573                          MOVE.B      #'(', (A5)+
0000210A  1AFC 0041               1574                          MOVE.B      #'A', (A5)+
0000210E  4EB9 000021EE           1575                          JSR         DECODE_SRC_REG
00002114  1AFC 0029               1576                          MOVE.B      #')', (A5)+
00002118  609E                    1577                          BRA         DECODE_SRC_DONE
0000211A                          1578  
0000211A                          1579  * -- relies on the address SRC_REG to be loaded with good data
0000211A                          1580  
0000211A  1A39 0000252A           1581  SRC_MODE_SPECIAL     MOVE.B      SRC_REG, D5
00002120  BA3C 0000               1582                      CMP.B       #%000, D5
00002124  6700 0016               1583                      BEQ         SRC_MODE_DIR_W
00002128  BA3C 0001               1584                      CMP.B       #%001, D5
0000212C  6700 002E               1585                      BEQ         SRC_MODE_DIR_L
00002130  BA3C 0004               1586                      CMP.B       #%100, D5
00002134  6700 0052               1587                      BEQ         SRC_MODE_IMME_DATA
00002138  6000 FF7A               1588                      BRA         SRC_MODE_INVALID
0000213C                          1589  
0000213C                          1590  * -- direct addressing mode, word-sized address
0000213C  1AFC 0020               1591  SRC_MODE_DIR_W     MOVE.B    #' ', (A5)+
00002140  1AFC 0020               1592                      MOVE.B    #' ', (A5)+
00002144  1AFC 0020               1593                      MOVE.B    #' ', (A5)+
00002148  1AFC 0024               1594                      MOVE.B    #'$', (A5)+
0000214C  4EB9 0000233C           1595                      JSR       READ_AND_PRINT_WORD
00002152  2AF9 00002572           1596                      MOVE.L    EXTRA_STUFF, (A5)+
00002158  6000 FF5E               1597                      BRA       DECODE_SRC_DONE
0000215C                          1598  
0000215C  1AFC 0020               1599  SRC_MODE_DIR_L     MOVE.B    #' ', (A5)+
00002160  1AFC 0020               1600                      MOVE.B    #' ', (A5)+
00002164  1AFC 0020               1601                      MOVE.B    #' ', (A5)+
00002168  1AFC 0024               1602                      MOVE.B    #'$', (A5)+
0000216C  4EB9 0000233C           1603                      JSR       READ_AND_PRINT_WORD
00002172  2AF9 00002572           1604                      MOVE.L    EXTRA_STUFF, (A5)+
00002178  4EB9 0000233C           1605                      JSR       READ_AND_PRINT_WORD
0000217E  2AF9 00002572           1606                      MOVE.L    EXTRA_STUFF, (A5)+
00002184  6000 FF32               1607                      BRA       DECODE_SRC_DONE
00002188                          1608  
00002188  1039 00002534           1609  SRC_MODE_IMME_DATA MOVE.B      PERSONAL_SIZE_CONVENTION, D0
0000218E  1AFC 0020               1610                      MOVE.B    #' ', (A5)+
00002192  1AFC 0020               1611                      MOVE.B    #' ', (A5)+
00002196  1AFC 0023               1612                      MOVE.B      #'#', (A5)+
0000219A  1AFC 0024               1613                      MOVE.B      #'$', (A5)+
0000219E  B03C 0000               1614                      CMP.B       #%00, D0
000021A2  6700 000E               1615                      BEQ         SRC_IMME_DATA_BYTE
000021A6  B03C 0001               1616                      CMP.B       #%01, D0
000021AA  6700 0016               1617                      BEQ         SRC_IMME_DATA_WORD
000021AE  6000 0022               1618                      BRA         SRC_IMME_DATA_LONG
000021B2                          1619  
000021B2  4EB9 0000233C           1620  SRC_IMME_DATA_BYTE      JSR         READ_AND_PRINT_WORD
000021B8  2AF9 00002572           1621                      MOVE.L    EXTRA_STUFF, (A5)+
000021BE  6000 FEF8               1622                      BRA         DECODE_SRC_DONE
000021C2                          1623  
000021C2  4EB9 0000233C           1624  SRC_IMME_DATA_WORD      JSR         READ_AND_PRINT_WORD
000021C8  2AF9 00002572           1625                      MOVE.L    EXTRA_STUFF, (A5)+
000021CE  6000 FEE8               1626                      BRA         DECODE_SRC_DONE
000021D2                          1627  
000021D2  4EB9 0000233C           1628  SRC_IMME_DATA_LONG      JSR         READ_AND_PRINT_WORD
000021D8  2AF9 00002572           1629                      MOVE.L    EXTRA_STUFF, (A5)+
000021DE  4EB9 0000233C           1630                      JSR         READ_AND_PRINT_WORD
000021E4  2AF9 00002572           1631                      MOVE.L    EXTRA_STUFF, (A5)+
000021EA  6000 FECC               1632                      BRA         DECODE_SRC_DONE
000021EE                          1633  
000021EE                          1634  
000021EE                          1635  
000021EE                          1636  * -- process SRC field: 3-bit REGISTER
000021EE                          1637  * -- convention: Binary --> alphanumerical string
000021EE                          1638  * -- Supported opcodes: All opcodes
000021EE                          1639  
000021EE                          1640  * -- preconditions: Assume that the address SRC_REG is loaded with correct data
000021EE                          1641  * -- postcondition: The address SRC_REG_OUT is loaded with the appropriate string
000021EE                          1642  
000021EE  48E7 0600               1643  DECODE_SRC_REG MOVEM.L     D5-D6, -(sp)
000021F2  7A00                    1644                  MOVE.L      #0, D5
000021F4  1A39 0000252A           1645                  MOVE.B      SRC_REG, D5
000021FA  2A7C 0000255A           1646                  MOVE.L      #SRC_REG_OUT, A5
00002200                          1647                  
00002200  BA3C 0000               1648                  CMP.B       #%000, D5
00002204  6D00 000E               1649                  BLT         INVALID_SRC_REG
00002208  BA3C 0007               1650                  CMP.B       #%111, D5
0000220C  6E00 0006               1651                  BGT         INVALID_SRC_REG
00002210  6000 0010               1652                  BRA         VALID_SRC_REG
00002214                          1653  
00002214  1AFC 003F               1654  INVALID_SRC_REG  MOVE.B      #'?', (A5)+
00002218  6000 0002               1655                  BRA         SRC_REG_DONE
0000221C                          1656  
0000221C  4CDF 0060               1657  SRC_REG_DONE     MOVEM.L     (sp)+, D5-D6
00002220  4E75                    1658                  RTS
00002222                          1659  
00002222                          1660  * --- WARNING: make sure that SRC_REG_OUT holds enough space for at lSRCst one LONG data piece
00002222  0605 0030               1661  VALID_SRC_REG    ADD.B       #$30, D5    * -- convert hex into string
00002226  1AC5                    1662                  MOVE.B      D5, (A5)+    * -- ensured to be one char (1byte)
00002228  60F2                    1663                  BRA         SRC_REG_DONE
0000222A                          1664  
0000222A                          1665  
0000222A                          1666  
0000222A                          1667  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1668  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1669  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1670  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1671  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1672  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1673  * ----------------------------------------------- END OUTPUT PROCESSING ------------------------------------------------------------
0000222A                          1674  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1675  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1676  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1677  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1678  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1679  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1680  
0000222A                          1681  
0000222A                          1682  
0000222A                          1683  
0000222A                          1684  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1685  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1686  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1687  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1688  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1689  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1690  * ----------------------------------------------------- SUBROUTINES ----------------------------------------------------------------
0000222A                          1691  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1692  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1693  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1694  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1695  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1696  * ----------------------------------------------------------------------------------------------------------------------------------
0000222A                          1697  
0000222A                          1698  
0000222A                          1699  
0000222A                          1700  * ----------------------
0000222A                          1701  * Extra subroutines
0000222A                          1702  
0000222A                          1703  
0000222A                          1704  * ---- subroutine DECODE_DISPLACEMENT
0000222A                          1705  
0000222A  48E7 0E00               1706  DECODE_DISPLACEMENT MOVEM.L  D4-D6, -(sp)
0000222E                          1707              * -- default size assumption: Byte
0000222E  13FC 0000 00002534      1708              MOVE.B  #%00, PERSONAL_SIZE_CONVENTION
00002236                          1709  
00002236  3839 00002530           1710              MOVE.W  DISPLACEMENT, D4
0000223C  2A0E                    1711              MOVE.L  A6, D5
0000223E  B83C 0000               1712              CMP.B   #$00, D4
00002242  6600 000E               1713              BNE     BRA_SKIP
00002246                          1714  
00002246  3C1E                    1715              MOVE.W  (A6)+, D6
00002248  2806                    1716              MOVE.L  D6, D4
0000224A  13FC 0001 00002534      1717              MOVE.B  #01, PERSONAL_SIZE_CONVENTION
00002252                          1718  
00002252  2E05                    1719  BRA_SKIP    MOVE.L  D5, D7
00002254  DE84                    1720              ADD.L   D4, D7
00002256  4EB9 000023A8           1721              JSR     CONVERT_HEX_TO_STRING
0000225C  23C7 00002578           1722              MOVE.L  D7, DISPLACEMENT_OUT
00002262  6000 0002               1723              BRA     DECODE_DISPLACEMENT_DONE
00002266                          1724  
00002266                          1725  
00002266  4CDF 0070               1726  DECODE_DISPLACEMENT_DONE MOVEM.L (sp)+, D4-D6
0000226A  4E75                    1727                           RTS
0000226C                          1728  
0000226C                          1729  
0000226C                          1730  * -- process EA field: 1-bit SIZE
0000226C                          1731  * -- convention: 0-WORD, 1-LONG
0000226C                          1732  * -- Supported opcodes: All the -A variants except for MOVEA, whose convention is similar to MOVE's
0000226C                          1733  
0000226C                          1734  * -- preconditions: Assume that the address ONEBIT_SIZE is loaded with correct data
0000226C                          1735  * -- postcondition: The address ONEBIT_SIZE_OUT is loaded with the appropriate string
0000226C                          1736  
0000226C  48E7 0604               1737  DECODE_ONE_BIT_SIZE MOVEM.L     D5-D6/A5, -(sp)
00002270  1A39 00002524           1738                      MOVE.B      SIZE, D5
00002276  2A7C 00002536           1739                      MOVEA.L     #SIZE_OUT, A5
0000227C                          1740  
0000227C  BA3C 0000               1741                      CMP.B       #%0, D5
00002280  6700 001C               1742                      BEQ         SIZE_WORD_ONE
00002284  BA3C 0001               1743                      CMP.B       #%1, D5
00002288  6700 0026               1744                      BEQ         SIZE_LONG_ONE
0000228C  6000 0002               1745                      BRA         INVALID_SIZE
00002290                          1746  
00002290  1ABC 003F               1747  INVALID_SIZE        MOVE.B      #'?', (A5)
00002294  6000 0002               1748                      BRA         ONEBIT_SIZE_DONE
00002298                          1749  
00002298  4CDF 2060               1750  ONEBIT_SIZE_DONE    MOVEM.L     (sp)+, D5-D6/A5
0000229C  4E75                    1751                      RTS
0000229E                          1752  
0000229E  1AFC 002E               1753  SIZE_WORD_ONE           MOVE.B      #'.', (A5)+
000022A2  1AFC 0057               1754                      MOVE.B      #'W', (A5)+
000022A6  13FC 0001 00002534      1755                      MOVE.B      #1, PERSONAL_SIZE_CONVENTION
000022AE  60E8                    1756                      BRA         ONEBIT_SIZE_DONE
000022B0                          1757  
000022B0  1AFC 002E               1758  SIZE_LONG_ONE           MOVE.B      #'.', (A5)+
000022B4  1AFC 004C               1759                      MOVE.B      #'L', (A5)+
000022B8  13FC 0002 00002534      1760                      MOVE.B      #2, PERSONAL_SIZE_CONVENTION
000022C0  60D6                    1761                      BRA         ONEBIT_SIZE_DONE
000022C2                          1762  
000022C2                          1763  
000022C2  48E7 0C04               1764  DECODE_TWO_BIT_SIZE  MOVEM.L     D4-D5/A5, -(sp)
000022C6  2A7C 00002536           1765                  MOVEA.L     #SIZE_OUT, A5
000022CC  1A39 00002524           1766                  MOVE.B      SIZE, D5
000022D2                          1767                  
000022D2  BA3C 0000               1768                  CMP.B       #%000, D5
000022D6  6700 0020               1769                  BEQ         SIZE_BYTE
000022DA  BA3C 0001               1770                  CMP.B       #%001, D5
000022DE  6700 0024               1771                  BEQ         SIZE_WORD
000022E2  BA3C 0002               1772                  CMP.B       #%010, D5
000022E6  6700 0028               1773                  BEQ         SIZE_LONG
000022EA  6000 0002               1774                  BRA         SIZE_INVALID
000022EE                          1775                  
000022EE                          1776  * -- 2. Respond to data
000022EE                          1777  
000022EE  6000 0002               1778  SIZE_INVALID     BRA     DECODE_TWO_BIT_SIZE_DONE
000022F2                          1779  
000022F2  4CDF 2030               1780  DECODE_TWO_BIT_SIZE_DONE    MOVEM.L (sp)+, D4-D5/A5
000022F6  4E75                    1781                      RTS
000022F8                          1782  
000022F8  1AFC 002E               1783  SIZE_BYTE        MOVE.B      #'.', (A5)+
000022FC  1AFC 0042               1784                      MOVE.B      #'B', (A5)+
00002300  6000 FBC6               1785                      BRA         DECODE_EA_DONE
00002304                          1786  
00002304  1AFC 002E               1787  SIZE_WORD        MOVE.B      #'.', (A5)+
00002308  1AFC 0057               1788                      MOVE.B      #'W', (A5)+
0000230C  6000 FBBA               1789                      BRA         DECODE_EA_DONE
00002310                          1790  
00002310  1AFC 002E               1791  SIZE_LONG        MOVE.B      #'.', (A5)+
00002314  1AFC 004C               1792                      MOVE.B      #'L', (A5)+
00002318  6000 FBAE               1793                      BRA         DECODE_EA_DONE
0000231C                          1794  
0000231C                          1795  
0000231C                          1796  
0000231C                          1797  DECODE_DATA       
0000231C  1E39 00002533           1798                      MOVE.B      DATA, D7
00002322  BE3C 0000               1799                      CMP.B       #%000, D7
00002326  6700 000E               1800                      BEQ         TRANSLATE_TO_8
0000232A  4EB9 000023A8           1801                      JSR         CONVERT_HEX_TO_STRING
00002330  13C7 00002576           1802                      MOVE.B      D7, DATA_OUT
00002336                          1803               
00002336  1E3C 0008               1804  TRANSLATE_TO_8      MOVE.B      #8, D7
0000233A  4E75                    1805                      RTS
0000233C                          1806  
0000233C  48E7 0100               1807  READ_AND_PRINT_WORD MOVEM.L     D7, -(sp)
00002340  3E1E                    1808                      MOVE.W      (A6)+, D7
00002342  4EB9 000023A8           1809                      JSR         CONVERT_HEX_TO_STRING
00002348  23C7 00002572           1810                      MOVE.L      D7, EXTRA_STUFF
0000234E  4CDF 0080               1811                      MOVEM.L     (sp)+, D7
00002352  4E75                    1812                      RTS
00002354                          1813  
00002354  48E7 0060               1814  PRINT_EA_MODE       MOVEM.L     A1-A2, -(sp)
00002358  227C 00002540           1815                      MOVEA.L     #EA_MODE_OUT, A1
0000235E  247C 0000257C           1816                      MOVEA.L     #PRINT_BUFFER, A2
00002364  13FC 000C 00002590      1817                      MOVE.B      #12, PRINT_SIZE
0000236C  24D9                    1818                      MOVE.L      (A1)+, (A2)+
0000236E  24D9                    1819                      MOVE.L      (A1)+, (A2)+
00002370  24D9                    1820                      MOVE.L      (A1)+, (A2)+
00002372  4EB9 000024F8           1821                      JSR         PRINT_STUFF
00002378  4CDF 0600               1822                      MOVEM.L     (sp)+, A1-A2
0000237C  4E75                    1823                      RTS
0000237E                          1824  
0000237E  48E7 0060               1825  PRINT_DEST_MODE     MOVEM.L     A1-A2, -(sp)
00002382  227C 0000255C           1826                      MOVEA.L     #DEST_MODE_OUT, A1
00002388  247C 0000257C           1827                      MOVEA.L     #PRINT_BUFFER, A2
0000238E  13FC 000C 00002590      1828                      MOVE.B      #12, PRINT_SIZE
00002396  24D9                    1829                      MOVE.L      (A1)+, (A2)+
00002398  24D9                    1830                      MOVE.L      (A1)+, (A2)+
0000239A  24D9                    1831                      MOVE.L      (A1)+, (A2)+
0000239C  4EB9 000024F8           1832                      JSR         PRINT_STUFF
000023A2  4CDF 0600               1833                      MOVEM.L     (sp)+, A1-A2
000023A6  4E75                    1834                      RTS
000023A8                          1835  
000023A8                          1836  
000023A8                          1837  * -- put convert code here
000023A8                          1838  
000023A8                          1839  
000023A8  48E7 FE00               1840  CONVERT_HEX_TO_STRING   MOVEM.L     D0-D6, -(sp)
000023AC                          1841      
000023AC  4240                    1842      CLR     D0
000023AE  4241                    1843      CLR     D1
000023B0  4242                    1844      CLR     D2
000023B2  4243                    1845      CLR     D3
000023B4  4244                    1846      CLR     D4
000023B6  4245                    1847      CLR     D5
000023B8  4246                    1848      CLR     D6
000023BA                          1849  
000023BA                          1850      
000023BA                          1851      * --- support only word-sized hex data in D7
000023BA                          1852      * --  D6 is designated as the container for the masked values
000023BA                          1853      * --  D5 is designated as the container for the summands
000023BA                          1854      * --  D4 is the container of the sum
000023BA                          1855      * --  D3 is the container of the length of the string
000023BA                          1856      * --  D0 is designated for on-the-fly arithmetic
000023BA                          1857      
000023BA  163C 0004               1858      MOVE.B      #4, D3
000023BE                          1859      
000023BE  B63C 0000               1860  CONVERT_HEX_TO_STRING_LOOP  CMP.B   #0, D3
000023C2  6700 0030               1861      BEQ         HEX2STR_DONE
000023C6                          1862  
000023C6  7400                    1863      MOVE.L      #0, D2
000023C8  7200                    1864      MOVE.L      #0, D1
000023CA                          1865      
000023CA  1003                    1866      MOVE.B      D3, D0
000023CC  5300                    1867      SUB.B       #1, D0          * -- D3 - 1
000023CE  E540                    1868      ASL.W       #2, D0          * -- (D3 - 1) * 4
000023D0  143C 0004               1869      MOVE.B      #4, D2
000023D4  1203                    1870      MOVE.B      D3, D1
000023D6  9401                    1871      SUB.B       D1, D2          * -- 4 - n       
000023D8  E542                    1872      ASL.W       #2, D2          * -- (4 - D3) * 4
000023DA                          1873  
000023DA  3C07                    1874      MOVE.W      D7, D6
000023DC  E56E                    1875      LSL.W       D2, D6          * -- shift 4*(4-n) bits to get rid of the more significant bits
000023DE  E46E                    1876      LSR.W       D2, D6          * -- undo the shift
000023E0  E06E                    1877      LSR.W       D0, D6          * -- shift 4*(n-1) bits to get the most
000023E2                          1878                                  * -- significant digit at this time
000023E2  2A06                    1879      MOVE.L      D6, D5
000023E4  4EB9 000023FC           1880      JSR         CONVERT_ONE_HEX
000023EA                          1881      
000023EA                          1882      * ------------------------------ D5 now contains the STR equivalent of
000023EA                          1883      *                                D6, shift this char into position and loop
000023EA                          1884      
000023EA  E340                    1885      ASL.W       #1, D0          * (D3 - 1) * 8
000023EC  E1AD                    1886      LSL.L       D0, D5
000023EE  D885                    1887      ADD.L       D5, D4
000023F0  5303                    1888      SUB.B       #1, D3
000023F2  60CA                    1889      BRA         CONVERT_HEX_TO_STRING_LOOP
000023F4                          1890      
000023F4  2E04                    1891  HEX2STR_DONE    MOVE.L      D4, D7          * -- write result over input
000023F6  4CDF 007F               1892                  MOVEM.L     (sp)+, D0-D6
000023FA  4E75                    1893                  RTS
000023FC                          1894                  
000023FC  BA3C 0000               1895  CONVERT_ONE_HEX CMP.B   #$0, D5
00002400  6D00 0012               1896                  BLT     INVALID_HEX_CONVERT
00002404  BA3C 0009               1897                  CMP.B   #$9, D5
00002408  6E00 000E               1898                  BGT     CONVERT_ONE_HEX_NAN
0000240C  0605 0030               1899                  ADD.B   #$30, D5            * -- D5 has number chars, add $30
00002410  6000 001A               1900                  BRA     DONE_CONVERT
00002414                          1901                  
00002414  6000 0016               1902  INVALID_HEX_CONVERT     BRA     DONE_CONVERT
00002418                          1903  
00002418  BA3C 000A               1904  CONVERT_ONE_HEX_NAN     CMP.B   #$A, D5
0000241C  6DF6                    1905                          BLT     INVALID_HEX_CONVERT
0000241E  BA3C 000F               1906                          CMP.B   #$F, D5
00002422  6EF0                    1907                          BGT     INVALID_HEX_CONVERT
00002424  0605 0037               1908                          ADD.B   #$37, D5    * -- D5 is a "letter" hex value
00002428                          1909                                              * -- add 0x37
00002428  6000 0002               1910                          BRA     DONE_CONVERT
0000242C                          1911                          
0000242C  4E75                    1912  DONE_CONVERT    RTS
0000242E                          1913  
0000242E                          1914  
0000242E  23FC 20202020 00002536  1915  FLUSH_OUTPUT_BUFFER MOVE.L  #$20202020, SIZE_OUT
00002438  23FC 20202020 0000253A  1916                      MOVE.L  #$20202020, WEIRD_SIZE_OUT
00002442  23FC 20202020 0000253E  1917                      MOVE.L  #$20202020, DIRECTION_OUT
0000244C  23FC 20202020 0000254C  1918                      MOVE.L  #$20202020, EA_REG_OUT
00002456  23FC 20202020 00002568  1919                      MOVE.L  #$20202020, DEST_REG_OUT
00002460  23FC 20202020 0000255A  1920                      MOVE.L  #$20202020, SRC_REG_OUT
0000246A  4EB9 00002478           1921                      JSR     FLUSH_EA_MODES
00002470  4EB9 000024CA           1922                      JSR     FLUSH_PRINT_BUFFER
00002476  4E75                    1923                      RTS
00002478                          1924  
00002478  48E7 000E               1925  FLUSH_EA_MODES      MOVEM.L A4-A6, -(sp)
0000247C  287C 00002540           1926                      MOVEA.L #EA_MODE_OUT, A4
00002482  2A7C 0000254E           1927                      MOVEA.L #SRC_MODE_OUT, A5
00002488  2C7C 0000255C           1928                      MOVEA.L #DEST_MODE_OUT, A6
0000248E                          1929  
0000248E  28FC 20202020           1930                      MOVE.L  #$20202020, (A4)+
00002494  28FC 20202020           1931                      MOVE.L  #$20202020, (A4)+
0000249A  28FC 20202020           1932                      MOVE.L  #$20202020, (A4)+
000024A0  2AFC 20202020           1933                      MOVE.L  #$20202020, (A5)+
000024A6  2AFC 20202020           1934                      MOVE.L  #$20202020, (A5)+
000024AC  2AFC 20202020           1935                      MOVE.L  #$20202020, (A5)+
000024B2  2CFC 20202020           1936                      MOVE.L  #$20202020, (A6)+
000024B8  2CFC 20202020           1937                      MOVE.L  #$20202020, (A6)+
000024BE  2CFC 20202020           1938                      MOVE.L  #$20202020, (A6)+
000024C4                          1939  
000024C4  4CDF 7000               1940                      MOVEM.L (sp)+, A4-A6
000024C8  4E75                    1941                      RTS
000024CA                          1942  
000024CA  48E7 0008               1943  FLUSH_PRINT_BUFFER  MOVEM.L A4, -(sp)
000024CE  287C 0000257C           1944                      MOVEA.L #PRINT_BUFFER, A4
000024D4                          1945  
000024D4  28FC 20202020           1946                      MOVE.L  #$20202020, (A4)+
000024DA  28FC 20202020           1947                      MOVE.L  #$20202020, (A4)+
000024E0  28FC 20202020           1948                      MOVE.L  #$20202020, (A4)+
000024E6  28FC 20202020           1949                      MOVE.L  #$20202020, (A4)+
000024EC  28FC 20202020           1950                      MOVE.L  #$20202020, (A4)+
000024F2  4CDF 1000               1951                      MOVEM.L (sp)+, A4
000024F6  4E75                    1952                      RTS
000024F8                          1953  
000024F8  48E7 8008               1954  PRINT_STUFF         MOVEM.L     A4/D0, -(sp)
000024FC  1039 00002590           1955                      MOVE.B      PRINT_SIZE, D0
00002502  287C 0000257C           1956                      MOVEA.L     #PRINT_BUFFER, A4
00002508  B03C 0000               1957  PRINT_LOOP          CMP.B       #0, D0
0000250C  6700 0008               1958                      BEQ         PRINT_DONE
00002510  16DC                    1959                      MOVE.B      (A4)+, (A3)+
00002512  5300                    1960                      SUB.B       #1, D0
00002514  60F2                    1961                      BRA         PRINT_LOOP
00002516                          1962  
00002516  4CDF 1001               1963  PRINT_DONE          MOVEM.L     (sp)+, A4/D0
0000251A  4E75                    1964                      RTS
0000251C                          1965  
0000251C                          1966  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1967  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1968  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1969  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1970  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1971  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1972  * ------------------------------------------------- END SUBROUTINES ----------------------------------------------------------------
0000251C                          1973  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1974  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1975  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1976  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1977  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1978  * ----------------------------------------------------------------------------------------------------------------------------------
0000251C                          1979  
0000251C  6000 0002               1980  AFTER_MAIN_LOOP BRA     PROGRAM_END
00002520                          1981  
00002520  FFFF FFFF               1982  PROGRAM_END    SIMHALT             ; halt simulator
00002524                          1983  
00002524                          1984  * Put variables and constants here
00002524                          1985  
00002524                          1986  
00002524                          1987  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1988  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1989  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1990  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1991  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1992  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1993  * ------------------------------------------------ GLOBAL CONSTANTS ----------------------------------------------------------------
00002524                          1994  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1995  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1996  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1997  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1998  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          1999  * ----------------------------------------------------------------------------------------------------------------------------------
00002524                          2000  
00002524                          2001  
00002524                          2002  SIZE            DS.B    1
00002525                          2003  WEIRD_SIZE      DS.B    1
00002526                          2004  DIRECTION       DS.B    1
00002527                          2005  EA_MODE         DS.B    1
00002528                          2006  EA_REG          DS.B    1
00002529                          2007  SRC_MODE        DS.B    1
0000252A                          2008  SRC_REG         DS.B    1
0000252B                          2009  DEST_MODE       DS.B    1
0000252C                          2010  DEST_REG        DS.B    1
0000252D                          2011  ROTATE_IR       DS.B    1
0000252E                          2012  ROTATE_CR       DS.B    1
00002530                          2013  DISPLACEMENT    DS.W    1
00002532                          2014  CONDITION       DS.B    1
00002533                          2015  DATA            DS.B    1
00002534                          2016  
00002534                          2017  PERSONAL_SIZE_CONVENTION    DS.B    1
00002535                          2018  
00002536                          2019  SIZE_OUT        DS.L    1
0000253A                          2020  WEIRD_SIZE_OUT  DS.L    1
0000253E                          2021  DIRECTION_OUT   DS.B    1
00002540                          2022  EA_MODE_OUT     DS.L    3
0000254C                          2023  EA_REG_OUT      DS.B    1
0000254E                          2024  SRC_MODE_OUT    DS.L    3
0000255A                          2025  SRC_REG_OUT     DS.B    1
0000255C                          2026  DEST_MODE_OUT   DS.L    3
00002568                          2027  DEST_REG_OUT    DS.B    1
0000256A                          2028  ROTATE_IR_OUT   DS.L    1
0000256E                          2029  ROTATE_CR_OUT   DS.L    1
00002572                          2030  EXTRA_STUFF     DS.L    1
00002576                          2031  DATA_OUT        DS.B    1
00002578                          2032  DISPLACEMENT_OUT DS.L   1
0000257C                          2033  
0000257C                          2034  PRINT_BUFFER    DS.L    5
00002590                          2035  PRINT_SIZE      DS.B    1
00002591                          2036  
00002591                          2037  
00002591                          2038  
00002591                          2039   END     START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_ARRANGE_OUTPUT  181A
ADDA_MODE           17E2
ADDA_PROCESS        1804
ADDA_REG            17F4
ADDA_SIZE           17D0
ADDA_SRC_REG        17BA
ADDQ_ARRANGE_OUTPUT  14C8
ADDQ_DATA           1460
ADDQ_MODE           148C
ADDQ_PROCESS        14B2
ADDQ_REG            14A0
ADDQ_SIZE           1478
ADD_ARRANGE_OUTPUT  1732
ADD_DIR             16D6
ADD_MODE            16FA
ADD_PROCESS         171C
ADD_REG             170C
ADD_REG_FIRST       178C
ADD_SIZE            16E8
ADD_SRC_REG         16C0
AFTER_MAIN_LOOP     251C
AND_ARRANGE_OUTPUT  18E2
AND_DIR             1886
AND_MODE            18AA
AND_PROCESS         18CC
AND_REG             18BC
AND_REG_FIRST       193C
AND_SIZE            1898
AND_SRC_REG         1870
BCC_8_BITS          1C08
BCC_ARRANGE_OUTPUT  1BD4
BCC_CONDITION       1BA4
BCC_DISPLACEMENT    1BB8
BCC_DONE            1C90
BCC_EQ              1C60
BCC_HI              1C84
BCC_INVALID         1C58
BCC_LT              1C78
BCC_NE              1C6C
BCC_PROCESS         1BCA
BRA_8_BITS          1B8E
BRA_ARRANGE_OUTPUT  1B58
BRA_DISPLACEMENT    1B3E
BRA_PROCESS         1B4E
BRA_SKIP            2252
CLEAR_ALL           100E
CONDITION           2532
CONVERT_HEX_TO_STRING  23A8
CONVERT_HEX_TO_STRING_LOOP  23BE
CONVERT_LOOP        1036
CONVERT_ONE_HEX     23FC
CONVERT_ONE_HEX_NAN  2418
CONVERT_START_LOCATION  1020
CONVERT_STR_TO_HEX  1048
DATA                2533
DATA_OUT            2576
DECODE_ADD          16BC
DECODE_ADDA         17B6
DECODE_ADDQ         145C
DECODE_AND          186C
DECODE_BCC          1BA0
DECODE_BRA          1B3A
DECODE_CONDITION    1C1A
DECODE_DATA         231C
DECODE_DEST_DONE    1D4A
DECODE_DEST_MODE    1D02
DECODE_DEST_REG     2034
DECODE_DISPLACEMENT  222A
DECODE_DISPLACEMENT_DONE  2266
DECODE_DIVS         13DA
DECODE_EA_DONE      1EC8
DECODE_EA_MODE      1E80
DECODE_EA_REG       1FFE
DECODE_GROUP_4      12B2
DECODE_GROUP_5      1264
DECODE_GROUP_6      1302
DECODE_GROUP_8      1252
DECODE_GROUP_9      1276
DECODE_GROUP_C      129E
DECODE_GROUP_D      128A
DECODE_GROUP_MOVE   123E
DECODE_JSR          1AF0
DECODE_MOVE         131A
DECODE_MOVEA        1316
DECODE_MULS         1966
DECODE_NEG          1A6A
DECODE_NOT          19F4
DECODE_ONE_BIT_SIZE  226C
DECODE_OPCODE       11D8
DECODE_OPCODE_DONE  123C
DECODE_RTS          1AE0
DECODE_SRC_DONE     20B8
DECODE_SRC_MODE     2070
DECODE_SRC_REG      21EE
DECODE_SUB          150C
DECODE_SUBA         1606
DECODE_TWO_BIT_SIZE  22C2
DECODE_TWO_BIT_SIZE_DONE  22F2
DECODE_WEIRD_SIZE   1C96
DECODE_WEIRD_SIZE_DONE  1CC6
DEST_IMME_DATA_BYTE  1E44
DEST_IMME_DATA_LONG  1E64
DEST_IMME_DATA_WORD  1E54
DEST_MODE           252B
DEST_MODE_AREG_DIR  1D5C
DEST_MODE_AREG_INDIR  1D68
DEST_MODE_AREG_INDIR_DEC  1D94
DEST_MODE_AREG_INDIR_INC  1D7C
DEST_MODE_DIR_L     1DEE
DEST_MODE_DIR_W     1DCE
DEST_MODE_DREG      1D50
DEST_MODE_IMME_DATA  1E1A
DEST_MODE_INVALID   1D46
DEST_MODE_OUT       255C
DEST_MODE_SPECIAL   1DAC
DEST_REG            252C
DEST_REG_DONE       2062
DEST_REG_OUT        2568
DIRECTION           2526
DIRECTION_OUT       253E
DISPLACEMENT        2530
DISPLACEMENT_OUT    2578
DIVS_ARRANGE_OUTPUT  142C
DIVS_DEST_REG       13DE
DIVS_MODE           13F6
DIVS_PROCESS        141C
DIVS_REG            140A
DONE_CONVERT        242C
EA_IMME_DATA_BYTE   1FC2
EA_IMME_DATA_LONG   1FE2
EA_IMME_DATA_WORD   1FD2
EA_MODE             2527
EA_MODE_AREG_DIR    1EDA
EA_MODE_AREG_INDIR  1EE6
EA_MODE_AREG_INDIR_DEC  1F12
EA_MODE_AREG_INDIR_INC  1EFA
EA_MODE_DIR_L       1F6C
EA_MODE_DIR_W       1F4C
EA_MODE_DREG        1ECE
EA_MODE_IMME_DATA   1F98
EA_MODE_INVALID     1EC4
EA_MODE_OUT         2540
EA_MODE_SPECIAL     1F2A
EA_REG              2528
EA_REG_DONE         2026
EA_REG_OUT          254C
END_CONVERT_LOOP    1046
END_CONVERT_START_LOCATION  1030
END_SHIFT_START_ADDR  11AC
EXTRA_STUFF         2572
FLUSH_EA_MODES      2478
FLUSH_OUTPUT_BUFFER  242E
FLUSH_PRINT_BUFFER  24CA
HEX2STR_DONE        23F4
IDENT_OPCODE        11E4
INVALID_CHARACTER   10FE
INVALID_DEST_REG    205A
INVALID_EA_REG      201E
INVALID_HEX_CONVERT  2414
INVALID_OPCODE      1238
INVALID_SIZE        2290
INVALID_SRC_REG     2214
JSR_ARRANGE_OUTPUT  1B20
JSR_MODE            1AF4
JSR_PROCESS         1B16
JSR_REG             1B06
MAINLOOP_PRIME      11AE
MAIN_LOOP           11B4
MAIN_LOOP_END       11CC
MOVE_ARRANGE_OUTPUT  139E
MOVE_DEST_MODE      134E
MOVE_DEST_REG       1336
MOVE_MODE           1362
MOVE_PROCESS        1388
MOVE_REG            1376
MOVE_SIZE           131E
MULS_ARRANGE_OUTPUT  19B2
MULS_MODE           1980
MULS_PROCESS        19A2
MULS_REG            1992
MULS_SRC_REG        196A
NEG_ARRANGE_OUTPUT  1AB2
NEG_MODE            1A80
NEG_PROCESS         1AA2
NEG_REG             1A92
NEG_SIZE            1A6E
NOT_ARRANGE_OUTPUT  1A3C
NOT_MODE            1A0A
NOT_PROCESS         1A2C
NOT_REG             1A1C
NOT_SIZE            19F8
ONEBIT_SIZE_DONE    2298
PERSONAL_SIZE_CONVENTION  2534
PRINT_BCC           1C10
PRINT_BRA           1B96
PRINT_BUFFER        257C
PRINT_DEST_MODE     237E
PRINT_DONE          2516
PRINT_EA_MODE       2354
PRINT_LOOP          2508
PRINT_SIZE          2590
PRINT_STUFF         24F8
PROGRAMLOOP         1000
PROGRAM_END         2520
READ_AND_PRINT_WORD  233C
ROTATE_CR           252E
ROTATE_CR_OUT       256E
ROTATE_IR           252D
ROTATE_IR_OUT       256A
SHIFT_START_ADDR    11A2
SIZE                2524
SIZE_BYTE           22F8
SIZE_INVALID        22EE
SIZE_LONG           2310
SIZE_LONG_ONE       22B0
SIZE_OUT            2536
SIZE_WORD           2304
SIZE_WORD_ONE       229E
SRC_IMME_DATA_BYTE  21B2
SRC_IMME_DATA_LONG  21D2
SRC_IMME_DATA_WORD  21C2
SRC_MODE            2529
SRC_MODE_AREG_DIR   20CA
SRC_MODE_AREG_INDIR  20D6
SRC_MODE_AREG_INDIR_DEC  2102
SRC_MODE_AREG_INDIR_INC  20EA
SRC_MODE_DIR_L      215C
SRC_MODE_DIR_W      213C
SRC_MODE_DREG       20BE
SRC_MODE_IMME_DATA  2188
SRC_MODE_INVALID    20B4
SRC_MODE_OUT        254E
SRC_MODE_SPECIAL    211A
SRC_REG             252A
SRC_REG_DONE        221C
SRC_REG_OUT         255A
START               1000
STR_TO_HEX_A        1166
STR_TO_HEX_B        1170
STR_TO_HEX_C        117A
STR_TO_HEX_D        1184
STR_TO_HEX_E        118E
STR_TO_HEX_EIGHT    1152
STR_TO_HEX_F        1198
STR_TO_HEX_FIVE     1134
STR_TO_HEX_FOUR     112A
STR_TO_HEX_NINE     115C
STR_TO_HEX_ONE      110C
STR_TO_HEX_SEVEN    1148
STR_TO_HEX_SIX      113E
STR_TO_HEX_THREE    1120
STR_TO_HEX_TWO      1116
STR_TO_HEX_ZERO     1102
SUBA_ARRANGE_OUTPUT  166A
SUBA_MODE           1632
SUBA_PROCESS        1654
SUBA_REG            1644
SUBA_SIZE           1620
SUBA_SRC_REG        160A
SUB_ARRANGE_OUTPUT  1582
SUB_DIR             1526
SUB_MODE            154A
SUB_PROCESS         156C
SUB_REG             155C
SUB_REG_FIRST       15DC
SUB_SIZE            1538
SUB_SRC_REG         1510
TRANSLATE_TO_8      2336
VALID_DEST_REG      2068
VALID_EA_REG        202C
VALID_SRC_REG       2222
WEIRD_SIZE          2525
WEIRD_SIZE_BYTE     1CCC
WEIRD_SIZE_INVALID  1CC2
WEIRD_SIZE_LONG     1CF0
WEIRD_SIZE_OUT      253A
WEIRD_SIZE_WORD     1CDE
