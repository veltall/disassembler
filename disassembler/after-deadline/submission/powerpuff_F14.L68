00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 12/10/2014 11:42:19 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  * Put program code here
00001000                            11  
00001000                            12  
00001000  6100 000C                 13  PROGRAMLOOP BSR     CLEAR_ALL   * ---- clear registers
00001004                            14  
00001004                            15              * -- read string of starting address
00001004  6100 001A                 16              BSR     CONVERT_START_LOCATION
00001008                            17              * -- post-condition: the address as specified by the user input is stored in D4
00001008                            18  
00001008  594B                      19              SUBA.W  #4, A3
0000100A  6000 01A2                 20              BRA     MAINLOOP_PRIME
0000100E                            21  
0000100E  4240                      22  CLEAR_ALL   CLR     D0
00001010  4241                      23              CLR     D1
00001012  4242                      24              CLR     D2
00001014  4243                      25              CLR     D3
00001016  4244                      26              CLR     D4
00001018  4245                      27              CLR     D5
0000101A  4246                      28              CLR     D6
0000101C  4247                      29              CLR     D7
0000101E  4E75                      30              RTS
00001020                            31  
00001020  4241                      32  CONVERT_START_LOCATION  CLR     D1
00001022  227C 00007000             33                          MOVEA.L #$7000,A1
00001028  103C 0002                 34                          MOVE.B  #2,D0   * --- read NULL-terminated string
0000102C  4E4F                      35                          TRAP    #15     * --- read string into (A1)
0000102E  2649                      36                          MOVEA.L A1,A3   * --- make a copy to preserve original input
00001030  6100 0004                 37  END_CONVERT_START_LOCATION  BSR     CONVERT_LOOP
00001034  4E75                      38                          RTS
00001036                            39  
00001036                            40  * ---------------- convert string into hex
00001036                            41  * -- pre-condition:     (A3) points to the top of the STR stack
00001036                            42  
00001036  B27C 0000                 43  CONVERT_LOOP            CMP.W   #0,D1
0000103A  6700 000A                 44                          BEQ     END_CONVERT_LOOP        * -- done converting whole string
0000103E  6100 0008                 45                          BSR     CONVERT_STR_TO_HEX
00001042  5301                      46                          SUB.B   #1,D1
00001044  60F0                      47                          BRA     CONVERT_LOOP
00001046  4E75                      48  END_CONVERT_LOOP        RTS     * -- return to main flow
00001048                            49  
00001048                            50  * -------------------------------------------------------------------------
00001048                            51  * ------- SUBROUTINE Convert ONE Character into ONE HEX value -------------
00001048                            52  
00001048  161B                      53  CONVERT_STR_TO_HEX      MOVE.B  (A3)+,D3    * -- pop one character
0000104A  B63C 0030                 54                          CMP.B   #$30,D3     * -- #$30 is the character '0'
0000104E  6700 00B2                 55                          BEQ     STR_TO_HEX_ZERO
00001052                            56  
00001052  B63C 0031                 57                          CMP.B   #$31,D3
00001056  6700 00B4                 58                          BEQ     STR_TO_HEX_ONE
0000105A                            59                          
0000105A  B63C 0032                 60                          CMP.B   #$32,D3
0000105E  6700 00B6                 61                          BEQ     STR_TO_HEX_TWO
00001062                            62                          
00001062  B63C 0033                 63                          CMP.B   #$33,D3
00001066  6700 00B8                 64                          BEQ     STR_TO_HEX_THREE
0000106A                            65                          
0000106A  B63C 0034                 66                          CMP.B   #$34,D3
0000106E  6700 00BA                 67                          BEQ     STR_TO_HEX_FOUR
00001072                            68                          
00001072  B63C 0035                 69                          CMP.B   #$35,D3
00001076  6700 00BC                 70                          BEQ     STR_TO_HEX_FIVE
0000107A                            71                          
0000107A  B63C 0036                 72                          CMP.B   #$36,D3
0000107E  6700 00BE                 73                          BEQ     STR_TO_HEX_SIX
00001082                            74                          
00001082  B63C 0037                 75                          CMP.B   #$37,D3
00001086  6700 00C0                 76                          BEQ     STR_TO_HEX_SEVEN
0000108A                            77                          
0000108A  B63C 0038                 78                          CMP.B   #$38,D3
0000108E  6700 00C2                 79                          BEQ     STR_TO_HEX_EIGHT
00001092                            80                          
00001092  B63C 0039                 81                          CMP.B   #$39,D3             * -- #$39 is the character '9'
00001096  6700 00C4                 82                          BEQ     STR_TO_HEX_NINE
0000109A                            83                          
0000109A  B63C 0041                 84                          CMP.B   #$41,D3             * -- #$41 is the character 'A'
0000109E  6700 00C6                 85                          BEQ     STR_TO_HEX_A
000010A2  B63C 0061                 86                          CMP.B   #$61,D3             * -- #$61 is the character 'a'
000010A6  6700 00BE                 87                          BEQ     STR_TO_HEX_A
000010AA                            88  
000010AA  B63C 0042                 89                          CMP.B   #$42,D3
000010AE  6700 00C0                 90                          BEQ     STR_TO_HEX_B
000010B2  B63C 0062                 91                          CMP.B   #$62,D3
000010B6  6700 00B8                 92                          BEQ     STR_TO_HEX_B
000010BA                            93                          
000010BA  B63C 0043                 94                          CMP.B   #$43,D3
000010BE  6700 00BA                 95                          BEQ     STR_TO_HEX_C
000010C2  B63C 0063                 96                          CMP.B   #$63,D3
000010C6  6700 00B2                 97                          BEQ     STR_TO_HEX_C
000010CA                            98  
000010CA  B63C 0044                 99                          CMP.B   #$44,D3
000010CE  6700 00B4                100                          BEQ     STR_TO_HEX_D
000010D2  B63C 0064                101                          CMP.B   #$64,D3
000010D6  6700 00AC                102                          BEQ     STR_TO_HEX_D
000010DA                           103                          
000010DA  B63C 0045                104                          CMP.B   #$45,D3
000010DE  6700 00AE                105                          BEQ     STR_TO_HEX_E
000010E2  B63C 0065                106                          CMP.B   #$65,D3
000010E6  6700 00A6                107                          BEQ     STR_TO_HEX_E
000010EA                           108                          
000010EA  B63C 0046                109                          CMP.B   #$46,D3
000010EE  6700 00A8                110                          BEQ     STR_TO_HEX_F
000010F2  B63C 0066                111                          CMP.B   #$66,D3
000010F6  6700 00A0                112                          BEQ     STR_TO_HEX_F
000010FA                           113  
000010FA  6000 0002                114                          BRA     INVALID_CHARACTER
000010FE                           115  
000010FE                           116  * --------------- Conversion definitions ------------
000010FE                           117  
000010FE  4E71                     118  INVALID_CHARACTER       NOP              * -- skip invalid character
00001100  4E75                     119                          RTS
00001102  7600                     120  STR_TO_HEX_ZERO         MOVE.L  #$0,D3   * -- push HEX 0 into HEX stack
00001104  6100 009C                121                          BSR     SHIFT_START_ADDR
00001108  D883                     122                          ADD.L   D3,D4
0000110A  4E75                     123                          RTS
0000110C  7601                     124  STR_TO_HEX_ONE          MOVE.L  #$1,D3   * -- push HEX 1 into HEX stack
0000110E  6100 0092                125                          BSR     SHIFT_START_ADDR
00001112  D883                     126                          ADD.L   D3,D4
00001114  4E75                     127                          RTS
00001116  7602                     128  STR_TO_HEX_TWO          MOVE.L  #$2,D3   * -- push HEX 2 into HEX stack
00001118  6100 0088                129                          BSR     SHIFT_START_ADDR
0000111C  D883                     130                          ADD.L   D3,D4
0000111E  4E75                     131                          RTS
00001120  7603                     132  STR_TO_HEX_THREE        MOVE.L  #$3,D3   * -- push HEX 3 into HEX stack
00001122  6100 007E                133                          BSR     SHIFT_START_ADDR
00001126  D883                     134                          ADD.L   D3,D4
00001128  4E75                     135                          RTS
0000112A  7604                     136  STR_TO_HEX_FOUR         MOVE.L  #$4,D3   * -- push HEX 4 into HEX stack
0000112C  6100 0074                137                          BSR     SHIFT_START_ADDR
00001130  D883                     138                          ADD.L   D3,D4
00001132  4E75                     139                          RTS
00001134  7605                     140  STR_TO_HEX_FIVE         MOVE.L  #$5,D3   * -- push HEX 5 into HEX stack
00001136  6100 006A                141                          BSR     SHIFT_START_ADDR
0000113A  D883                     142                          ADD.L   D3,D4
0000113C  4E75                     143                          RTS
0000113E  7606                     144  STR_TO_HEX_SIX          MOVE.L  #$6,D3   * -- push HEX 6 into HEX stack
00001140  6100 0060                145                          BSR     SHIFT_START_ADDR
00001144  D883                     146                          ADD.L   D3,D4
00001146  4E75                     147                          RTS
00001148  7607                     148  STR_TO_HEX_SEVEN        MOVE.L  #$7,D3   * -- push HEX 7 into HEX stack
0000114A  6100 0056                149                          BSR     SHIFT_START_ADDR
0000114E  D883                     150                          ADD.L   D3,D4
00001150  4E75                     151                          RTS
00001152  7608                     152  STR_TO_HEX_EIGHT        MOVE.L  #$8,D3   * -- push HEX 8 into HEX stack
00001154  6100 004C                153                          BSR     SHIFT_START_ADDR
00001158  D883                     154                          ADD.L   D3,D4
0000115A  4E75                     155                          RTS
0000115C  7609                     156  STR_TO_HEX_NINE         MOVE.L  #$9,D3   * -- push HEX 9 into HEX stack
0000115E  6100 0042                157                          BSR     SHIFT_START_ADDR
00001162  D883                     158                          ADD.L   D3,D4
00001164  4E75                     159                          RTS
00001166  760A                     160  STR_TO_HEX_A            MOVE.L  #$A,D3   * -- push HEX A into HEX stack
00001168  6100 0038                161                          BSR     SHIFT_START_ADDR
0000116C  D883                     162                          ADD.L   D3,D4
0000116E  4E75                     163                          RTS
00001170  760B                     164  STR_TO_HEX_B            MOVE.L  #$B,D3   * -- push HEX B into HEX stack
00001172  6100 002E                165                          BSR     SHIFT_START_ADDR
00001176  D883                     166                          ADD.L   D3,D4
00001178  4E75                     167                          RTS
0000117A  760C                     168  STR_TO_HEX_C            MOVE.L  #$C,D3   * -- push HEX C into HEX stack
0000117C  6100 0024                169                          BSR     SHIFT_START_ADDR
00001180  D883                     170                          ADD.L   D3,D4
00001182  4E75                     171                          RTS
00001184  760D                     172  STR_TO_HEX_D            MOVE.L  #$D,D3   * -- push HEX D into HEX stack
00001186  6100 001A                173                          BSR     SHIFT_START_ADDR
0000118A  D883                     174                          ADD.L   D3,D4
0000118C  4E75                     175                          RTS
0000118E  760E                     176  STR_TO_HEX_E            MOVE.L  #$E,D3   * -- push HEX E into HEX stack
00001190  6100 0010                177                          BSR     SHIFT_START_ADDR
00001194  D883                     178                          ADD.L   D3,D4
00001196  4E75                     179                          RTS
00001198  760F                     180  STR_TO_HEX_F            MOVE.L  #$F,D3   * -- push HEX F into HEX stack
0000119A  6100 0006                181                          BSR     SHIFT_START_ADDR
0000119E  D883                     182                          ADD.L   D3,D4
000011A0  4E75                     183                          RTS
000011A2                           184  
000011A2  4247                     185  SHIFT_START_ADDR        CLR     D7
000011A4  3E01                     186                          MOVE.W  D1,D7
000011A6  5347                     187                          SUB.W   #1,D7
000011A8  E547                     188                          ASL     #2,D7   * -- D7 = (D1 - 1) * 4
000011AA  EFA3                     189                          ASL.L   D7,D3
000011AC  4E75                     190  END_SHIFT_START_ADDR    RTS
000011AE                           191  
000011AE                           192  * ---------------- load starting hex into A6
000011AE  2C44                     193  MAINLOOP_PRIME          MOVEA.L D4,A6     * -- address cannot be longer than LONG-size
000011B0  6000 0002                194                          BRA     MAIN_LOOP
000011B4                           195  
000011B4                           196  * ---------------- read one word and decode
000011B4  BC7C FFFF                197  MAIN_LOOP    CMP.W      #$FFFF, D6
000011B8  6700 0CA0                198               BEQ        AFTER_MAIN_LOOP
000011BC  4EB9 00001D6C            199               JSR        FLUSH_OUTPUT_BUFFER
000011C2                           200  
000011C2                           201      * ----- read data from (A6)+ into D6
000011C2  4246                     202      CLR         D6
000011C4  324B                     203      MOVEA.W     A3, A1
000011C6  3C1E                     204      MOVE.W      (A6)+, D6
000011C8                           205      
000011C8                           206      * ----- process data in D6
000011C8  6000 000E                207      BRA     DECODE_OPCODE
000011CC                           208  
000011CC  16FC 0000                209  MAIN_LOOP_END   MOVE.B  #0, (A3)+
000011D0  103C 000D                210                  MOVE.B  #13, D0
000011D4  4E4F                     211                  TRAP    #15    
000011D6                           212         
000011D6  60DC                     213                  BRA MAIN_LOOP
000011D8                           214  
000011D8                           215  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           216  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           217  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           218  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           219  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           220  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           221  * ------------------------------------------------------- OP CODE ------------------------------------------------------------------
000011D8                           222  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           223  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           224  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           225  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           226  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           227  * ----------------------------------------------------------------------------------------------------------------------------------
000011D8                           228  
000011D8                           229  
000011D8                           230  * -- Preconditions: The instruction as read from memory is stored in D6
000011D8                           231  
000011D8                           232  
000011D8                           233  * -- Preconditions: The instruction as read from memory is stored in D6
000011D8                           234  
000011D8  3A06                     235  DECODE_OPCODE       MOVE.W      D6, D5                  * -- make copy
000011DA  CA7C F000                236                      AND.W       #$F000, D5              * -- mask opcode
000011DE  123C 000C                237                      MOVE.B      #12, D1
000011E2  E2AD                     238                      LSR.L       D1, D5 
000011E4                           239  
000011E4  BA3C 0009                240  IDENT_OPCODE        CMP.B       #%1001, D5
000011E8  6700 006C                241                      BEQ         DECODE_GROUP_9
000011EC  BA3C 0005                242                      CMP.B       #%0101, D5
000011F0  6700 0052                243                      BEQ         DECODE_GROUP_5
000011F4  BA3C 0008                244                       CMP.B       #%1000, D5
000011F8  6700 0038                245                      BEQ         DECODE_GROUP_8
000011FC  BA3C 0001                246                      CMP.B       #%0001, D5
00001200  6700 001C                247                      BEQ         DECODE_GROUP_MOVE
00001204  BA3C 0002                248                      CMP.B       #%0010, D5
00001208  6700 0014                249                      BEQ         DECODE_GROUP_MOVE
0000120C  BA3C 0003                250                      CMP.B       #%0011, D5
00001210  6700 000C                251                      BEQ         DECODE_GROUP_MOVE
00001214  6000 0002                252                      BRA         INVALID_OPCODE
00001218                           253  
00001218  6000 0002                254  INVALID_OPCODE      BRA         DECODE_OPCODE_DONE
0000121C                           255  
0000121C  60AE                     256  DECODE_OPCODE_DONE  BRA         MAIN_LOOP_END
0000121E                           257  
0000121E  3A06                     258  DECODE_GROUP_MOVE   MOVE.W      D6, D5
00001220  CA7C 01C0                259                      AND.W       #$01C0, D5
00001224  EC4D                     260                      LSR.W       #6, D5
00001226  BA3C 0001                261                      CMP.B       #%001, D5
0000122A  6700 003E                262                      BEQ         DECODE_MOVEA
0000122E  6000 003C                263                      BRA         DECODE_MOVE
00001232                           264  
00001232  3A06                     265  DECODE_GROUP_8      MOVE.W      D6, D5
00001234  CA7C 01C0                266                      AND.W       #$01C0, D5
00001238  EC4D                     267                      LSR.W       #6, D5
0000123A  BA3C 0007                268                      CMP.B       #%111, D5
0000123E  6700 00EC                269                      BEQ         DECODE_DIVS
00001242  60D4                     270                      BRA         INVALID_OPCODE 
00001244                           271  
00001244  3A06                     272  DECODE_GROUP_5      MOVE.W      D6, D5
00001246  CA7C 0100                273                      AND.W       #$0100, D5
0000124A  E04D                     274                      LSR.W       #8, D5
0000124C  BA3C 0000                275                      CMP.B       #0, D5
00001250  6700 015C                276                      BEQ         DECODE_ADDQ
00001254  60C2                     277                      BRA         INVALID_OPCODE  
00001256                           278  
00001256  3A06                     279  DECODE_GROUP_9      MOVE.W      D6, D5
00001258  CA7C 00C0                280                      AND.W       #$00C0, D5
0000125C  EC4D                     281                      LSR.W       #6, D5
0000125E  BA3C 0003                282                      CMP.B       #%11, D5
00001262  6700 02FC                283                      BEQ         DECODE_SUBA
00001266  6000 01F6                284                      BRA         DECODE_SUB                                                         
0000126A                           285  
0000126A                           286  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           287  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           288  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           289  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           290  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           291  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           292  * --------------------------------------------------- END OP CODE ------------------------------------------------------------------
0000126A                           293  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           294  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           295  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           296  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           297  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           298  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           299  
0000126A                           300  
0000126A                           301  
0000126A                           302  
0000126A                           303  
0000126A                           304  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           305  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           306  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           307  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           308  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           309  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           310  * --------------------------------------------------- EFFECTIVE ADDRESS ------------------------------------------------------------
0000126A                           311  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           312  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           313  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           314  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           315  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           316  * ----------------------------------------------------------------------------------------------------------------------------------
0000126A                           317  
0000126A  60AC                     318  DECODE_MOVEA    BRA INVALID_OPCODE
0000126C                           319  
0000126C  6000 0002                320  DECODE_MOVE  BRA     MOVE_SIZE
00001270                           321              
00001270                           322              * -- chop the bits
00001270                           323              * -- 1/ bits 6 and 7
00001270  2A06                     324  MOVE_SIZE   MOVE.L  D6, D5
00001272  CABC 00003000            325              AND.L   #%0011000000000000, D5   
00001278  123C 000C                326              MOVE.B  #12, D1
0000127C  E2AD                     327              LSR.L   D1, D5                  * -- D5 contains the ss info
0000127E  13C5 00001E63            328              MOVE.B  D5, WEIRD_SIZE
00001284  6000 0002                329              BRA     MOVE_DEST_REG
00001288                           330  
00001288  2A06                     331  MOVE_DEST_REG   MOVE.L  D6, D5
0000128A  CABC 00000E00            332              AND.L   #%0000111000000000, D5   
00001290  123C 0009                333              MOVE.B  #9, D1
00001294  E2AD                     334              LSR.L   D1, D5                  * -- D5 contains the ss info
00001296  13C5 00001E6A            335              MOVE.B  D5, DEST_REG
0000129C  6000 0002                336              BRA     MOVE_DEST_MODE    
000012A0                           337  
000012A0  2A06                     338  MOVE_DEST_MODE  MOVE.L  D6, D5
000012A2  CABC 000001C0            339              AND.L   #%0000000111000000, D5   
000012A8  EC8D                     340              LSR.L   #6, D5                  * -- D5 contains the ss info
000012AA  13C5 00001E69            341              MOVE.B  D5, DEST_MODE
000012B0  6000 0002                342              BRA     MOVE_MODE                      
000012B4                           343  
000012B4  2A06                     344  MOVE_MODE    MOVE.L  D6, D5
000012B6  CABC 00000038            345              AND.L   #%0000000000111000, D5   * -- bits 3, 4, 5
000012BC  E68D                     346              LSR.L   #3, D5
000012BE  13C5 00001E65            347              MOVE.B  D5, EA_MODE
000012C4  6000 0002                348              BRA     MOVE_REG
000012C8                           349  
000012C8  2A06                     350  MOVE_REG     MOVE.L  D6, D5
000012CA  CABC 00000007            351              AND.L   #%0000000000000111, D5
000012D0  13C5 00001E66            352              MOVE.B  D5, EA_REG
000012D6  6000 0002                353              BRA     MOVE_PROCESS
000012DA                           354  
000012DA  4EB9 00001616            355  MOVE_PROCESS JSR     DECODE_WEIRD_SIZE
000012E0  4EB9 00001800            356              JSR     DECODE_EA_MODE
000012E6  4EB9 00001682            357              JSR     DECODE_DEST_MODE
000012EC  6000 0002                358              BRA     MOVE_ARRANGE_OUTPUT
000012F0                           359  
000012F0  16FC 004D                360  MOVE_ARRANGE_OUTPUT     MOVE.B            #'M', (A3)+
000012F4  16FC 004F                361                          MOVE.B            #'O', (A3)+
000012F8  16FC 0056                362                          MOVE.B            #'V', (A3)+
000012FC  16FC 0045                363                          MOVE.B            #'E', (A3)+
00001300  23F9 00001E76 00001EB4   364                          MOVE.L            WEIRD_SIZE_OUT, PRINT_BUFFER
0000130A  13FC 0002 00001EC8       365                          MOVE.B            #2, PRINT_SIZE
00001312  4EB9 00001E36            366                          JSR               PRINT_STUFF
00001318                           367  
00001318  4EB9 00001C92            368                          JSR               PRINT_EA_MODE
0000131E  16FC 002C                369                          MOVE.B            #',', (A3)+
00001322  4EB9 00001CBC            370                          JSR               PRINT_DEST_MODE
00001328                           371  
00001328  6000 FEA2                372                          BRA               MAIN_LOOP_END
0000132C                           373  
0000132C                           374  
0000132C                           375  ********************************** DIVS
0000132C                           376  
0000132C  6000 0002                377  DECODE_DIVS  BRA     DIVS_DEST_REG
00001330                           378              
00001330                           379              * -- chop the bits
00001330                           380              * -- 1/ bits 6 and 7
00001330  2A06                     381  DIVS_DEST_REG   MOVE.L  D6, D5
00001332  CABC 00000E00            382              AND.L   #%0000111000000000, D5   
00001338  123C 0009                383              MOVE.B  #9, D1
0000133C  E2AD                     384              LSR.L   D1, D5                   * -- D5 contains the ss info
0000133E  13C5 00001E6A            385              MOVE.B  D5, DEST_REG
00001344  6000 0002                386              BRA     DIVS_MODE
00001348                           387  
00001348  2A06                     388  DIVS_MODE    MOVE.L  D6, D5
0000134A  CABC 00000038            389              AND.L   #%0000000000111000, D5   * -- bits 3, 4, 5
00001350  E68D                     390              LSR.L   #3, D5
00001352  13C5 00001E65            391              MOVE.B  D5, EA_MODE
00001358  6000 0002                392              BRA     DIVS_REG
0000135C                           393  
0000135C  2A06                     394  DIVS_REG     MOVE.L  D6, D5
0000135E  CABC 00000007            395              AND.L   #%0000000000000111, D5
00001364                           396  
00001364  13C5 00001E66            397              MOVE.B  D5, EA_REG
0000136A  6000 0002                398              BRA     DIVS_PROCESS
0000136E                           399  
0000136E  4EB9 000019B4            400  DIVS_PROCESS      JSR         DECODE_DEST_REG
00001374  4EB9 00001800            401                    JSR         DECODE_EA_MODE
0000137A  6000 0002                402                    BRA         DIVS_ARRANGE_OUTPUT
0000137E                           403  
0000137E  16FC 0044                404  DIVS_ARRANGE_OUTPUT            MOVE.B  #'D',(A3)+
00001382  16FC 0049                405              MOVE.B  #'I',(A3)+
00001386  16FC 0056                406              MOVE.B  #'V',(A3)+
0000138A  16FC 0053                407              MOVE.B  #'S',(A3)+
0000138E  16FC 002E                408              MOVE.B  #'.',(A3)+
00001392  16FC 0057                409              MOVE.B  #'W',(A3)+
00001396  4EB9 00001C92            410              JSR     PRINT_EA_MODE
0000139C  16FC 002C                411              MOVE.B  #',',(A3)+
000013A0  16FC 0044                412              MOVE.B  #'D',(A3)+
000013A4                           413  *            MOVE.L  DEST_REG_OUT, PRINT_BUFFER
000013A4                           414  *            MOVE.L  #1, PRINT_SIZE
000013A4                           415  *            JSR     PRINT_STUFF
000013A4  16F9 00001EA4            416              MOVE.B  DEST_REG_OUT, (A3)+
000013AA  6000 FE20                417              BRA     MAIN_LOOP_END
000013AE                           418  
000013AE                           419  ***************************** END DIVS                      
000013AE                           420  
000013AE                           421  ******************************START ADDQ
000013AE                           422  
000013AE  6000 0002                423  DECODE_ADDQ  BRA     ADDQ_DATA
000013B2                           424              
000013B2                           425   
000013B2  2A06                     426  ADDQ_DATA   MOVE.L  D6, D5
000013B4  CABC 00000E00            427              AND.L   #%0000111000000000, D5   
000013BA  123C 0009                428              MOVE.B  #9, D1
000013BE  E2AD                     429              LSR.L   D1, D5                   * -- D5 contains the ss info
000013C0  13C5 00001E70            430              MOVE.B  D5, DATA
000013C6  6000 0002                431              BRA     ADDQ_SIZE
000013CA                           432  
000013CA                           433  
000013CA  2A06                     434  ADDQ_SIZE   MOVE.L  D6, D5
000013CC  CABC 000000C0            435              AND.L   #%0000000011000000, D5   
000013D2  EC8D                     436              LSR.L   #6, D5                  * -- D5 contains the ss info
000013D4  13C5 00001E62            437              MOVE.B  D5, SIZE
000013DA  6000 0002                438              BRA     ADDQ_MODE
000013DE                           439  
000013DE  2A06                     440  ADDQ_MODE    MOVE.L  D6, D5
000013E0  CABC 00000038            441              AND.L   #%0000000000111000, D5   * -- bits 3, 4, 5
000013E6  E68D                     442              LSR.L   #3, D5
000013E8  13C5 00001E65            443              MOVE.B  D5, EA_MODE
000013EE  6000 0002                444              BRA     ADDQ_REG
000013F2                           445  
000013F2  2A06                     446  ADDQ_REG     MOVE.L  D6, D5
000013F4  CABC 00000007            447              AND.L   #%0000000000000111, D5
000013FA                           448  
000013FA  13C5 00001E66            449              MOVE.B  D5, EA_REG
00001400  6000 0002                450              BRA     ADDQ_PROCESS
00001404                           451  
00001404  4EB9 00001C00            452  ADDQ_PROCESS JSR     DECODE_TWO_BIT_SIZE     * -- ADDQ supports byte, word, and long so it needs
0000140A                           453                                              * -- 2 bits for SIZE
0000140A  4EB9 00001C5A            454               JSR    DECODE_DATA
00001410  4EB9 00001800            455              JSR     DECODE_EA_MODE
00001416  6000 0002                456              BRA     ADDQ_ARRANGE_OUTPUT            
0000141A                           457              
0000141A                           458                          
0000141A  16FC 0041                459  ADDQ_ARRANGE_OUTPUT            MOVE.B  #'A',(A3)+
0000141E  16FC 0044                460              MOVE.B  #'D',(A3)+
00001422  16FC 0044                461              MOVE.B  #'D',(A3)+
00001426  16FC 0051                462              MOVE.B  #'Q',(A3)+
0000142A  23F9 00001E72 00001EB4   463              MOVE.L  SIZE_OUT, PRINT_BUFFER
00001434  13FC 0002 00001EC8       464              MOVE.B  #2, PRINT_SIZE
0000143C  4EB9 00001E36            465              JSR     PRINT_STUFF
00001442                           466  
00001442  16FC 0023                467              MOVE.B  #'#',(A3)+
00001446  16FC 0024                468              MOVE.B  #'$',(A3)+
0000144A  16F9 00001EB2            469              MOVE.B  DATA_OUT, (A3)+
00001450  16FC 002C                470              MOVE.B  #',',(A3)+
00001454  4EB9 00001C92            471              JSR     PRINT_EA_MODE
0000145A  6000 FD70                472              BRA     MAIN_LOOP_END
0000145E                           473  
0000145E                           474  ************************* END ADDQ **************
0000145E                           475  
0000145E                           476  ************************** START SUB**************
0000145E  6000 0002                477  DECODE_SUB  BRA     SUB_SRC_REG
00001462                           478              
00001462                           479              * -- chop the bits
00001462                           480              * -- 1/ bits 6 SUB 7
00001462                           481  
00001462  2A06                     482  SUB_SRC_REG   MOVE.L  D6, D5
00001464  CA7C 0E00                483              AND.W   #%0000111000000000, D5   
00001468  123C 0009                484              MOVE.B  #9, D1
0000146C  E2AD                     485              LSR.L   D1, D5                 * -- D5 contains the ss info
0000146E  13FC 0000 00001E68       486              MOVE.B  #0, SRC_REG      * -- CLEAR SRC_REG
00001476  13C5 00001E68            487              MOVE.B  D5, SRC_REG
0000147C  6000 0002                488              BRA     SUB_DIR
00001480                           489  
00001480  2A06                     490  SUB_DIR     MOVE.L  D6, D5
00001482  CA7C 0100                491              AND.W   #%0000000100000000, D5   
00001486  E08D                     492              LSR.L   #8, D5                  * -- D5 contains the ss info
00001488  13C5 00001E64            493              MOVE.B  D5, DIRECTION
0000148E  6000 0002                494              BRA     SUB_SIZE
00001492                           495  
00001492  2A06                     496  SUB_SIZE    MOVE.L  D6, D5
00001494  CA7C 00C0                497              AND.W   #%0000000011000000, D5   
00001498  EC8D                     498              LSR.L   #6, D5                  * -- D5 contains the ss info
0000149A  13C5 00001E62            499              MOVE.B  D5, SIZE
000014A0  6000 0002                500              BRA     SUB_MODE
000014A4                           501  
000014A4  2A06                     502  SUB_MODE    MOVE.L  D6, D5
000014A6  CA7C 0038                503              AND.W   #%0000000000111000, D5   * -- bits 3, 4, 5
000014AA  E68D                     504              LSR.L   #3, D5
000014AC  13C5 00001E65            505              MOVE.B  D5, EA_MODE
000014B2  6000 0002                506              BRA     SUB_REG
000014B6                           507  
000014B6  2A06                     508  SUB_REG     MOVE.L  D6, D5
000014B8  CA7C 0007                509              AND.W   #%0000000000000111, D5
000014BC                           510  
000014BC  13C5 00001E66            511              MOVE.B  D5, EA_REG
000014C2  6000 0002                512              BRA     SUB_PROCESS
000014C6                           513  
000014C6  4EB9 00001B6E            514  SUB_PROCESS JSR         DECODE_SRC_REG
000014CC  4EB9 00001C00            515           JSR         DECODE_TWO_BIT_SIZE
000014D2  4EB9 00001800            516              JSR         DECODE_EA_MODE
000014D8  6000 0002                517               BRA         SUB_ARRANGE_OUTPUT                       * -- 2 bits for SIZ
000014DC                           518              
000014DC                           519              
000014DC  16FC 0053                520  SUB_ARRANGE_OUTPUT            MOVE.B  #'S',(A3)+
000014E0  16FC 0055                521              MOVE.B  #'U',(A3)+
000014E4  16FC 0042                522              MOVE.B  #'B',(A3)+
000014E8  23F9 00001E72 00001EB4   523              MOVE.L  SIZE_OUT, PRINT_BUFFER
000014F2  13FC 0002 00001EC8       524              MOVE.B  #2, PRINT_SIZE
000014FA  4EB9 00001E36            525              JSR     PRINT_STUFF
00001500                           526              
00001500  0C39 0001 00001E64       527              CMP.B   #1,DIRECTION
00001508  6700 002C                528              BEQ     REG_FIRST
0000150C  4EB9 00001C92            529              JSR     PRINT_EA_MODE
00001512  16FC 002C                530              MOVE.B  #',',(A3)+
00001516  16FC 0044                531              MOVE.B  #'D',(A3)+
0000151A  23F9 00001E96 00001EB4   532              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
00001524  13FC 0001 00001EC8       533              MOVE.B  #1, PRINT_SIZE
0000152C  4EB9 00001E36            534              JSR     PRINT_STUFF
00001532  6000 FC98                535              BRA     MAIN_LOOP_END
00001536                           536            
00001536                           537              
00001536  16FC 0044                538  REG_FIRST   MOVE.B  #'D',(A3)+
0000153A  23F9 00001E96 00001EB4   539              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
00001544  13FC 0001 00001EC8       540              MOVE.B  #1, PRINT_SIZE
0000154C  4EB9 00001E36            541              JSR     PRINT_STUFF
00001552  16FC 002C                542              MOVE.B  #',',(A3)+
00001556  4EB9 00001C92            543              JSR     PRINT_EA_MODE
0000155C  6000 FC6E                544              BRA     MAIN_LOOP_END
00001560                           545              
00001560                           546  ***************************END SUB*******************       
00001560                           547   
00001560                           548  
00001560                           549  
00001560                           550  ************************************ SUBA
00001560                           551  
00001560  6000 0002                552  DECODE_SUBA  BRA     SUBA_SRC_REG
00001564                           553              
00001564                           554              * -- chop the bits
00001564                           555              * -- 1/ bits 6 SUBA 7
00001564                           556  
00001564  2A06                     557  SUBA_SRC_REG   MOVE.L  D6, D5
00001566  CA7C 0E00                558              AND.W   #%0000111000000000, D5   
0000156A  123C 0009                559             MOVE.B  #9, D1
0000156E  E2AD                     560              LSR.L   D1, D5                
00001570  13C5 00001E68            561              MOVE.B  D5, SRC_REG
00001576  6000 0002                562              BRA     SUBA_SIZE
0000157A                           563  
0000157A  2A06                     564  SUBA_SIZE   MOVE.L  D6, D5
0000157C  CA7C 0100                565              AND.W   #%0000000100000000, D5   
00001580  E08D                     566              LSR.L   #8, D5                  * -- D5 contains the ss info
00001582  13C5 00001E62            567              MOVE.B  D5, SIZE
00001588  6000 0002                568              BRA     SUBA_MODE
0000158C                           569  
0000158C  2A06                     570  SUBA_MODE    MOVE.L  D6, D5
0000158E  CA7C 0038                571              AND.W   #%0000000000111000, D5   * -- THis is the source!
00001592  E68D                     572              LSR.L   #3, D5
00001594  13C5 00001E65            573              MOVE.B  D5, EA_MODE
0000159A  6000 0002                574              BRA     SUBA_REG
0000159E                           575  
0000159E  2A06                     576  SUBA_REG     MOVE.L  D6, D5
000015A0  CA7C 0007                577              AND.W   #%0000000000000111, D5      * -- Source!
000015A4                           578  
000015A4  13C5 00001E66            579              MOVE.B  D5, EA_REG
000015AA  6000 0002                580              BRA     SUBA_PROCESS
000015AE                           581  
000015AE  4EB9 00001B6E            582  SUBA_PROCESS JSR        DECODE_SRC_REG 
000015B4  4EB9 00001BAA            583              JSR     DECODE_ONE_BIT_SIZE     * -- SUBA supports byte, word, SUBA long so it needs
000015BA                           584                                              * -- 3 bits for SIZE
000015BA  4EB9 00001800            585              JSR     DECODE_EA_MODE
000015C0  6000 0002                586              BRA     SUBA_ARRANGE_OUTPUT
000015C4                           587              
000015C4                           588              
000015C4  16FC 0053                589  SUBA_ARRANGE_OUTPUT            MOVE.B  #'S',(A3)+
000015C8  16FC 0055                590              MOVE.B  #'U',(A3)+
000015CC  16FC 0042                591              MOVE.B  #'B',(A3)+
000015D0  16FC 0041                592              MOVE.B  #'A',(A3)+
000015D4  23F9 00001E72 00001EB4   593              MOVE.L  SIZE_OUT, PRINT_BUFFER
000015DE  13FC 0002 00001EC8       594              MOVE.B  #2, PRINT_SIZE
000015E6  4EB9 00001E36            595              JSR     PRINT_STUFF
000015EC                           596  
000015EC  4EB9 00001C92            597              JSR     PRINT_EA_MODE
000015F2  16FC 002C                598              MOVE.B  #',',(A3)+
000015F6  16FC 0041                599              MOVE.B  #'A',(A3)+
000015FA  23F9 00001E96 00001EB4   600              MOVE.L  SRC_REG_OUT, PRINT_BUFFER
00001604  13FC 0001 00001EC8       601              MOVE.B  #1, PRINT_SIZE
0000160C  4EB9 00001E36            602              JSR     PRINT_STUFF
00001612  6000 FBB8                603              BRA     MAIN_LOOP_END
00001616                           604  
00001616                           605  
00001616                           606  
00001616                           607  ************************************* END SUBA
00001616                           608  
00001616                           609  
00001616                           610  
00001616                           611  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           612  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           613  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           614  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           615  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           616  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           617  * ----------------------------------------------- END EFFECTIVE ADDRESS ------------------------------------------------------------
00001616                           618  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           619  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           620  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           621  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           622  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           623  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           624  
00001616                           625  
00001616                           626  
00001616                           627  
00001616                           628  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           629  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           630  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           631  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           632  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           633  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           634  * --------------------------------------------------- OUTPUT PROCESSING ------------------------------------------------------------
00001616                           635  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           636  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           637  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           638  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           639  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           640  * ----------------------------------------------------------------------------------------------------------------------------------
00001616                           641  
00001616                           642  
00001616                           643  * -- pre-conditions: Address SIZE loaded with correct input
00001616                           644  
00001616                           645  * -- Purpose: Decode a typical 2-bit SIZE field (byte, word, long)
00001616                           646  
00001616                           647  * -- 1. process data
00001616  48E7 0C04                648  DECODE_WEIRD_SIZE  MOVEM.L     D4-D5/A5, -(sp)
0000161A  2A7C 00001E76            649                  MOVEA.L     #WEIRD_SIZE_OUT, A5
00001620  1A39 00001E63            650                  MOVE.B      WEIRD_SIZE, D5
00001626                           651                  
00001626  BA3C 0001                652                  CMP.B       #%01, D5
0000162A  6700 0020                653                  BEQ         WEIRD_SIZE_BYTE
0000162E  BA3C 0003                654                  CMP.B       #%11, D5
00001632  6700 002A                655                  BEQ         WEIRD_SIZE_WORD
00001636  BA3C 0002                656                  CMP.B       #%10, D5
0000163A  6700 0034                657                  BEQ         WEIRD_SIZE_LONG
0000163E  6000 0002                658                  BRA         WEIRD_SIZE_INVALID
00001642                           659                  
00001642                           660  * -- 2. Respond to data
00001642                           661  
00001642  6000 0002                662  WEIRD_SIZE_INVALID     BRA     DECODE_WEIRD_SIZE_DONE
00001646                           663  
00001646  4CDF 2030                664  DECODE_WEIRD_SIZE_DONE    MOVEM.L (sp)+, D4-D5/A5
0000164A  4E75                     665                      RTS
0000164C                           666  
0000164C  1AFC 002E                667  WEIRD_SIZE_BYTE        MOVE.B      #'.', (A5)+
00001650  1AFC 0042                668                      MOVE.B      #'B', (A5)+
00001654  13FC 0000 00001E71       669                      MOVE.B      #0, PERSONAL_SIZE_CONVENTION
0000165C  60E8                     670                      BRA         DECODE_WEIRD_SIZE_DONE
0000165E                           671  
0000165E  1AFC 002E                672  WEIRD_SIZE_WORD        MOVE.B      #'.', (A5)+
00001662  1AFC 0057                673                      MOVE.B      #'W', (A5)+
00001666  13FC 0001 00001E71       674                      MOVE.B      #1, PERSONAL_SIZE_CONVENTION
0000166E  60D6                     675                      BRA         DECODE_WEIRD_SIZE_DONE
00001670                           676  
00001670  1AFC 002E                677  WEIRD_SIZE_LONG        MOVE.B      #'.', (A5)+
00001674  1AFC 004C                678                      MOVE.B      #'L', (A5)+
00001678  13FC 0002 00001E71       679                      MOVE.B      #2, PERSONAL_SIZE_CONVENTION
00001680  60C4                     680                      BRA         DECODE_WEIRD_SIZE_DONE
00001682                           681  
00001682                           682  * -------------------------------------------------------
00001682                           683  
00001682                           684  
00001682                           685  * -- pre-conditions: Address DEST_MODE loaded with correct input
00001682                           686  * --                 Address DEST_REG  loaded with correct input
00001682                           687  * --                 If mode is Immediate Data, need data size
00001682                           688  * --                 stored in PERSONAL_SIZE_CONVENTION (0 = byte, 1 = word, anything else = long)
00001682                           689  
00001682                           690  * -- Purpose: Decode a typical deSt_mode (Data register, Address register, etc.)
00001682                           691  
00001682                           692  * -- 1. process data
00001682  48E7 0C04                693  DECODE_DEST_MODE  MOVEM.L     D4-D5/A5, -(sp)
00001686  2A7C 00001E98            694                  MOVEA.L     #DEST_MODE_OUT, A5
0000168C  1A39 00001E69            695                  MOVE.B      DEST_MODE, D5
00001692                           696                  
00001692  BA3C 0000                697                  CMP.B       #%000, D5
00001696  6700 0038                698                  BEQ         DEST_MODE_DREG
0000169A  BA3C 0001                699                  CMP.B       #%001, D5
0000169E  6700 003C                700                  BEQ         DEST_MODE_AREG_DIR
000016A2  BA3C 0002                701                  CMP.B       #%010, D5
000016A6  6700 0040                702                  BEQ         DEST_MODE_AREG_INDIR
000016AA  BA3C 0003                703                  CMP.B       #%011, D5
000016AE  6700 004C                704                  BEQ         DEST_MODE_AREG_INDIR_INC
000016B2  BA3C 0004                705                  CMP.B       #%100, D5
000016B6  6700 005C                706                  BEQ         DEST_MODE_AREG_INDIR_DEC
000016BA  BA3C 0007                707                  CMP.B       #%111, D5
000016BE  6700 006C                708                  BEQ         DEST_MODE_SPECIAL
000016C2  6000 0002                709                  BRA         DEST_MODE_INVALID
000016C6                           710                  
000016C6                           711  * -- 2. Respond to data
000016C6                           712  
000016C6  6000 0002                713  DEST_MODE_INVALID     BRA     DECODE_DEST_DONE
000016CA                           714  
000016CA  4CDF 2030                715  DECODE_DEST_DONE      MOVEM.L (sp)+, D4-D5/A5
000016CE  4E75                     716                      RTS
000016D0                           717  
000016D0  1AFC 0044                718  DEST_MODE_DREG        MOVE.B      #'D', (A5)+
000016D4  4EB9 000019B4            719                      JSR         DECODE_DEST_REG
000016DA  60EE                     720                      BRA         DECODE_DEST_DONE
000016DC                           721  
000016DC  1AFC 0041                722  DEST_MODE_AREG_DIR    MOVE.B      #'A', (A5)+
000016E0  4EB9 000019B4            723                      JSR         DECODE_DEST_REG
000016E6  60E2                     724                      BRA         DECODE_DEST_DONE
000016E8                           725  
000016E8  1AFC 0028                726  DEST_MODE_AREG_INDIR  MOVE.B      #'(', (A5)+
000016EC  1AFC 0041                727                      MOVE.B      #'A', (A5)+
000016F0  4EB9 000019B4            728                      JSR         DECODE_DEST_REG
000016F6  1AFC 0029                729                      MOVE.B      #')', (A5)+
000016FA  60CE                     730                      BRA         DECODE_DEST_DONE
000016FC                           731  
000016FC  1AFC 0028                732  DEST_MODE_AREG_INDIR_INC  MOVE.B      #'(', (A5)+
00001700  1AFC 0041                733                          MOVE.B      #'A', (A5)+
00001704  4EB9 000019B4            734                          JSR         DECODE_DEST_REG
0000170A  1AFC 0029                735                          MOVE.B      #')', (A5)+
0000170E  1AFC 002B                736                          MOVE.B      #'+', (A5)+
00001712  60B6                     737                          BRA         DECODE_DEST_DONE
00001714                           738  
00001714  1AFC 002D                739  DEST_MODE_AREG_INDIR_DEC  MOVE.B      #'-', (A5)+
00001718  1AFC 0028                740                          MOVE.B      #'(', (A5)+
0000171C  1AFC 0041                741                          MOVE.B      #'A', (A5)+
00001720  4EB9 000019B4            742                          JSR         DECODE_DEST_REG
00001726  1AFC 0029                743                          MOVE.B      #')', (A5)+
0000172A  609E                     744                          BRA         DECODE_DEST_DONE
0000172C                           745  
0000172C                           746  * -- relies on the address DEST_REG to be loaded with good data
0000172C                           747  
0000172C  1A39 00001E6A            748  DEST_MODE_SPECIAL     MOVE.B      DEST_REG, D5
00001732  BA3C 0000                749                      CMP.B       #%000, D5
00001736  6700 0016                750                      BEQ         DEST_MODE_DIR_W
0000173A  BA3C 0001                751                      CMP.B       #%001, D5
0000173E  6700 002E                752                      BEQ         DEST_MODE_DIR_L
00001742  BA3C 0004                753                      CMP.B       #%100, D5
00001746  6700 0052                754                      BEQ         DEST_MODE_IMME_DATA
0000174A  6000 FF7A                755                      BRA         DEST_MODE_INVALID
0000174E                           756  
0000174E                           757  * -- direct addressing mode, word-sized address
0000174E  1AFC 0020                758  DEST_MODE_DIR_W     MOVE.B    #' ', (A5)+
00001752  1AFC 0020                759                      MOVE.B    #' ', (A5)+
00001756  1AFC 0020                760                      MOVE.B    #' ', (A5)+
0000175A  1AFC 0024                761                      MOVE.B    #'$', (A5)+
0000175E  4EB9 00001C7A            762                      JSR       READ_AND_PRINT_WORD
00001764  2AF9 00001EAE            763                      MOVE.L    EXTRA_STUFF, (A5)+
0000176A  6000 FF5E                764                      BRA       DECODE_DEST_DONE
0000176E                           765  
0000176E  1AFC 0020                766  DEST_MODE_DIR_L     MOVE.B    #' ', (A5)+
00001772  1AFC 0020                767                      MOVE.B    #' ', (A5)+
00001776  1AFC 0020                768                      MOVE.B    #' ', (A5)+
0000177A  1AFC 0024                769                      MOVE.B    #'$', (A5)+
0000177E  4EB9 00001C7A            770                      JSR       READ_AND_PRINT_WORD
00001784  2AF9 00001EAE            771                      MOVE.L    EXTRA_STUFF, (A5)+
0000178A  4EB9 00001C7A            772                      JSR       READ_AND_PRINT_WORD
00001790  2AF9 00001EAE            773                      MOVE.L    EXTRA_STUFF, (A5)+
00001796  6000 FF32                774                      BRA       DECODE_DEST_DONE
0000179A                           775  
0000179A  1039 00001E71            776  DEST_MODE_IMME_DATA MOVE.B      PERSONAL_SIZE_CONVENTION, D0
000017A0  1AFC 0020                777                      MOVE.B    #' ', (A5)+
000017A4  1AFC 0020                778                      MOVE.B    #' ', (A5)+
000017A8  1AFC 0023                779                      MOVE.B      #'#', (A5)+
000017AC  1AFC 0024                780                      MOVE.B      #'$', (A5)+
000017B0  B03C 0000                781                      CMP.B       #%00, D0
000017B4  6700 000E                782                      BEQ         DEST_IMME_DATA_BYTE
000017B8  B03C 0001                783                      CMP.B       #%01, D0
000017BC  6700 0016                784                      BEQ         DEST_IMME_DATA_WORD
000017C0  6000 0022                785                      BRA         DEST_IMME_DATA_LONG
000017C4                           786  
000017C4  4EB9 00001C7A            787  DEST_IMME_DATA_BYTE      JSR         READ_AND_PRINT_WORD
000017CA  2AF9 00001EAE            788                      MOVE.L    EXTRA_STUFF, (A5)+
000017D0  6000 FEF8                789                      BRA         DECODE_DEST_DONE
000017D4                           790  
000017D4  4EB9 00001C7A            791  DEST_IMME_DATA_WORD      JSR         READ_AND_PRINT_WORD
000017DA  2AF9 00001EAE            792                      MOVE.L    EXTRA_STUFF, (A5)+
000017E0  6000 FEE8                793                      BRA         DECODE_DEST_DONE
000017E4                           794  
000017E4  4EB9 00001C7A            795  DEST_IMME_DATA_LONG      JSR         READ_AND_PRINT_WORD
000017EA  2AF9 00001EAE            796                      MOVE.L    EXTRA_STUFF, (A5)+
000017F0  4EB9 00001C7A            797                      JSR         READ_AND_PRINT_WORD
000017F6  2AF9 00001EAE            798                      MOVE.L    EXTRA_STUFF, (A5)+
000017FC  6000 FECC                799                      BRA         DECODE_DEST_DONE
00001800                           800  
00001800                           801  * ---------------------------------------------------------
00001800                           802  
00001800                           803  * -- pre-conditions: Address EA_MODE loaded with correct input
00001800                           804  * --                 Address EA_REG  loaded with correct input
00001800                           805  * --                 If mode is Immediate Data, need data size
00001800                           806  * --                 stored in PERSONAL_SIZE_CONVENTION (0 = byte, 1 = word, anything else = long)
00001800                           807  
00001800                           808  * -- Purpose: Decode a typical ea_mode (Data register, Address register, etc.)
00001800                           809  
00001800                           810  * -- 1. process data
00001800  48E7 0C04                811  DECODE_EA_MODE  MOVEM.L     D4-D5/A5, -(sp)
00001804  2A7C 00001E7C            812                  MOVEA.L     #EA_MODE_OUT, A5
0000180A  1A39 00001E65            813                  MOVE.B      EA_MODE, D5
00001810                           814                  
00001810  BA3C 0000                815                  CMP.B       #%000, D5
00001814  6700 0038                816                  BEQ         EA_MODE_DREG
00001818  BA3C 0001                817                  CMP.B       #%001, D5
0000181C  6700 003C                818                  BEQ         EA_MODE_AREG_DIR
00001820  BA3C 0002                819                  CMP.B       #%010, D5
00001824  6700 0040                820                  BEQ         EA_MODE_AREG_INDIR
00001828  BA3C 0003                821                  CMP.B       #%011, D5
0000182C  6700 004C                822                  BEQ         EA_MODE_AREG_INDIR_INC
00001830  BA3C 0004                823                  CMP.B       #%100, D5
00001834  6700 005C                824                  BEQ         EA_MODE_AREG_INDIR_DEC
00001838  BA3C 0007                825                  CMP.B       #%111, D5
0000183C  6700 006C                826                  BEQ         EA_MODE_SPECIAL
00001840  6000 0002                827                  BRA         EA_MODE_INVALID
00001844                           828                  
00001844                           829  * -- 2. Respond to data
00001844                           830  
00001844  6000 0002                831  EA_MODE_INVALID     BRA     DECODE_EA_DONE
00001848                           832  
00001848  4CDF 2030                833  DECODE_EA_DONE      MOVEM.L (sp)+, D4-D5/A5
0000184C  4E75                     834                      RTS
0000184E                           835  
0000184E  1AFC 0044                836  EA_MODE_DREG        MOVE.B      #'D', (A5)+
00001852  4EB9 0000197E            837                      JSR         DECODE_EA_REG
00001858  60EE                     838                      BRA         DECODE_EA_DONE
0000185A                           839  
0000185A  1AFC 0041                840  EA_MODE_AREG_DIR    MOVE.B      #'A', (A5)+
0000185E  4EB9 0000197E            841                      JSR         DECODE_EA_REG
00001864  60E2                     842                      BRA         DECODE_EA_DONE
00001866                           843  
00001866  1AFC 0028                844  EA_MODE_AREG_INDIR  MOVE.B      #'(', (A5)+
0000186A  1AFC 0041                845                      MOVE.B      #'A', (A5)+
0000186E  4EB9 0000197E            846                      JSR         DECODE_EA_REG
00001874  1AFC 0029                847                      MOVE.B      #')', (A5)+
00001878  60CE                     848                      BRA         DECODE_EA_DONE
0000187A                           849  
0000187A  1AFC 0028                850  EA_MODE_AREG_INDIR_INC  MOVE.B      #'(', (A5)+
0000187E  1AFC 0041                851                          MOVE.B      #'A', (A5)+
00001882  4EB9 0000197E            852                          JSR         DECODE_EA_REG
00001888  1AFC 0029                853                          MOVE.B      #')', (A5)+
0000188C  1AFC 002B                854                          MOVE.B      #'+', (A5)+
00001890  60B6                     855                          BRA         DECODE_EA_DONE
00001892                           856  
00001892  1AFC 002D                857  EA_MODE_AREG_INDIR_DEC  MOVE.B      #'-', (A5)+
00001896  1AFC 0028                858                          MOVE.B      #'(', (A5)+
0000189A  1AFC 0041                859                          MOVE.B      #'A', (A5)+
0000189E  4EB9 0000197E            860                          JSR         DECODE_EA_REG
000018A4  1AFC 0029                861                          MOVE.B      #')', (A5)+
000018A8  609E                     862                          BRA         DECODE_EA_DONE
000018AA                           863  
000018AA                           864  * -- relies on the address EA_REG to be loaded with good data
000018AA                           865  
000018AA  1A39 00001E66            866  EA_MODE_SPECIAL     MOVE.B      EA_REG, D5
000018B0  BA3C 0000                867                      CMP.B       #%000, D5
000018B4  6700 0016                868                      BEQ         EA_MODE_DIR_W
000018B8  BA3C 0001                869                      CMP.B       #%001, D5
000018BC  6700 002E                870                      BEQ         EA_MODE_DIR_L
000018C0  BA3C 0004                871                      CMP.B       #%100, D5
000018C4  6700 0052                872                      BEQ         EA_MODE_IMME_DATA
000018C8  6000 FF7A                873                      BRA         EA_MODE_INVALID
000018CC                           874  
000018CC                           875  * -- direct addressing mode, word-sized address
000018CC  1AFC 0020                876  EA_MODE_DIR_W     MOVE.B    #' ', (A5)+
000018D0  1AFC 0020                877                      MOVE.B    #' ', (A5)+
000018D4  1AFC 0020                878                      MOVE.B    #' ', (A5)+
000018D8  1AFC 0024                879                      MOVE.B    #'$', (A5)+
000018DC  4EB9 00001C7A            880                      JSR       READ_AND_PRINT_WORD
000018E2  2AF9 00001EAE            881                      MOVE.L    EXTRA_STUFF, (A5)+
000018E8  6000 FF5E                882                      BRA       DECODE_EA_DONE
000018EC                           883  
000018EC  1AFC 0020                884  EA_MODE_DIR_L     MOVE.B    #' ', (A5)+
000018F0  1AFC 0020                885                      MOVE.B    #' ', (A5)+
000018F4  1AFC 0020                886                      MOVE.B    #' ', (A5)+
000018F8  1AFC 0024                887                      MOVE.B    #'$', (A5)+
000018FC  4EB9 00001C7A            888                      JSR       READ_AND_PRINT_WORD
00001902  2AF9 00001EAE            889                      MOVE.L    EXTRA_STUFF, (A5)+
00001908  4EB9 00001C7A            890                      JSR       READ_AND_PRINT_WORD
0000190E  2AF9 00001EAE            891                      MOVE.L    EXTRA_STUFF, (A5)+
00001914  6000 FF32                892                      BRA       DECODE_EA_DONE
00001918                           893  
00001918  1039 00001E71            894  EA_MODE_IMME_DATA MOVE.B      PERSONAL_SIZE_CONVENTION, D0
0000191E  1AFC 0020                895                      MOVE.B      #' ', (A5)+
00001922  1AFC 0020                896                      MOVE.B      #' ', (A5)+
00001926  1AFC 0023                897                      MOVE.B      #'#', (A5)+
0000192A  1AFC 0024                898                      MOVE.B      #'$', (A5)+
0000192E  B03C 0000                899                      CMP.B       #%00, D0
00001932  6700 000E                900                      BEQ         EA_IMME_DATA_BYTE
00001936  B03C 0001                901                      CMP.B       #%01, D0
0000193A  6700 0016                902                      BEQ         EA_IMME_DATA_WORD
0000193E  6000 0022                903                      BRA         EA_IMME_DATA_LONG
00001942                           904  
00001942  4EB9 00001C7A            905  EA_IMME_DATA_BYTE      JSR         READ_AND_PRINT_WORD
00001948  2AF9 00001EAE            906                      MOVE.L    EXTRA_STUFF, (A5)+
0000194E  6000 FEF8                907                      BRA         DECODE_EA_DONE
00001952                           908  
00001952  4EB9 00001C7A            909  EA_IMME_DATA_WORD      JSR         READ_AND_PRINT_WORD
00001958  2AF9 00001EAE            910                      MOVE.L    EXTRA_STUFF, (A5)+
0000195E  6000 FEE8                911                      BRA         DECODE_EA_DONE
00001962                           912  
00001962  4EB9 00001C7A            913  EA_IMME_DATA_LONG      JSR         READ_AND_PRINT_WORD
00001968  2AF9 00001EAE            914                      MOVE.L    EXTRA_STUFF, (A5)+
0000196E  4EB9 00001C7A            915                      JSR         READ_AND_PRINT_WORD
00001974  2AF9 00001EAE            916                      MOVE.L    EXTRA_STUFF, (A5)+
0000197A  6000 FECC                917                      BRA         DECODE_EA_DONE
0000197E                           918  * ----------------------
0000197E                           919  * EA_REG AND DEST_REG
0000197E                           920  
0000197E                           921  
0000197E                           922  * -- process EA field: 3-bit REGISTER
0000197E                           923  * -- convention: Binary --> alphanumerical string
0000197E                           924  * -- Supported opcodes: All opcodes
0000197E                           925  
0000197E                           926  * -- preconditions: Assume that the address EA_REG is loaded with correct data
0000197E                           927  * -- postcondition: The address EA_REG_OUT is loaded with the appropriate string
0000197E                           928  
0000197E  48E7 0600                929  DECODE_EA_REG   MOVEM.L     D5-D6, -(sp)
00001982  7A00                     930                  MOVE.L      #0, D5
00001984  1A39 00001E66            931                  MOVE.B      EA_REG, D5
0000198A                           932                  
0000198A  BA3C 0000                933                  CMP.B       #%000, D5
0000198E  6D00 000E                934                  BLT         INVALID_EA_REG
00001992  BA3C 0007                935                  CMP.B       #%111, D5
00001996  6E00 0006                936                  BGT         INVALID_EA_REG
0000199A  6000 0010                937                  BRA         VALID_EA_REG
0000199E                           938  
0000199E  1AFC 003F                939  INVALID_EA_REG  MOVE.B      #'?', (A5)+
000019A2  6000 0002                940                  BRA         EA_REG_DONE
000019A6                           941  
000019A6  4CDF 0060                942  EA_REG_DONE     MOVEM.L     (sp)+, D5-D6
000019AA  4E75                     943                  RTS
000019AC                           944  
000019AC                           945  * --- WARNING: make sure that EA_REG_OUT holds enough space for at least one LONG data piece
000019AC  0605 0030                946  VALID_EA_REG    ADD.B       #$30, D5    * -- convert hex into string
000019B0  1AC5                     947                  MOVE.B      D5, (A5)+    * -- ensured to be one char (1byte)
000019B2  60F2                     948                  BRA         EA_REG_DONE
000019B4                           949  
000019B4                           950  * ====================
000019B4                           951  
000019B4                           952  * -- process DEST field: 3-bit REGISTER
000019B4                           953  * -- convention: Binary --> alphanumerical string
000019B4                           954  * -- Supported opcodes: All opcodes
000019B4                           955  
000019B4                           956  * -- preconditions: Assume that the address DEST_REG is loaded with correct data
000019B4                           957  * -- postcondition: The address DEST_REG_OUT is loaded with the appropriate string
000019B4                           958  
000019B4  48E7 0600                959  DECODE_DEST_REG MOVEM.L     D5-D6, -(sp)
000019B8  7A00                     960                  MOVE.L      #0, D5
000019BA  1A39 00001E6A            961                  MOVE.B      DEST_REG, D5
000019C0  2A7C 00001EA4            962                  MOVE.L      #DEST_REG_OUT, A5
000019C6                           963                  
000019C6  BA3C 0000                964                  CMP.B       #%000, D5
000019CA  6D00 000E                965                  BLT         INVALID_DEST_REG
000019CE  BA3C 0007                966                  CMP.B       #%111, D5
000019D2  6E00 0006                967                  BGT         INVALID_DEST_REG
000019D6  6000 0010                968                  BRA         VALID_DEST_REG
000019DA                           969  
000019DA  1AFC 003F                970  INVALID_DEST_REG  MOVE.B      #'?', (A5)+
000019DE  6000 0002                971                  BRA         DEST_REG_DONE
000019E2                           972  
000019E2  4CDF 0060                973  DEST_REG_DONE     MOVEM.L     (sp)+, D5-D6
000019E6  4E75                     974                  RTS
000019E8                           975  
000019E8                           976  * --- WARNING: make sure that DEST_REG_OUT holds enough space for at ldestst one LONG data piece
000019E8  0605 0030                977  VALID_DEST_REG    ADD.B       #$30, D5    * -- convert hex into string
000019EC  1AC5                     978                  MOVE.B      D5, (A5)+    * -- ensured to be one char (1byte)
000019EE  60F2                     979                  BRA         DEST_REG_DONE
000019F0                           980  
000019F0                           981  
000019F0                           982  
000019F0                           983  * ==================== SRC
000019F0                           984  
000019F0                           985  
000019F0                           986  * -- pre-conditions: Address SRC_MODE loaded with correct input
000019F0                           987  * --                 Address SRC_REG  loaded with correct input
000019F0                           988  * --                 If mode is Immediate Data, need data size
000019F0                           989  * --                 stored in PERSONAL_SIZE_CONVENTION (0 = byte, 1 = word, anything else = long)
000019F0                           990  
000019F0                           991  * -- Purpose: Decode a typical SRC_mode (Data register, Address register, etc.)
000019F0                           992  
000019F0                           993  * -- 1. process data
000019F0  48E7 0C04                994  DECODE_SRC_MODE  MOVEM.L     D4-D5/A5, -(sp)
000019F4  2A7C 00001E8A            995                  MOVEA.L     #SRC_MODE_OUT, A5
000019FA  1A39 00001E67            996                  MOVE.B      SRC_MODE, D5
00001A00                           997                  
00001A00  BA3C 0000                998                  CMP.B       #%000, D5
00001A04  6700 0038                999                  BEQ         SRC_MODE_DREG
00001A08  BA3C 0001               1000                  CMP.B       #%001, D5
00001A0C  6700 003C               1001                  BEQ         SRC_MODE_AREG_DIR
00001A10  BA3C 0002               1002                  CMP.B       #%010, D5
00001A14  6700 0040               1003                  BEQ         SRC_MODE_AREG_INDIR
00001A18  BA3C 0003               1004                  CMP.B       #%011, D5
00001A1C  6700 004C               1005                  BEQ         SRC_MODE_AREG_INDIR_INC
00001A20  BA3C 0004               1006                  CMP.B       #%100, D5
00001A24  6700 005C               1007                  BEQ         SRC_MODE_AREG_INDIR_DEC
00001A28  BA3C 0007               1008                  CMP.B       #%111, D5
00001A2C  6700 006C               1009                  BEQ         SRC_MODE_SPECIAL
00001A30  6000 0002               1010                  BRA         SRC_MODE_INVALID
00001A34                          1011                  
00001A34                          1012  * -- 2. Respond to data
00001A34                          1013  
00001A34  6000 0002               1014  SRC_MODE_INVALID     BRA     DECODE_SRC_DONE
00001A38                          1015  
00001A38  4CDF 2030               1016  DECODE_SRC_DONE      MOVEM.L (sp)+, D4-D5/A5
00001A3C  4E75                    1017                      RTS
00001A3E                          1018  
00001A3E  1AFC 0044               1019  SRC_MODE_DREG        MOVE.B      #'D', (A5)+
00001A42  4EB9 00001B6E           1020                      JSR         DECODE_SRC_REG
00001A48  60EE                    1021                      BRA         DECODE_SRC_DONE
00001A4A                          1022  
00001A4A  1AFC 0041               1023  SRC_MODE_AREG_DIR    MOVE.B      #'A', (A5)+
00001A4E  4EB9 00001B6E           1024                      JSR         DECODE_SRC_REG
00001A54  60E2                    1025                      BRA         DECODE_SRC_DONE
00001A56                          1026  
00001A56  1AFC 0028               1027  SRC_MODE_AREG_INDIR  MOVE.B      #'(', (A5)+
00001A5A  1AFC 0041               1028                      MOVE.B      #'A', (A5)+
00001A5E  4EB9 00001B6E           1029                      JSR         DECODE_SRC_REG
00001A64  1AFC 0029               1030                      MOVE.B      #')', (A5)+
00001A68  60CE                    1031                      BRA         DECODE_SRC_DONE
00001A6A                          1032  
00001A6A  1AFC 0028               1033  SRC_MODE_AREG_INDIR_INC  MOVE.B      #'(', (A5)+
00001A6E  1AFC 0041               1034                          MOVE.B      #'A', (A5)+
00001A72  4EB9 00001B6E           1035                          JSR         DECODE_SRC_REG
00001A78  1AFC 0029               1036                          MOVE.B      #')', (A5)+
00001A7C  1AFC 002B               1037                          MOVE.B      #'+', (A5)+
00001A80  60B6                    1038                          BRA         DECODE_SRC_DONE
00001A82                          1039  
00001A82  1AFC 002D               1040  SRC_MODE_AREG_INDIR_DEC  MOVE.B      #'-', (A5)+
00001A86  1AFC 0028               1041                          MOVE.B      #'(', (A5)+
00001A8A  1AFC 0041               1042                          MOVE.B      #'A', (A5)+
00001A8E  4EB9 00001B6E           1043                          JSR         DECODE_SRC_REG
00001A94  1AFC 0029               1044                          MOVE.B      #')', (A5)+
00001A98  609E                    1045                          BRA         DECODE_SRC_DONE
00001A9A                          1046  
00001A9A                          1047  * -- relies on the address SRC_REG to be loaded with good data
00001A9A                          1048  
00001A9A  1A39 00001E68           1049  SRC_MODE_SPECIAL     MOVE.B      SRC_REG, D5
00001AA0  BA3C 0000               1050                      CMP.B       #%000, D5
00001AA4  6700 0016               1051                      BEQ         SRC_MODE_DIR_W
00001AA8  BA3C 0001               1052                      CMP.B       #%001, D5
00001AAC  6700 002E               1053                      BEQ         SRC_MODE_DIR_L
00001AB0  BA3C 0004               1054                      CMP.B       #%100, D5
00001AB4  6700 0052               1055                      BEQ         SRC_MODE_IMME_DATA
00001AB8  6000 FF7A               1056                      BRA         SRC_MODE_INVALID
00001ABC                          1057  
00001ABC                          1058  * -- direct addressing mode, word-sized address
00001ABC  1AFC 0020               1059  SRC_MODE_DIR_W     MOVE.B    #' ', (A5)+
00001AC0  1AFC 0020               1060                      MOVE.B    #' ', (A5)+
00001AC4  1AFC 0020               1061                      MOVE.B    #' ', (A5)+
00001AC8  1AFC 0024               1062                      MOVE.B    #'$', (A5)+
00001ACC  4EB9 00001C7A           1063                      JSR       READ_AND_PRINT_WORD
00001AD2  2AF9 00001EAE           1064                      MOVE.L    EXTRA_STUFF, (A5)+
00001AD8  6000 FF5E               1065                      BRA       DECODE_SRC_DONE
00001ADC                          1066  
00001ADC  1AFC 0020               1067  SRC_MODE_DIR_L     MOVE.B    #' ', (A5)+
00001AE0  1AFC 0020               1068                      MOVE.B    #' ', (A5)+
00001AE4  1AFC 0020               1069                      MOVE.B    #' ', (A5)+
00001AE8  1AFC 0024               1070                      MOVE.B    #'$', (A5)+
00001AEC  4EB9 00001C7A           1071                      JSR       READ_AND_PRINT_WORD
00001AF2  2AF9 00001EAE           1072                      MOVE.L    EXTRA_STUFF, (A5)+
00001AF8  4EB9 00001C7A           1073                      JSR       READ_AND_PRINT_WORD
00001AFE  2AF9 00001EAE           1074                      MOVE.L    EXTRA_STUFF, (A5)+
00001B04  6000 FF32               1075                      BRA       DECODE_SRC_DONE
00001B08                          1076  
00001B08  1039 00001E71           1077  SRC_MODE_IMME_DATA MOVE.B      PERSONAL_SIZE_CONVENTION, D0
00001B0E  1AFC 0020               1078                      MOVE.B    #' ', (A5)+
00001B12  1AFC 0020               1079                      MOVE.B    #' ', (A5)+
00001B16  1AFC 0023               1080                      MOVE.B      #'#', (A5)+
00001B1A  1AFC 0024               1081                      MOVE.B      #'$', (A5)+
00001B1E  B03C 0000               1082                      CMP.B       #%00, D0
00001B22  6700 000E               1083                      BEQ         SRC_IMME_DATA_BYTE
00001B26  B03C 0001               1084                      CMP.B       #%01, D0
00001B2A  6700 0016               1085                      BEQ         SRC_IMME_DATA_WORD
00001B2E  6000 0022               1086                      BRA         SRC_IMME_DATA_LONG
00001B32                          1087  
00001B32  4EB9 00001C7A           1088  SRC_IMME_DATA_BYTE      JSR         READ_AND_PRINT_WORD
00001B38  2AF9 00001EAE           1089                      MOVE.L    EXTRA_STUFF, (A5)+
00001B3E  6000 FEF8               1090                      BRA         DECODE_SRC_DONE
00001B42                          1091  
00001B42  4EB9 00001C7A           1092  SRC_IMME_DATA_WORD      JSR         READ_AND_PRINT_WORD
00001B48  2AF9 00001EAE           1093                      MOVE.L    EXTRA_STUFF, (A5)+
00001B4E  6000 FEE8               1094                      BRA         DECODE_SRC_DONE
00001B52                          1095  
00001B52  4EB9 00001C7A           1096  SRC_IMME_DATA_LONG      JSR         READ_AND_PRINT_WORD
00001B58  2AF9 00001EAE           1097                      MOVE.L    EXTRA_STUFF, (A5)+
00001B5E  4EB9 00001C7A           1098                      JSR         READ_AND_PRINT_WORD
00001B64  2AF9 00001EAE           1099                      MOVE.L    EXTRA_STUFF, (A5)+
00001B6A  6000 FECC               1100                      BRA         DECODE_SRC_DONE
00001B6E                          1101  
00001B6E                          1102  
00001B6E                          1103  
00001B6E                          1104  * -- process SRC field: 3-bit REGISTER
00001B6E                          1105  * -- convention: Binary --> alphanumerical string
00001B6E                          1106  * -- Supported opcodes: All opcodes
00001B6E                          1107  
00001B6E                          1108  * -- preconditions: Assume that the address SRC_REG is loaded with correct data
00001B6E                          1109  * -- postcondition: The address SRC_REG_OUT is loaded with the appropriate string
00001B6E                          1110  
00001B6E  48E7 0600               1111  DECODE_SRC_REG MOVEM.L     D5-D6, -(sp)
00001B72  7A00                    1112                  MOVE.L      #0, D5
00001B74  1A39 00001E68           1113                  MOVE.B      SRC_REG, D5
00001B7A  2A7C 00001E96           1114                  MOVE.L      #SRC_REG_OUT, A5
00001B80                          1115                  
00001B80  BA3C 0000               1116                  CMP.B       #%000, D5
00001B84  6D00 000E               1117                  BLT         INVALID_SRC_REG
00001B88  BA3C 0007               1118                  CMP.B       #%111, D5
00001B8C  6E00 0006               1119                  BGT         INVALID_SRC_REG
00001B90  6000 0010               1120                  BRA         VALID_SRC_REG
00001B94                          1121  
00001B94  1AFC 003F               1122  INVALID_SRC_REG  MOVE.B      #'?', (A5)+
00001B98  6000 0002               1123                  BRA         SRC_REG_DONE
00001B9C                          1124  
00001B9C  4CDF 0060               1125  SRC_REG_DONE     MOVEM.L     (sp)+, D5-D6
00001BA0  4E75                    1126                  RTS
00001BA2                          1127  
00001BA2                          1128  * --- WARNING: make sure that SRC_REG_OUT holds enough space for at lSRCst one LONG data piece
00001BA2  0605 0030               1129  VALID_SRC_REG    ADD.B       #$30, D5    * -- convert hex into string
00001BA6  1AC5                    1130                  MOVE.B      D5, (A5)+    * -- ensured to be one char (1byte)
00001BA8  60F2                    1131                  BRA         SRC_REG_DONE
00001BAA                          1132  
00001BAA                          1133  
00001BAA                          1134  
00001BAA                          1135  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1136  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1137  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1138  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1139  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1140  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1141  * ----------------------------------------------- END OUTPUT PROCESSING ------------------------------------------------------------
00001BAA                          1142  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1143  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1144  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1145  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1146  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1147  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1148  
00001BAA                          1149  
00001BAA                          1150  
00001BAA                          1151  
00001BAA                          1152  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1153  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1154  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1155  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1156  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1157  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1158  * ----------------------------------------------------- SUBROUTINES ----------------------------------------------------------------
00001BAA                          1159  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1160  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1161  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1162  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1163  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1164  * ----------------------------------------------------------------------------------------------------------------------------------
00001BAA                          1165  
00001BAA                          1166  
00001BAA                          1167  
00001BAA                          1168  
00001BAA                          1169  
00001BAA                          1170  
00001BAA                          1171  
00001BAA                          1172  
00001BAA                          1173  
00001BAA                          1174  * ----------------------
00001BAA                          1175  * Extra subroutines
00001BAA                          1176  
00001BAA                          1177  
00001BAA                          1178  * -- process EA field: 1-bit SIZE
00001BAA                          1179  * -- convention: 0-WORD, 1-LONG
00001BAA                          1180  * -- Supported opcodes: All the -A variants except for MOVEA, whose convention is similar to MOVE's
00001BAA                          1181  
00001BAA                          1182  * -- preconditions: Assume that the address ONEBIT_SIZE is loaded with correct data
00001BAA                          1183  * -- postcondition: The address ONEBIT_SIZE_OUT is loaded with the appropriate string
00001BAA                          1184  
00001BAA  48E7 0604               1185  DECODE_ONE_BIT_SIZE MOVEM.L     D5-D6/A5, -(sp)
00001BAE  1A39 00001E62           1186                      MOVE.B      SIZE, D5
00001BB4  2A7C 00001E72           1187                      MOVEA.L     #SIZE_OUT, A5
00001BBA                          1188  
00001BBA  BA3C 0000               1189                      CMP.B       #%0, D5
00001BBE  6700 001C               1190                      BEQ         SIZE_WORD_ONE
00001BC2  BA3C 0001               1191                      CMP.B       #%1, D5
00001BC6  6700 0026               1192                      BEQ         SIZE_LONG_ONE
00001BCA  6000 0002               1193                      BRA         INVALID_SIZE
00001BCE                          1194  
00001BCE  1ABC 003F               1195  INVALID_SIZE        MOVE.B      #'?', (A5)
00001BD2  6000 0002               1196                      BRA         ONEBIT_SIZE_DONE
00001BD6                          1197  
00001BD6  4CDF 2060               1198  ONEBIT_SIZE_DONE    MOVEM.L     (sp)+, D5-D6/A5
00001BDA  4E75                    1199                      RTS
00001BDC                          1200  
00001BDC  1AFC 002E               1201  SIZE_WORD_ONE           MOVE.B      #'.', (A5)+
00001BE0  1AFC 0057               1202                      MOVE.B      #'W', (A5)+
00001BE4  13FC 0001 00001E71      1203                      MOVE.B      #1, PERSONAL_SIZE_CONVENTION
00001BEC  60E8                    1204                      BRA         ONEBIT_SIZE_DONE
00001BEE                          1205  
00001BEE  1AFC 002E               1206  SIZE_LONG_ONE           MOVE.B      #'.', (A5)+
00001BF2  1AFC 004C               1207                      MOVE.B      #'L', (A5)+
00001BF6  13FC 0002 00001E71      1208                      MOVE.B      #2, PERSONAL_SIZE_CONVENTION
00001BFE  60D6                    1209                      BRA         ONEBIT_SIZE_DONE
00001C00                          1210  
00001C00                          1211  
00001C00  48E7 0C04               1212  DECODE_TWO_BIT_SIZE  MOVEM.L     D4-D5/A5, -(sp)
00001C04  2A7C 00001E72           1213                  MOVEA.L     #SIZE_OUT, A5
00001C0A  1A39 00001E62           1214                  MOVE.B      SIZE, D5
00001C10                          1215                  
00001C10  BA3C 0000               1216                  CMP.B       #%000, D5
00001C14  6700 0020               1217                  BEQ         SIZE_BYTE
00001C18  BA3C 0001               1218                  CMP.B       #%001, D5
00001C1C  6700 0024               1219                  BEQ         SIZE_WORD
00001C20  BA3C 0002               1220                  CMP.B       #%010, D5
00001C24  6700 0028               1221                  BEQ         SIZE_LONG
00001C28  6000 0002               1222                  BRA         SIZE_INVALID
00001C2C                          1223                  
00001C2C                          1224  * -- 2. Respond to data
00001C2C                          1225  
00001C2C  6000 0002               1226  SIZE_INVALID     BRA     DECODE_TWO_BIT_SIZE_DONE
00001C30                          1227  
00001C30  4CDF 2030               1228  DECODE_TWO_BIT_SIZE_DONE    MOVEM.L (sp)+, D4-D5/A5
00001C34  4E75                    1229                      RTS
00001C36                          1230  
00001C36  1AFC 002E               1231  SIZE_BYTE        MOVE.B      #'.', (A5)+
00001C3A  1AFC 0042               1232                      MOVE.B      #'B', (A5)+
00001C3E  6000 FC08               1233                      BRA         DECODE_EA_DONE
00001C42                          1234  
00001C42  1AFC 002E               1235  SIZE_WORD        MOVE.B      #'.', (A5)+
00001C46  1AFC 0057               1236                      MOVE.B      #'W', (A5)+
00001C4A  6000 FBFC               1237                      BRA         DECODE_EA_DONE
00001C4E                          1238  
00001C4E  1AFC 002E               1239  SIZE_LONG        MOVE.B      #'.', (A5)+
00001C52  1AFC 004C               1240                      MOVE.B      #'L', (A5)+
00001C56  6000 FBF0               1241                      BRA         DECODE_EA_DONE
00001C5A                          1242  
00001C5A                          1243  
00001C5A                          1244  
00001C5A                          1245  DECODE_DATA       
00001C5A  1E39 00001E70           1246                      MOVE.B      DATA, D7
00001C60  BE3C 0000               1247                      CMP.B       #%000, D7
00001C64  6700 000E               1248                      BEQ         TRANSLATE_TO_8
00001C68  4EB9 00001CE6           1249                      JSR         CONVERT_HEX_TO_STRING
00001C6E  13C7 00001EB2           1250                      MOVE.B      D7, DATA_OUT
00001C74                          1251               
00001C74  1E3C 0008               1252  TRANSLATE_TO_8      MOVE.B      #8, D7
00001C78  4E75                    1253                      RTS
00001C7A                          1254  
00001C7A  48E7 0100               1255  READ_AND_PRINT_WORD MOVEM.L     D7, -(sp)
00001C7E  3E1E                    1256                      MOVE.W      (A6)+, D7
00001C80  4EB9 00001CE6           1257                      JSR         CONVERT_HEX_TO_STRING
00001C86  23C7 00001EAE           1258                      MOVE.L      D7, EXTRA_STUFF
00001C8C  4CDF 0080               1259                      MOVEM.L     (sp)+, D7
00001C90  4E75                    1260                      RTS
00001C92                          1261  
00001C92  48E7 0060               1262  PRINT_EA_MODE       MOVEM.L     A1-A2, -(sp)
00001C96  227C 00001E7C           1263                      MOVEA.L     #EA_MODE_OUT, A1
00001C9C  247C 00001EB4           1264                      MOVEA.L     #PRINT_BUFFER, A2
00001CA2  13FC 000C 00001EC8      1265                      MOVE.B      #12, PRINT_SIZE
00001CAA  24D9                    1266                      MOVE.L      (A1)+, (A2)+
00001CAC  24D9                    1267                      MOVE.L      (A1)+, (A2)+
00001CAE  24D9                    1268                      MOVE.L      (A1)+, (A2)+
00001CB0  4EB9 00001E36           1269                      JSR         PRINT_STUFF
00001CB6  4CDF 0600               1270                      MOVEM.L     (sp)+, A1-A2
00001CBA  4E75                    1271                      RTS
00001CBC                          1272  
00001CBC  48E7 0060               1273  PRINT_DEST_MODE     MOVEM.L     A1-A2, -(sp)
00001CC0  227C 00001E98           1274                      MOVEA.L     #DEST_MODE_OUT, A1
00001CC6  247C 00001EB4           1275                      MOVEA.L     #PRINT_BUFFER, A2
00001CCC  13FC 000C 00001EC8      1276                      MOVE.B      #12, PRINT_SIZE
00001CD4  24D9                    1277                      MOVE.L      (A1)+, (A2)+
00001CD6  24D9                    1278                      MOVE.L      (A1)+, (A2)+
00001CD8  24D9                    1279                      MOVE.L      (A1)+, (A2)+
00001CDA  4EB9 00001E36           1280                      JSR         PRINT_STUFF
00001CE0  4CDF 0600               1281                      MOVEM.L     (sp)+, A1-A2
00001CE4  4E75                    1282                      RTS
00001CE6                          1283  
00001CE6                          1284  
00001CE6                          1285  * -- put convert code here
00001CE6                          1286  
00001CE6                          1287  
00001CE6  48E7 FE00               1288  CONVERT_HEX_TO_STRING   MOVEM.L     D0-D6, -(sp)
00001CEA                          1289      
00001CEA  4240                    1290      CLR     D0
00001CEC  4241                    1291      CLR     D1
00001CEE  4242                    1292      CLR     D2
00001CF0  4243                    1293      CLR     D3
00001CF2  4244                    1294      CLR     D4
00001CF4  4245                    1295      CLR     D5
00001CF6  4246                    1296      CLR     D6
00001CF8                          1297  
00001CF8                          1298      
00001CF8                          1299      * --- support only word-sized hex data in D7
00001CF8                          1300      * --  D6 is designated as the container for the masked values
00001CF8                          1301      * --  D5 is designated as the container for the summands
00001CF8                          1302      * --  D4 is the container of the sum
00001CF8                          1303      * --  D3 is the container of the length of the string
00001CF8                          1304      * --  D0 is designated for on-the-fly arithmetic
00001CF8                          1305      
00001CF8  163C 0004               1306      MOVE.B      #4, D3
00001CFC                          1307      
00001CFC  B63C 0000               1308  CONVERT_HEX_TO_STRING_LOOP  CMP.B   #0, D3
00001D00  6700 0030               1309      BEQ         HEX2STR_DONE
00001D04                          1310  
00001D04  7400                    1311      MOVE.L      #0, D2
00001D06  7200                    1312      MOVE.L      #0, D1
00001D08                          1313      
00001D08  1003                    1314      MOVE.B      D3, D0
00001D0A  5300                    1315      SUB.B       #1, D0          * -- D3 - 1
00001D0C  E540                    1316      ASL.W       #2, D0          * -- (D3 - 1) * 4
00001D0E  143C 0004               1317      MOVE.B      #4, D2
00001D12  1203                    1318      MOVE.B      D3, D1
00001D14  9401                    1319      SUB.B       D1, D2          * -- 4 - n       
00001D16  E542                    1320      ASL.W       #2, D2          * -- (4 - D3) * 4
00001D18                          1321  
00001D18  3C07                    1322      MOVE.W      D7, D6
00001D1A  E56E                    1323      LSL.W       D2, D6          * -- shift 4*(4-n) bits to get rid of the more significant bits
00001D1C  E46E                    1324      LSR.W       D2, D6          * -- undo the shift
00001D1E  E06E                    1325      LSR.W       D0, D6          * -- shift 4*(n-1) bits to get the most
00001D20                          1326                                  * -- significant digit at this time
00001D20  2A06                    1327      MOVE.L      D6, D5
00001D22  4EB9 00001D3A           1328      JSR         CONVERT_ONE_HEX
00001D28                          1329      
00001D28                          1330      * ------------------------------ D5 now contains the STR equivalent of
00001D28                          1331      *                                D6, shift this char into position and loop
00001D28                          1332      
00001D28  E340                    1333      ASL.W       #1, D0          * (D3 - 1) * 8
00001D2A  E1AD                    1334      LSL.L       D0, D5
00001D2C  D885                    1335      ADD.L       D5, D4
00001D2E  5303                    1336      SUB.B       #1, D3
00001D30  60CA                    1337      BRA         CONVERT_HEX_TO_STRING_LOOP
00001D32                          1338      
00001D32  2E04                    1339  HEX2STR_DONE    MOVE.L      D4, D7          * -- write result over input
00001D34  4CDF 007F               1340                  MOVEM.L     (sp)+, D0-D6
00001D38  4E75                    1341                  RTS
00001D3A                          1342                  
00001D3A  BA3C 0000               1343  CONVERT_ONE_HEX CMP.B   #$0, D5
00001D3E  6D00 0012               1344                  BLT     INVALID_HEX_CONVERT
00001D42  BA3C 0009               1345                  CMP.B   #$9, D5
00001D46  6E00 000E               1346                  BGT     CONVERT_ONE_HEX_NAN
00001D4A  0605 0030               1347                  ADD.B   #$30, D5            * -- D5 has number chars, add $30
00001D4E  6000 001A               1348                  BRA     DONE_CONVERT
00001D52                          1349                  
00001D52  6000 0016               1350  INVALID_HEX_CONVERT     BRA     DONE_CONVERT
00001D56                          1351  
00001D56  BA3C 000A               1352  CONVERT_ONE_HEX_NAN     CMP.B   #$A, D5
00001D5A  6DF6                    1353                          BLT     INVALID_HEX_CONVERT
00001D5C  BA3C 000F               1354                          CMP.B   #$F, D5
00001D60  6EF0                    1355                          BGT     INVALID_HEX_CONVERT
00001D62  0605 0037               1356                          ADD.B   #$37, D5    * -- D5 is a "letter" hex value
00001D66                          1357                                              * -- add 0x37
00001D66  6000 0002               1358                          BRA     DONE_CONVERT
00001D6A                          1359                          
00001D6A  4E75                    1360  DONE_CONVERT    RTS
00001D6C                          1361  
00001D6C                          1362  
00001D6C  23FC 20202020 00001E72  1363  FLUSH_OUTPUT_BUFFER MOVE.L  #$20202020, SIZE_OUT
00001D76  23FC 20202020 00001E76  1364                      MOVE.L  #$20202020, WEIRD_SIZE_OUT
00001D80  23FC 20202020 00001E7A  1365                      MOVE.L  #$20202020, DIRECTION_OUT
00001D8A  23FC 20202020 00001E88  1366                      MOVE.L  #$20202020, EA_REG_OUT
00001D94  23FC 20202020 00001EA4  1367                      MOVE.L  #$20202020, DEST_REG_OUT
00001D9E  23FC 20202020 00001E96  1368                      MOVE.L  #$20202020, SRC_REG_OUT
00001DA8  4EB9 00001DB6           1369                      JSR     FLUSH_EA_MODES
00001DAE  4EB9 00001E08           1370                      JSR     FLUSH_PRINT_BUFFER
00001DB4  4E75                    1371                      RTS
00001DB6                          1372  
00001DB6  48E7 000E               1373  FLUSH_EA_MODES      MOVEM.L A4-A6, -(sp)
00001DBA  287C 00001E7C           1374                      MOVEA.L #EA_MODE_OUT, A4
00001DC0  2A7C 00001E8A           1375                      MOVEA.L #SRC_MODE_OUT, A5
00001DC6  2C7C 00001E98           1376                      MOVEA.L #DEST_MODE_OUT, A6
00001DCC                          1377  
00001DCC  28FC 20202020           1378                      MOVE.L  #$20202020, (A4)+
00001DD2  28FC 20202020           1379                      MOVE.L  #$20202020, (A4)+
00001DD8  28FC 20202020           1380                      MOVE.L  #$20202020, (A4)+
00001DDE  2AFC 20202020           1381                      MOVE.L  #$20202020, (A5)+
00001DE4  2AFC 20202020           1382                      MOVE.L  #$20202020, (A5)+
00001DEA  2AFC 20202020           1383                      MOVE.L  #$20202020, (A5)+
00001DF0  2CFC 20202020           1384                      MOVE.L  #$20202020, (A6)+
00001DF6  2CFC 20202020           1385                      MOVE.L  #$20202020, (A6)+
00001DFC  2CFC 20202020           1386                      MOVE.L  #$20202020, (A6)+
00001E02                          1387  
00001E02  4CDF 7000               1388                      MOVEM.L (sp)+, A4-A6
00001E06  4E75                    1389                      RTS
00001E08                          1390  
00001E08  48E7 0008               1391  FLUSH_PRINT_BUFFER  MOVEM.L A4, -(sp)
00001E0C  287C 00001EB4           1392                      MOVEA.L #PRINT_BUFFER, A4
00001E12                          1393  
00001E12  28FC 20202020           1394                      MOVE.L  #$20202020, (A4)+
00001E18  28FC 20202020           1395                      MOVE.L  #$20202020, (A4)+
00001E1E  28FC 20202020           1396                      MOVE.L  #$20202020, (A4)+
00001E24  28FC 20202020           1397                      MOVE.L  #$20202020, (A4)+
00001E2A  28FC 20202020           1398                      MOVE.L  #$20202020, (A4)+
00001E30  4CDF 1000               1399                      MOVEM.L (sp)+, A4
00001E34  4E75                    1400                      RTS
00001E36                          1401  
00001E36  48E7 8008               1402  PRINT_STUFF         MOVEM.L     A4/D0, -(sp)
00001E3A  1039 00001EC8           1403                      MOVE.B      PRINT_SIZE, D0
00001E40  287C 00001EB4           1404                      MOVEA.L     #PRINT_BUFFER, A4
00001E46  B03C 0000               1405  PRINT_LOOP          CMP.B       #0, D0
00001E4A  6700 0008               1406                      BEQ         PRINT_DONE
00001E4E  16DC                    1407                      MOVE.B      (A4)+, (A3)+
00001E50  5300                    1408                      SUB.B       #1, D0
00001E52  60F2                    1409                      BRA         PRINT_LOOP
00001E54                          1410  
00001E54  4CDF 1001               1411  PRINT_DONE          MOVEM.L     (sp)+, A4/D0
00001E58  4E75                    1412                      RTS
00001E5A                          1413  
00001E5A                          1414  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1415  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1416  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1417  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1418  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1419  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1420  * ------------------------------------------------- END SUBROUTINES ----------------------------------------------------------------
00001E5A                          1421  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1422  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1423  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1424  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1425  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1426  * ----------------------------------------------------------------------------------------------------------------------------------
00001E5A                          1427  
00001E5A  6000 0002               1428  AFTER_MAIN_LOOP BRA     PROGRAM_END
00001E5E                          1429  
00001E5E  FFFF FFFF               1430  PROGRAM_END    SIMHALT             ; halt simulator
00001E62                          1431  
00001E62                          1432  * Put variables and constants here
00001E62                          1433  
00001E62                          1434  
00001E62                          1435  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1436  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1437  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1438  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1439  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1440  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1441  * ------------------------------------------------ GLOBAL CONSTANTS ----------------------------------------------------------------
00001E62                          1442  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1443  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1444  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1445  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1446  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1447  * ----------------------------------------------------------------------------------------------------------------------------------
00001E62                          1448  
00001E62                          1449  
00001E62                          1450  SIZE            DS.B    1
00001E63                          1451  WEIRD_SIZE      DS.B    1
00001E64                          1452  DIRECTION       DS.B    1
00001E65                          1453  EA_MODE         DS.B    1
00001E66                          1454  EA_REG          DS.B    1
00001E67                          1455  SRC_MODE        DS.B    1
00001E68                          1456  SRC_REG         DS.B    1
00001E69                          1457  DEST_MODE       DS.B    1
00001E6A                          1458  DEST_REG        DS.B    1
00001E6B                          1459  ROTATE_IR       DS.B    1
00001E6C                          1460  ROTATE_CR       DS.B    1
00001E6E                          1461  DISPLACEMENT    DS.W    1
00001E70                          1462  DATA            DS.B    1
00001E71                          1463  
00001E71                          1464  PERSONAL_SIZE_CONVENTION    DS.B    1
00001E72                          1465  
00001E72                          1466  SIZE_OUT        DS.L    1
00001E76                          1467  WEIRD_SIZE_OUT  DS.L    1
00001E7A                          1468  DIRECTION_OUT   DS.B    1
00001E7C                          1469  EA_MODE_OUT     DS.L    3
00001E88                          1470  EA_REG_OUT      DS.B    1
00001E8A                          1471  SRC_MODE_OUT    DS.L    3
00001E96                          1472  SRC_REG_OUT     DS.B    1
00001E98                          1473  DEST_MODE_OUT   DS.L    3
00001EA4                          1474  DEST_REG_OUT    DS.B    1
00001EA6                          1475  ROTATE_IR_OUT   DS.L    1
00001EAA                          1476  ROTATE_CR_OUT   DS.L    1
00001EAE                          1477  EXTRA_STUFF     DS.L    1
00001EB2                          1478  DATA_OUT        DS.B    1
00001EB3                          1479  
00001EB4                          1480  PRINT_BUFFER    DS.L    5
00001EC8                          1481  PRINT_SIZE      DS.B    1
00001EC9                          1482  
00001EC9                          1483  
00001EC9                          1484  
00001EC9                          1485   END     START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDQ_ARRANGE_OUTPUT  141A
ADDQ_DATA           13B2
ADDQ_MODE           13DE
ADDQ_PROCESS        1404
ADDQ_REG            13F2
ADDQ_SIZE           13CA
AFTER_MAIN_LOOP     1E5A
CLEAR_ALL           100E
CONVERT_HEX_TO_STRING  1CE6
CONVERT_HEX_TO_STRING_LOOP  1CFC
CONVERT_LOOP        1036
CONVERT_ONE_HEX     1D3A
CONVERT_ONE_HEX_NAN  1D56
CONVERT_START_LOCATION  1020
CONVERT_STR_TO_HEX  1048
DATA                1E70
DATA_OUT            1EB2
DECODE_ADDQ         13AE
DECODE_DATA         1C5A
DECODE_DEST_DONE    16CA
DECODE_DEST_MODE    1682
DECODE_DEST_REG     19B4
DECODE_DIVS         132C
DECODE_EA_DONE      1848
DECODE_EA_MODE      1800
DECODE_EA_REG       197E
DECODE_GROUP_5      1244
DECODE_GROUP_8      1232
DECODE_GROUP_9      1256
DECODE_GROUP_MOVE   121E
DECODE_MOVE         126C
DECODE_MOVEA        126A
DECODE_ONE_BIT_SIZE  1BAA
DECODE_OPCODE       11D8
DECODE_OPCODE_DONE  121C
DECODE_SRC_DONE     1A38
DECODE_SRC_MODE     19F0
DECODE_SRC_REG      1B6E
DECODE_SUB          145E
DECODE_SUBA         1560
DECODE_TWO_BIT_SIZE  1C00
DECODE_TWO_BIT_SIZE_DONE  1C30
DECODE_WEIRD_SIZE   1616
DECODE_WEIRD_SIZE_DONE  1646
DEST_IMME_DATA_BYTE  17C4
DEST_IMME_DATA_LONG  17E4
DEST_IMME_DATA_WORD  17D4
DEST_MODE           1E69
DEST_MODE_AREG_DIR  16DC
DEST_MODE_AREG_INDIR  16E8
DEST_MODE_AREG_INDIR_DEC  1714
DEST_MODE_AREG_INDIR_INC  16FC
DEST_MODE_DIR_L     176E
DEST_MODE_DIR_W     174E
DEST_MODE_DREG      16D0
DEST_MODE_IMME_DATA  179A
DEST_MODE_INVALID   16C6
DEST_MODE_OUT       1E98
DEST_MODE_SPECIAL   172C
DEST_REG            1E6A
DEST_REG_DONE       19E2
DEST_REG_OUT        1EA4
DIRECTION           1E64
DIRECTION_OUT       1E7A
DISPLACEMENT        1E6E
DIVS_ARRANGE_OUTPUT  137E
DIVS_DEST_REG       1330
DIVS_MODE           1348
DIVS_PROCESS        136E
DIVS_REG            135C
DONE_CONVERT        1D6A
EA_IMME_DATA_BYTE   1942
EA_IMME_DATA_LONG   1962
EA_IMME_DATA_WORD   1952
EA_MODE             1E65
EA_MODE_AREG_DIR    185A
EA_MODE_AREG_INDIR  1866
EA_MODE_AREG_INDIR_DEC  1892
EA_MODE_AREG_INDIR_INC  187A
EA_MODE_DIR_L       18EC
EA_MODE_DIR_W       18CC
EA_MODE_DREG        184E
EA_MODE_IMME_DATA   1918
EA_MODE_INVALID     1844
EA_MODE_OUT         1E7C
EA_MODE_SPECIAL     18AA
EA_REG              1E66
EA_REG_DONE         19A6
EA_REG_OUT          1E88
END_CONVERT_LOOP    1046
END_CONVERT_START_LOCATION  1030
END_SHIFT_START_ADDR  11AC
EXTRA_STUFF         1EAE
FLUSH_EA_MODES      1DB6
FLUSH_OUTPUT_BUFFER  1D6C
FLUSH_PRINT_BUFFER  1E08
HEX2STR_DONE        1D32
IDENT_OPCODE        11E4
INVALID_CHARACTER   10FE
INVALID_DEST_REG    19DA
INVALID_EA_REG      199E
INVALID_HEX_CONVERT  1D52
INVALID_OPCODE      1218
INVALID_SIZE        1BCE
INVALID_SRC_REG     1B94
MAINLOOP_PRIME      11AE
MAIN_LOOP           11B4
MAIN_LOOP_END       11CC
MOVE_ARRANGE_OUTPUT  12F0
MOVE_DEST_MODE      12A0
MOVE_DEST_REG       1288
MOVE_MODE           12B4
MOVE_PROCESS        12DA
MOVE_REG            12C8
MOVE_SIZE           1270
ONEBIT_SIZE_DONE    1BD6
PERSONAL_SIZE_CONVENTION  1E71
PRINT_BUFFER        1EB4
PRINT_DEST_MODE     1CBC
PRINT_DONE          1E54
PRINT_EA_MODE       1C92
PRINT_LOOP          1E46
PRINT_SIZE          1EC8
PRINT_STUFF         1E36
PROGRAMLOOP         1000
PROGRAM_END         1E5E
READ_AND_PRINT_WORD  1C7A
REG_FIRST           1536
ROTATE_CR           1E6C
ROTATE_CR_OUT       1EAA
ROTATE_IR           1E6B
ROTATE_IR_OUT       1EA6
SHIFT_START_ADDR    11A2
SIZE                1E62
SIZE_BYTE           1C36
SIZE_INVALID        1C2C
SIZE_LONG           1C4E
SIZE_LONG_ONE       1BEE
SIZE_OUT            1E72
SIZE_WORD           1C42
SIZE_WORD_ONE       1BDC
SRC_IMME_DATA_BYTE  1B32
SRC_IMME_DATA_LONG  1B52
SRC_IMME_DATA_WORD  1B42
SRC_MODE            1E67
SRC_MODE_AREG_DIR   1A4A
SRC_MODE_AREG_INDIR  1A56
SRC_MODE_AREG_INDIR_DEC  1A82
SRC_MODE_AREG_INDIR_INC  1A6A
SRC_MODE_DIR_L      1ADC
SRC_MODE_DIR_W      1ABC
SRC_MODE_DREG       1A3E
SRC_MODE_IMME_DATA  1B08
SRC_MODE_INVALID    1A34
SRC_MODE_OUT        1E8A
SRC_MODE_SPECIAL    1A9A
SRC_REG             1E68
SRC_REG_DONE        1B9C
SRC_REG_OUT         1E96
START               1000
STR_TO_HEX_A        1166
STR_TO_HEX_B        1170
STR_TO_HEX_C        117A
STR_TO_HEX_D        1184
STR_TO_HEX_E        118E
STR_TO_HEX_EIGHT    1152
STR_TO_HEX_F        1198
STR_TO_HEX_FIVE     1134
STR_TO_HEX_FOUR     112A
STR_TO_HEX_NINE     115C
STR_TO_HEX_ONE      110C
STR_TO_HEX_SEVEN    1148
STR_TO_HEX_SIX      113E
STR_TO_HEX_THREE    1120
STR_TO_HEX_TWO      1116
STR_TO_HEX_ZERO     1102
SUBA_ARRANGE_OUTPUT  15C4
SUBA_MODE           158C
SUBA_PROCESS        15AE
SUBA_REG            159E
SUBA_SIZE           157A
SUBA_SRC_REG        1564
SUB_ARRANGE_OUTPUT  14DC
SUB_DIR             1480
SUB_MODE            14A4
SUB_PROCESS         14C6
SUB_REG             14B6
SUB_SIZE            1492
SUB_SRC_REG         1462
TRANSLATE_TO_8      1C74
VALID_DEST_REG      19E8
VALID_EA_REG        19AC
VALID_SRC_REG       1BA2
WEIRD_SIZE          1E63
WEIRD_SIZE_BYTE     164C
WEIRD_SIZE_INVALID  1642
WEIRD_SIZE_LONG     1670
WEIRD_SIZE_OUT      1E76
WEIRD_SIZE_WORD     165E
